{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/blog/spring",
    "result": {"data":{"site":{"siteMetadata":{"title":"My personal Website"}},"markdownRemark":{"id":"efe95be8-510d-5c9f-a445-798b1cba43e7","excerpt":"Dependency Injection and Inversion of Control The Spring IoC container needs to know which beans to create for Dependency Injection. Define Beans Class…","html":"<h1 id=\"dependency-injection-and-inversion-of-control\">Dependency Injection and Inversion of Control</h1>\n<p>The Spring IoC container needs to know which beans to create for Dependency Injection.</p>\n<h2 id=\"define-beans\">Define Beans</h2>\n<table>\n<thead>\n<tr>\n<th>Class Annotation</th>\n<th>Use</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">@Component</code></td>\n<td>generic Spring bean</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">@Service</code></td>\n<td>business service components</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">@Repository</code></td>\n<td>Data Access Objects (DAO) with automatic transaction management</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"inject-beans\">Inject Beans</h2>\n<table>\n<thead>\n<tr>\n<th>Annotation</th>\n<th>Use</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">@Autowired</code></td>\n<td>Class member to be injected</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">@Primary</code></td>\n<td>This bean is selected even if multiple are valid</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">@Qualifier</code></td>\n<td>Can be added to the bean and the field for selection</td>\n</tr>\n</tbody>\n</table>\n<p><code class=\"language-text\">@Autowired</code> can be added to class member fields or to constructors.</p>\n<p>Auto-wiring is successful if exactly one match is found.\nIf multiple candidate beans are available the expected one can be\nannotated with <code class=\"language-text\">@Primary</code>.</p>\n<p>Use <code class=\"language-text\">@Qualifier</code> for manual selection of a bean implementation:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token annotation punctuation\">@Qualifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bubblesort\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BubbleSort</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Sort</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SimpleSort</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Sort</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyBean</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation punctuation\">@Autowired</span>\n  <span class=\"token annotation punctuation\">@Qualifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bubblesort\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token class-name\">Sort</span> algorithm<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"scopes\">Scopes</h2>\n<h3 id=\"generic-scopes\">Generic Scopes</h3>\n<table>\n<thead>\n<tr>\n<th>Scope</th>\n<th>Use</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">singleton</code> (default)</td>\n<td>Only one instance of the bean in a IoC container</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">prototype</code></td>\n<td>A new instance of the bean is created each time it is requested from the IoC container</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"web-context-scopes\">Web Context Scopes</h3>\n<table>\n<thead>\n<tr>\n<th>Scope</th>\n<th>Use</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">request</code></td>\n<td>A new instance of the bean is created for each HTTP request</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">session</code></td>\n<td>A new instance of the bean is created for every HTTP session</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">application</code></td>\n<td>One instance of the bean for a web application</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"usage\">Usage</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token annotation punctuation\">@Scope</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"singleton\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">MyService</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"lifecycle-hooks\">Lifecycle Hooks</h2>\n<table>\n<thead>\n<tr>\n<th>Annotation</th>\n<th>Use</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">@PostConstruct</code></td>\n<td>Method that is called once the bean is fully initialized with dependencies</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">@PreDestroy</code></td>\n<td>Method that is called before the bean is removed from the IoC container</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"run-spring-ioc-container\">Run Spring IoC container</h2>\n<p>Use <code class=\"language-text\">ApplicationContext</code> to launch an IoC container:</p>\n<h3 id=\"configuration-for-application-context\">Configuration for Application Context</h3>\n<table>\n<thead>\n<tr>\n<th>Class Annotation</th>\n<th>Use</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">@Configuration</code></td>\n<td>Define a Spring configuration</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">@ComponentScan</code></td>\n<td>Add information on where to search for beans</td>\n</tr>\n</tbody>\n</table>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span>basePackages <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"com.mycompany.mypackage\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringContext</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"spring-boot\">Spring Boot</h1>\n<p><code class=\"language-text\">@SpringBootApplication</code> is a shortcut for:</p>\n<ul>\n<li><code class=\"language-text\">@Configuration</code>: Spring application context cofiguration</li>\n<li><code class=\"language-text\">@EnableAutoConfiguration</code>: Automatic configuration with sensible (opiniated) defaults</li>\n<li><code class=\"language-text\">@ComponentScan</code>: Scans for Spring beans in the package of this class and all its subpackages</li>\n</ul>\n<h1 id=\"custom-configuration\">Custom Configuration</h1>\n<p>Put a configuration variable as key-value pair into <code class=\"language-text\">src/main/resources/application.properties</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">myservice.url=http://myservice</code></pre></div>\n<p>The value can be read from Java:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyService</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${myservice.url}\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> url<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// this will contain: http://myservice</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"rest-services\">REST Services</h1>\n<h2 id=\"controller\">Controller</h2>\n<table>\n<thead>\n<tr>\n<th>Class Annotation</th>\n<th>Use</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">@RestController</code></td>\n<td>Create REST controller, combination of <code class=\"language-text\">@ResponseBody</code> and <code class=\"language-text\">@Controller</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"handler-methods\">Handler Methods</h2>\n<p>There are method annotations for handling a path with a HTTP method:</p>\n<ul>\n<li><code class=\"language-text\">@GetMapping(\"/path\")</code></li>\n<li><code class=\"language-text\">@PostMapping(\"/path\")</code></li>\n<li><code class=\"language-text\">@PutMapping(\"/path\")</code></li>\n<li><code class=\"language-text\">@DeleteMapping(\"/path\")</code></li>\n<li>…</li>\n</ul>\n<h3 id=\"parameters-to-handler-methods\">Parameters to Handler Methods</h3>\n<p>These annotations can be added to the arguments of the handler method:</p>\n<table>\n<thead>\n<tr>\n<th>Argument Annotation</th>\n<th>Use</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">@PathVariable</code></td>\n<td>Capture a path argument</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">@PathVariable</code></td>\n<td>Capture a path argument</td>\n</tr>\n</tbody>\n</table>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hello/{name}\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">MyBean</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span>\n                    <span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">MyDto</span> body<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"return-values\">Return Values</h3>\n<p>Usually either a bean (DTO) is returned (which is usually converted to a JSON) or\na <code class=\"language-text\">ResponseEntity&lt;></code> can be used to provide some information to the client.</p>\n<h2 id=\"validation\">Validation</h2>\n<table>\n<thead>\n<tr>\n<th>Annotation</th>\n<th>Use</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">@Valid</code></td>\n<td>Argument annotation of a handler method to validate incoming data</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">@AssertTrue</code></td>\n<td>Checks if boolean field is true</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">@AssertFalse</code></td>\n<td>Checks if boolean field is false</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">@Future</code></td>\n<td>Date must be in the future</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">@Past</code></td>\n<td>Date must be in the past</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">@Max</code></td>\n<td>Number must be lower or equal to the given maximum</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">@Min</code></td>\n<td>Number must be lower or equal to the given minimum</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">@NotNull</code></td>\n<td>Element cannot be <code class=\"language-text\">null</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">@Pattern</code></td>\n<td>Element must match the given regular expression</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">@Size</code></td>\n<td>Element size must be within given boundaries</td>\n</tr>\n</tbody>\n</table>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">\n<span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hello/{name}\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">MyBean</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span>\n                    <span class=\"token annotation punctuation\">@Valid</span> <span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">MyDto</span> body<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// validate MyDto here</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyDto</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation punctuation\">@NotNull</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Date</span> date<span class=\"token punctuation\">;</span>\n\n  <span class=\"token annotation punctuation\">@Size</span><span class=\"token punctuation\">(</span>min <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"testing\">Testing</h2>\n<h3 id=\"unit-testing-the-controller\">Unit Testing the Controller</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ExtendWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringExtension</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// before Junit 5 use `@RunWith(SpringRunner.class)`</span>\n<span class=\"token annotation punctuation\">@WebMvcTest</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token class-name\">MyController</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyControllerTest</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation punctuation\">@Autowired</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">MockMvc</span> mvc<span class=\"token punctuation\">;</span>\n\n  <span class=\"token annotation punctuation\">@MockBean</span>  <span class=\"token comment\">// mocking with Mockito</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">MyService</span> service<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// write tests with `@Test`</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"integration-testing\">Integration Testing</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ExtendWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringExtension</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// before Junit 5 use `@RunWith(SpringRunner.class)`</span>\n<span class=\"token annotation punctuation\">@SpringBootTest</span><span class=\"token punctuation\">(</span>classes <span class=\"token operator\">=</span> <span class=\"token class-name\">MyApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n                webEnvironment <span class=\"token operator\">=</span> <span class=\"token class-name\">SpringBootTest<span class=\"token punctuation\">.</span>WebEnvironment</span><span class=\"token punctuation\">.</span>RANDOM_PORT<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyControllerIT</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token annotation punctuation\">@Autowired</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">TestRestTemplate</span> template<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// We are testing also the service layer. So it is not mocked here.</span>\n  <span class=\"token comment\">// Data access could be mocked with @MockBean</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"spring-security\">Spring Security</h1>\n<p>The Spring Security Filter Chain checks authentication and authorization for every request.</p>\n<p>Most important filters:</p>\n<ul>\n<li><code class=\"language-text\">UsernamePasswordAuthenticationFilter</code>: executed for request with authentication form form submission (<code class=\"language-text\">POST</code>). Responds to the URL <code class=\"language-text\">/login</code> per default.</li>\n<li><code class=\"language-text\">BasicAuthenticationFilter</code>: for requests with basic authentication header.</li>\n<li><code class=\"language-text\">AnonymousAuthenticationFilter</code>: if no authentication credentials are provided.</li>\n<li><code class=\"language-text\">ExceptionTranslationFilter</code>: translates authentication exceptions to HTTP responses.</li>\n<li><code class=\"language-text\">FilterSecurityInterceptor</code>: implements security handling via filter implementations.</li>\n<li><code class=\"language-text\">HeaderWriterFilter</code>: add security related headers to responses (<code class=\"language-text\">X-Frame-Options</code>, <code class=\"language-text\">X-XSS-Protection</code>, <code class=\"language-text\">X-Content-Type-Options</code>, …)</li>\n<li><code class=\"language-text\">CsrfFilter</code>: enforces Cross-Site Request Forgery (CSRF) protection.</li>\n</ul>\n<p>The filters usually call a <code class=\"language-text\">Authentication Manager</code> (default implementation: <code class=\"language-text\">ProviderManager</code>) which itself calls multiple <code class=\"language-text\">AuthenticationProvider</code>s.\nEach authentication provider authenticates the user with a different backend technology:</p>\n<ul>\n<li><code class=\"language-text\">DaoAuthenticationProvider</code>: uses <code class=\"language-text\">UserDetailsService</code> to authenticate the user.\n<ul>\n<li>Spring Security provides <em>in-memory</em> and <em>JDBC</em> implementations of <code class=\"language-text\">UserDetailsService</code></li>\n</ul>\n</li>\n<li>LDAP support is implemented using the <code class=\"language-text\">LdapAuthenticator</code></li>\n</ul>\n<h2 id=\"authorization\">Authorization</h2>\n<p><code class=\"language-text\">AccessDecisionManager</code> uses multiple <code class=\"language-text\">AccessDecisionVoter</code> implementations to make access decisions.</p>\n<p>Each voter returns one of these results:</p>\n<ul>\n<li><code class=\"language-text\">ACCESS_GRANTED</code></li>\n<li><code class=\"language-text\">ACCESS_ABSTAIN</code></li>\n<li><code class=\"language-text\">ACCESS_DENIED</code></li>\n</ul>\n<p>Default implementations of <code class=\"language-text\">AccessDecisionManager</code>:</p>\n<ul>\n<li><code class=\"language-text\">AffirmativeBased</code>: grants access if any <code class=\"language-text\">AccessDecisionManager</code> returns a positive response</li>\n<li><code class=\"language-text\">ConsensusBased</code>: grants access if the majority of <code class=\"language-text\">AccessDecisionManager</code>s returns a positive response</li>\n<li><code class=\"language-text\">UnanimousBased</code>: grants access if all <code class=\"language-text\">AccessDecisionManager</code>s returns a positive response</li>\n</ul>\n<p>Some implementations of <code class=\"language-text\">AccessDecisionVoter</code>:</p>\n<ul>\n<li><code class=\"language-text\">RoleVoter</code>: returns a vote based on the role of the user</li>\n<li><code class=\"language-text\">AuthenticatedVoter</code>: returns a vote based authentication status of the user</li>\n<li><code class=\"language-text\">Jsr250Voter</code>: returns vote based on JSR-250 annotations</li>\n</ul>\n<h2 id=\"spring-security-annotations\">Spring Security Annotations</h2>\n<p>Method level security:</p>\n<ul>\n<li>Add <code class=\"language-text\">@EnableGlobalMethodSecurity</code> on a Spring configuration class.</li>\n<li>Use <code class=\"language-text\">@Secured(\"ROLE_ADMIN)</code> on a service method (it’s also possible to provide multiple roles).</li>\n</ul>\n<h3 id=\"jsr-250-annotations\">JSR-250 Annotations</h3>\n<ul>\n<li>Add <code class=\"language-text\">@EnableGlobalMethodSecurity(jsr250Enabled = true)</code> on a Spring configuration class.</li>\n<li>Use <code class=\"language-text\">@RolesAllowed(\"ROLE_ADMIN)</code> on a service method (it’s also possible to provide multiple roles).</li>\n</ul>\n<h3 id=\"pre-and-post-annotation\">Pre and Post Annotation</h3>\n<ul>\n<li>Add <code class=\"language-text\">@EnableGlobalMethodSecurity(prePostEnabled = true)</code> on a Spring configuration class.</li>\n<li>Use <code class=\"language-text\">@PreAuthorize(..)</code> or <code class=\"language-text\">@PostAuthorize(..)</code> to provide extensive checks.</li>\n</ul>","frontmatter":{"title":"Spring","tags":["OOP"],"category":"Programming"},"headings":[{"depth":1,"value":"Dependency Injection and Inversion of Control"},{"depth":2,"value":"Define Beans"},{"depth":2,"value":"Inject Beans"},{"depth":2,"value":"Scopes"},{"depth":3,"value":"Generic Scopes"},{"depth":3,"value":"Web Context Scopes"},{"depth":3,"value":"Usage"},{"depth":2,"value":"Lifecycle Hooks"},{"depth":2,"value":"Run Spring IoC container"},{"depth":3,"value":"Configuration for Application Context"},{"depth":1,"value":"Spring Boot"},{"depth":1,"value":"Custom Configuration"},{"depth":1,"value":"REST Services"},{"depth":2,"value":"Controller"},{"depth":2,"value":"Handler Methods"},{"depth":3,"value":"Parameters to Handler Methods"},{"depth":3,"value":"Return Values"},{"depth":2,"value":"Validation"},{"depth":2,"value":"Testing"},{"depth":3,"value":"Unit Testing the Controller"},{"depth":3,"value":"Integration Testing"},{"depth":1,"value":"Spring Security"},{"depth":2,"value":"Authorization"},{"depth":2,"value":"Spring Security Annotations"},{"depth":3,"value":"JSR-250 Annotations"},{"depth":3,"value":"Pre and Post Annotation"}]}},"pageContext":{"id":"efe95be8-510d-5c9f-a445-798b1cba43e7","previousPost":{"title":"SOLID Design Principles","slug":"/blog/solid"},"nextPost":{"title":"A brief History of Test Driven Development","slug":"/blog/tdd_history"},"dates":{"created":1632986411,"modified":1647509701}}},
    "staticQueryHashes": []}