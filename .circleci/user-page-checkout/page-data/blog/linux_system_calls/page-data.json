{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/blog/linux_system_calls",
    "result": {"data":{"site":{"siteMetadata":{"title":"My personal Website"}},"markdownRemark":{"id":"ac33b1a6-c886-54e4-9ebb-1c92e9dcbf12","excerpt":"A system call is the basic interface between applications and the kernel. Linux has more than 300 system calls. The syscalls are implemented by the  functionâ€¦","html":"<p>A system call is the basic interface between applications and the kernel.</p>\n<p>Linux has more than 300 <a href=\"http://man7.org/linux/man-pages/man2/syscalls.2.html\">system calls</a>.</p>\n<p>The syscalls are implemented by the <a href=\"http://man7.org/linux/man-pages/man2/syscall.2.html\"><code class=\"language-text\">syscall</code> function</a>.</p>\n<h1 id=\"intel-x86-64\">Intel x86-64</h1>\n<p>System calls use the default <a href=\"/blog/intel_calling_conventions\">calling convention</a> (System V AMD64 ABI).</p>\n<p>Stack based arguments are not used. This limits the number\nof arguments to 6.</p>\n<p>Each system call has an unique call code. The call code are provided\nin the <code class=\"language-text\">rax</code> register.</p>\n<p>Call codes and arguments can be found <a href=\"https://filippo.io/linux-syscall-table/\">here</a>.</p>\n<h2 id=\"registers\">Registers</h2>\n<p>The registers are only used when needed.</p>\n<p>The call code is necessary.</p>\n<table>\n<thead>\n<tr>\n<th>Register</th>\n<th>Usage</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">rax</code></td>\n<td>Call code, return value after call</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">rdi</code></td>\n<td>1st argument</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">rsi</code></td>\n<td>2nd argument</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">rdx</code></td>\n<td>3rd argument</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">rcx</code></td>\n<td>4th argument</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">r8</code></td>\n<td>5th argument</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">r9</code></td>\n<td>6th argument</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"syscall-instruction\"><code class=\"language-text\">SYSCALL</code> Instruction</h2>\n<p>After the call code and the arguments are placed in the registers\nthe <code class=\"language-text\">syscall</code> instruction is executed. Then the current process\nwill pause and control is passed to the kernel. When the system call\nreturns the process will be resumed.</p>","frontmatter":{"title":"Linux System Calls","tags":["Assembler","Computer Science","OS","Linux"],"category":"Programming"},"headings":[{"depth":1,"value":"Intel x86-64"},{"depth":2,"value":"Registers"},{"depth":2,"value":"<code class=\"language-text\">SYSCALL</code> Instruction"}]}},"pageContext":{"id":"ac33b1a6-c886-54e4-9ebb-1c92e9dcbf12","previousPost":{"title":"x86 Calling Conventions","slug":"/blog/intel_calling_conventions"},"nextPost":{"title":"Linking and Loading","slug":"/blog/linking_and_loading"},"dates":{"created":1510001138,"modified":1647509701}}},
    "staticQueryHashes": []}