{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/blog/closure",
    "result": {"data":{"site":{"siteMetadata":{"title":"My personal Website"}},"markdownRemark":{"id":"d469ef63-5b2f-5148-8565-00f8bac72c8e","excerpt":"There are 2 concepts that are called closure Lambdas Closures are (anonymous) functions with free variables that capture the context of the calling function…","html":"<p>There are 2 concepts that are called <em>closure</em></p>\n<h1 id=\"lambdas\">Lambdas</h1>\n<p>Closures are (anonymous) functions with free variables that capture the context of the calling function (stack).</p>\n<p><a href=\"https://en.m.wikipedia.org/wiki/Closure_(computer_programming)\">Wikipedia:Closure</a></p>\n<h1 id=\"the-closure-property\">The Closure Property</h1>\n<p>From <a href=\"https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-15.html#%25_sec_2.2\">SICP: 2.2 Hierarchical Data and the Closure Property</a>:</p>\n<p><em>“The ability to create pairs whose elements are pairs is the essence of list structure’s importance as a representational tool. We refer to this ability as <strong>the closure property</strong> of <code class=\"language-text\">cons</code>. In general, an operation for combining data objects satisfies the closure property if the results of combining things with that operation can themselves be combined using the same operation.”</em></p>\n<p><em>“The use of the word ‘closure’ here comes from abstract algebra, where a set of elements is said to be closed under an operation if applying the operation to elements in the set produces an element that is again an element of the set. The Lisp community also (unfortunately) uses the word “closure” to describe a totally unrelated concept: A closure is an implementation technique for representing procedures with free variables.”</em></p>\n<h2 id=\"cons-cells\">Cons Cells</h2>\n<p>Related to the closure property is the ability to create compound data (e.g pairs) only with functions:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> a b<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token lambda-parameter\">p</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">p</span> a b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">car</span> p<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">p</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token lambda-parameter\">a b</span><span class=\"token punctuation\">)</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">cdr</span> p<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">p</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token lambda-parameter\">a b</span><span class=\"token punctuation\">)</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><a href=\"https://en.m.wikipedia.org/wiki/Cons#Functional_Implementation\">Wikipedia:Cons</a></p>","frontmatter":{"title":"Closure","tags":["Lisp"],"category":"Programming"},"headings":[{"depth":1,"value":"Lambdas"},{"depth":1,"value":"The Closure Property"},{"depth":2,"value":"Cons Cells"}]}},"pageContext":{"id":"d469ef63-5b2f-5148-8565-00f8bac72c8e","previousPost":{"title":"OS X Keymap","slug":"/blog/osx_keyboard_layout"},"nextPost":{"title":"Scheme","slug":"/blog/scheme_frequently_used_functions"},"dates":{"created":1476383626,"modified":1647509701}}},
    "staticQueryHashes": []}