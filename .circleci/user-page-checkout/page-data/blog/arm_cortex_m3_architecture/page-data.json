{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/blog/arm_cortex_m3_architecture",
    "result": {"data":{"site":{"siteMetadata":{"title":"My personal Website"}},"markdownRemark":{"id":"f52a2e24-510a-5294-bbc1-ccfee2303c0a","excerpt":"This page collects my notes about the Cortex-M3 architecture.\nIn particular I use the EFM32TG840F32 processor on a STK3300 starter kit by\nSilicon Labs. Most…","html":"<p>This page collects my notes about the Cortex-M3 architecture.\nIn particular I use the <em>EFM32TG840F32</em> processor on a STK3300 starter kit by\n<a href=\"https://www.silabs.com/\">Silicon Labs</a>.</p>\n<p>Most information on this page is taken from the\n<a href=\"http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.subset.cortexm.m3/index.html\">documentation by ARM</a>.</p>\n<p>[TOC]</p>\n<h1 id=\"general\">General</h1>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CPU Design</td>\n<td><a href=\"https://en.m.wikipedia.org/wiki/Reduced_instruction_set_computer\">RISC</a></td>\n</tr>\n<tr>\n<td>Endianness</td>\n<td><a href=\"https://en.m.wikipedia.org/wiki/Bi-endian#Bi-endian_hardware\">bi-endian (little as default)</a></td>\n</tr>\n<tr>\n<td>Type</td>\n<td><a href=\"https://en.m.wikipedia.org/wiki/Load/store_architecture\">Load/Store</a></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"efm32tg-overview\">EFM32TG Overview</h1>\n<table>\n<thead>\n<tr>\n<th>Feature</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CPU</td>\n<td>32 MHz ARM Cortex-M3 (r2p1)</td>\n</tr>\n<tr>\n<td>Flash</td>\n<td>32 kB</td>\n</tr>\n<tr>\n<td>RAM</td>\n<td>4 kB</td>\n</tr>\n<tr>\n<td>SPI</td>\n<td>1</td>\n</tr>\n<tr>\n<td>I2C</td>\n<td>1</td>\n</tr>\n<tr>\n<td>USART</td>\n<td>2</td>\n</tr>\n<tr>\n<td>I2S</td>\n<td>1</td>\n</tr>\n<tr>\n<td>Dig. Pins</td>\n<td>56</td>\n</tr>\n<tr>\n<td>ADC</td>\n<td>12-bit, 8 ch, 1 Msps</td>\n</tr>\n<tr>\n<td>DAC</td>\n<td>12-bit, 2 ch</td>\n</tr>\n<tr>\n<td>IRQs</td>\n<td>23</td>\n</tr>\n<tr>\n<td>LCD</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>MPU</td>\n<td>No</td>\n</tr>\n<tr>\n<td>ETM</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Package</td>\n<td>QFN64 9x9 mm</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"registers\">Registers</h1>\n<p>All registers are 32-bit wide.</p>\n<table>\n<thead>\n<tr>\n<th>Register</th>\n<th>Use</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>R0 - R12</td>\n<td>General Purpose Registers</td>\n</tr>\n<tr>\n<td>R13</td>\n<td>Stack Pointers (SP_main, SP_process)</td>\n</tr>\n<tr>\n<td>R14</td>\n<td>Link Register (LR)</td>\n</tr>\n<tr>\n<td>R15</td>\n<td>Program Counter (PC)</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"general-purpose-registers\">General Purpose Registers</h2>\n<p>Some 16-bit Thumb instruction can only access R0 - R7.</p>\n<p>The reset values of R0 - R12 are random.</p>\n<h2 id=\"stack-pointers-sp-r13-msp-psp\">Stack Pointers (SP, R13, MSP, PSP)</h2>\n<p>The  Cortex-M3  contains  two  stack  pointers:</p>\n<ul>\n<li>Main Stack Pointer (SP_main): The default stack pointer, used by the operating system and exception handlers</li>\n<li>Process Stack Pointer (SP_process): Used by application code</li>\n</ul>\n<p>In thread mode CONTROL bit[1] indicates the used stack pointed:</p>\n<ul>\n<li>0: MSP</li>\n<li>1: PSP</li>\n</ul>\n<p>The two Stack Pointers are banked. Only one is visible at a time through R13.</p>\n<p>The lowest 2 bits of the stack pointers are always 0. So they are always word aligned.</p>\n<p>It’s not necessary to use both stack pointers (SP_main and SP_process). Simple applications use only SP_main.</p>\n<p>PUSH and POP work with the actual <em>SP</em> (R13). The stack is 32-bit aligned.</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">PUSH {<span class=\"token register variable\">R3</span>}  <span class=\"token comment\">; R13 = R13-4, memory[R13] = R3</span>\nPOP {<span class=\"token register variable\">R3</span>}   <span class=\"token comment\">; R3 = memory[R13], R13 = R13+4</span></code></pre></div>\n<p>It’s also possible to to push and pop multiple registers in one instruction.</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">my_function\n   PUSH {<span class=\"token register variable\">R0</span><span class=\"token operator\">-</span><span class=\"token register variable\">R3</span>, <span class=\"token register variable\">R3</span>, <span class=\"token register variable\">R7</span>} <span class=\"token comment\">; Save registers</span>\n   ...\n   POP {<span class=\"token register variable\">R0</span><span class=\"token operator\">-</span><span class=\"token register variable\">R3</span>, <span class=\"token register variable\">R3</span>, <span class=\"token register variable\">R7</span>}  <span class=\"token comment\">; Restore registers</span>\n   <span class=\"token register variable\">BX</span> <span class=\"token register variable\">R7</span>                <span class=\"token comment\">; Return to caller</span></code></pre></div>\n<p>It’s possible to use <em>SP</em> instead of <em>R13</em> for accessing the actual Stack Pointer.\nFor accessing a particular Stack Pointer the mnemonic MSP (for SP_main) or PSP (for SP_process) exist.</p>\n<h2 id=\"link-register-r14-lr\">Link Register (R14, LR)</h2>\n<p>The Link Register contains the return address of a subroutine/function.\nOn function entry (BL) the return address is automatically saved on LR.</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">main\n  <span class=\"token register variable\">BL</span> my_func <span class=\"token comment\">; call funct. with branch and link. PC=my_func, LR=next instr in main</span>\n   ...\n\nmy_func\n   ...\n   <span class=\"token register variable\">BX</span> LR <span class=\"token comment\">; return to address in LR</span></code></pre></div>\n<h2 id=\"program-counter-r15-pc\">Program Counter (R15, PC)</h2>\n<p>This register holds the current program position.</p>\n<p>It can be written to for controlling the program flow (jumps). But then <em>LR</em> is not updated.</p>\n<p>Since the Cortex-M3 has a pipelined architecture the PC can be ahead of the actual executed\ninstruction (normally by 4).</p>\n<p>On reset, the processor loads the PC with the value of the reset vector, which is at address 0x00000004.</p>\n<blockquote>\n<p>The least-significant bit of each address loaded into <em>PC</em> (with <code class=\"language-text\">BX</code>, <code class=\"language-text\">BLX</code>, <code class=\"language-text\">LDM</code>, <code class=\"language-text\">LDR</code>, or <code class=\"language-text\">POP</code>)\nmust be 1 (indicating thumb mode).</p>\n<p>Otherwise an exception will occur on the Cortex-M3.</p>\n</blockquote>\n<h2 id=\"program-status-registers\">Program Status Registers</h2>\n<p>The special-purpose program status registers (<em>xPSR</em>) provide arithmetic and logic flags (zero and carry flag),\nexecution status and current executing IRQ number.</p>\n<table>\n<thead>\n<tr>\n<th align=\"right\">Bit</th>\n<th align=\"center\">APSR</th>\n<th align=\"center\">IPSR</th>\n<th align=\"center\">EPSR</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"right\">31</td>\n<td align=\"center\">N</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"right\">30</td>\n<td align=\"center\">Z</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"right\">29</td>\n<td align=\"center\">C</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"right\">28</td>\n<td align=\"center\">V</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"right\">27</td>\n<td align=\"center\">Q</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"right\">25-26</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n<td align=\"center\">ICI/IT</td>\n</tr>\n<tr>\n<td align=\"right\">24</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n<td align=\"center\">T</td>\n</tr>\n<tr>\n<td align=\"right\">20-23</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"right\">16-19</td>\n<td align=\"center\">GE[3:0]</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"right\">9-15</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n<td align=\"center\">ICI/IT</td>\n</tr>\n<tr>\n<td align=\"right\">0-8</td>\n<td align=\"center\">-</td>\n<td align=\"center\">Exception Number</td>\n<td align=\"center\">-</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"application-program-status-register-apsr\">Application Program Status Register (APSR)</h3>\n<p>Flags that can be set by application code (unprivileged mode).</p>\n<ul>\n<li><strong>N (bit[31])</strong>: Negative condition flag. Set if result of instruction is negative.</li>\n<li><strong>Z (bit[30])</strong>: Zero condition flag. Set if result of instruction is zero (0).</li>\n<li><strong>C (bit[29])</strong>: Carry (or borrow) condition flag. Set if instruction results in a carry condition (i.e unsigned overflow on addition)</li>\n<li><strong>V (bit[28])</strong>: Overflow condition flag. Set if the instruction results in a an overflow condition (i.e. signed overflow on addition)</li>\n<li><strong>Q (bit[27])</strong>: Set if a <code class=\"language-text\">SSAT</code> or <code class=\"language-text\">USAT</code> instruction changes the input value for the signed/unsigned range of the result (saturation).</li>\n<li><strong>GE[3:0] (bits[19:16])</strong>: DSP extension only. Otherwise reserved.</li>\n</ul>\n<h3 id=\"interrupt-program-status-register-ipsr\">Interrupt Program Status Register (IPSR)</h3>\n<ul>\n<li>Handler Mode: This register holds the exception number of the exception that is currently processed.</li>\n<li>Thread Mode: If no exception is processed the value is zero (0).</li>\n</ul>\n<h3 id=\"execution-program-status-register-epsr\">Execution Program Status Register (EPSR)</h3>\n<ul>\n<li><strong>T bit[24]</strong>: Defines the instruction set. The Cortex-M3 supports only Thumb-2. So it must be 0. An fault is caused if this bit is set to 0.</li>\n<li><strong>ICI/IT</strong>: TBD</li>\n</ul>\n<h3 id=\"composite-views-of-the-xpsr-registers\">Composite views of the xPSR registers</h3>\n<p>The commands <code class=\"language-text\">MSR</code> and <code class=\"language-text\">MRS</code> can use the mnemonics APSR, IPSR, and EPSR directly or combined mnemonics for the Program Status Registers.</p>\n<table>\n<thead>\n<tr>\n<th>Mnemonic</th>\n<th>Registers</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>IAPSR</td>\n<td>IPSR and APSR</td>\n</tr>\n<tr>\n<td>EAPSR</td>\n<td>EPSR and APSR</td>\n</tr>\n<tr>\n<td>IEPSR</td>\n<td>IPSR and EPSR</td>\n</tr>\n<tr>\n<td>PSR</td>\n<td>All three xPSR registers</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"special-purpose-mask-registers\">Special-Purpose Mask Registers</h2>\n<p>This registers are set to 0 at reset.</p>\n<p>They can only be written if in privileged level.</p>\n<ul>\n<li><em>PRIMASK</em>: Disable interrupts except nonmaskable interrupt (NMI) and hard fault.</li>\n<li><em>FAULTMASK</em>: Disable interrupts except nonmaskable interrupt (NMI).</li>\n<li><em>BASEPRI</em>: Disable interrupts of given priority level or lower priority level.</li>\n</ul>\n<h2 id=\"control-register\">Control Register</h2>\n<p>Define privileged status and select stack pointer.</p>\n<h3 id=\"control-bit0-npriv-privilege-level\">Control bit[0] (nPRIV, privilege level)</h3>\n<p>This bit has only a meaning in thread mode.</p>\n<ul>\n<li>0: Privileged Level</li>\n<li>1: Unprivileged (user) Level</li>\n</ul>\n<p>In handler mode the processor operates in privileged mode.</p>\n<p>This bit is only writable with privileged level.</p>\n<h3 id=\"control-bit1-spsel-stack-selection\">Control bit[1] (SPSEL, stack selection)</h3>\n<p>This bit makes only sense in thread mode.</p>\n<ul>\n<li>0: Use SP_process</li>\n<li>1: Use SP_main</li>\n</ul>\n<p>In handler mode this bit must be 0 (SP_main is used).</p>\n<p>This bit is only writable if in thread mode with privileged level.</p>\n<h3 id=\"switching-privilege-level\">Switching Privilege Level</h3>\n<p>To switch from privileged level to user level the <em>Control bit[0]</em> can be written directly.</p>\n<p>The switch from user level to privilege level heeds to be performed within an exception handler.</p>\n<h2 id=\"reset-values-and-required-access-privileges\">Reset Values and Required Access Privileges</h2>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Read/Write</th>\n<th>Required privilege</th>\n<th>Reset value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>R0-R12</td>\n<td>RW</td>\n<td>Both</td>\n<td>Undef</td>\n</tr>\n<tr>\n<td>MSP (R13)</td>\n<td>RW</td>\n<td>Privileged</td>\n<td>value from address 0x00000000</td>\n</tr>\n<tr>\n<td>PSP (R13)</td>\n<td>RW</td>\n<td>Both</td>\n<td>Undef</td>\n</tr>\n<tr>\n<td>LR  (R14)</td>\n<td>RW</td>\n<td>Both</td>\n<td>0xFFFFFFFF</td>\n</tr>\n<tr>\n<td>PC  (R15)</td>\n<td>RW</td>\n<td>Both</td>\n<td>value of the reset vector</td>\n</tr>\n<tr>\n<td>ASPR</td>\n<td>RW</td>\n<td>Both</td>\n<td>0x00000000</td>\n</tr>\n<tr>\n<td>IPSR</td>\n<td>R</td>\n<td>Privileged</td>\n<td>0x00000000</td>\n</tr>\n<tr>\n<td>EPSR</td>\n<td>R</td>\n<td>Privileged</td>\n<td>0x01000000</td>\n</tr>\n<tr>\n<td>PRIMASK</td>\n<td>RW</td>\n<td>Privileged</td>\n<td>0x00000000</td>\n</tr>\n<tr>\n<td>FAULTMASK</td>\n<td>RW</td>\n<td>Privileged</td>\n<td>0x00000000</td>\n</tr>\n<tr>\n<td>BASEPRI</td>\n<td>RW</td>\n<td>Privileged</td>\n<td>0x00000000</td>\n</tr>\n<tr>\n<td>CONTROL</td>\n<td>RW</td>\n<td>Privileged</td>\n<td>0x00000000</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"modes\">Modes</h1>\n<p>The Cortex-M3 has two modes:</p>\n<ul>\n<li>Thread Mode</li>\n<li>Handler Mode</li>\n</ul>\n<p>In Thread Mode the processor can run in two privilege levels:</p>\n<ul>\n<li>User Level</li>\n<li>Privileged Level</li>\n</ul>\n<p>In Handler Mode only the Privileged Level is available.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Application Code</th>\n<th>Exception Handler</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Unprivileged (user) Level</td>\n<td>Thread Mode</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Privileged Level</td>\n<td>Thread Mode</td>\n<td>Handler Mode</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"/96e7c6e7f1a1456cdc2be3ca8f511f5d/arm_cortex_m3_modes_levels.svg\" alt=\"The ARM Cortex-M3 Modes and Levels\"></p>\n<h1 id=\"nested-vectored-interrupt-controller-nvic\">Nested Vectored Interrupt Controller (NVIC)</h1>\n<h2 id=\"nested\">Nested</h2>\n<p>All external and some system interrupts can be assigned to different priority levels. Current\nhandled interrupts can only be disrupted by interrupts of higher priority.</p>\n<h2 id=\"vectored\">Vectored</h2>\n<p>The addresses of the interrupt service routines (ISRs) are stored in a vector. If an interrupt\noccurs the look-up of the routine is fast and the handling of the interrupt is not delayed by look-up\ncode.</p>\n<h2 id=\"dynamic-priority-setting\">Dynamic Priority Setting</h2>\n<p>The priority of an interrupt can be changed at run time.</p>\n<h1 id=\"memory-layout\">Memory Layout</h1>\n<p>The Cortex-M3 has a defined memory map. So most built in peripherals are accessible by their\nmemory address. Thus it’s easy to access it in C/C++ code.</p>\n<table>\n<thead>\n<tr>\n<th>Address Range</th>\n<th>Use</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0x00000000 - 0x1FFFFFFF</td>\n<td>CODE</td>\n<td>Program Code. Exception vector table after start up.</td>\n</tr>\n<tr>\n<td>0x20000000 - 0x3FFFFFFF</td>\n<td>SRAM</td>\n<td>Used as static RAM.</td>\n</tr>\n<tr>\n<td>0x40000000 - 0x5FFFFFFF</td>\n<td>Peripherals</td>\n<td>For integrated peripherals.</td>\n</tr>\n<tr>\n<td>0x60000000 - 0x9FFFFFFF</td>\n<td>External RAM</td>\n<td>For external connected RAM.</td>\n</tr>\n<tr>\n<td>0xA0000000 - 0xDFFFFFFF</td>\n<td>External Peripherals</td>\n<td>For external connected peripherals.</td>\n</tr>\n<tr>\n<td>0xE0000000 - 0xFFFFFFFF</td>\n<td>System</td>\n<td>NVIC, MPU, Debug…</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"bit-banding\">Bit-Banding</h2>\n<p>Bit-Banding is a feature that allows to access certain bits individually. The access to the bits are atomically.</p>\n<p>The access to the individual bits are accomplished by mapping each bit from the bit-banding region to an address\nin a region called bit-banding alias.</p>\n<ul>\n<li>Each bit-banding region is 1 MB big.</li>\n<li>The bit-banding alias regions are 32 MB big (but it addresses in total only the 1 MB of the bit-banding region).</li>\n</ul>\n<p>There are two bit-band region. One for memory and the other for peripherals.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Bit-Band region</th>\n<th>Bit-Band alias region</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Memory</td>\n<td>0x20000000 - 0x200FFFFF</td>\n<td>0x22000000 - 0x23FFFFF</td>\n</tr>\n<tr>\n<td>Peripherals</td>\n<td>0x40000000 - 0x400FFFFF</td>\n<td>0x42000000 - 0x43FFFFF</td>\n</tr>\n</tbody>\n</table>\n<p>To access one bit through the bit-banding alias the mapping is performed by this code:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">BIT_BANDING_ALIAS_OFFSET</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>byteOffsetInBitBandRegion<span class=\"token punctuation\">,</span> bitNumber<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>byteOffsetInBitBandRegion <span class=\"token operator\">*</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>bitNumber <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">BIT_BANDING_MEMORY_ALIAS_BASE</span>    <span class=\"token expression\"><span class=\"token number\">0x22000000</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">BIT_BANDING_PERIPERAL_ALIAS_BASE</span> <span class=\"token expression\"><span class=\"token number\">0x42000000</span></span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">BIT_BANDING_MEMORY_TO_ALIAS</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>byte<span class=\"token punctuation\">,</span> bit<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">(</span>BIT_BANDING_MEMORY_ALIAS_BASE <span class=\"token operator\">+</span> <span class=\"token function\">BIT_BANDING_ALIAS_OFFSET</span><span class=\"token punctuation\">(</span>byte<span class=\"token punctuation\">,</span> bit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">BIT_BANDING_PERIPHERAL_TO_ALIAS</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>byte<span class=\"token punctuation\">,</span> bit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>BIT_BANDING_PERIPHERAL_ALIAS_BASE <span class=\"token operator\">+</span> <span class=\"token function\">BIT_BANDING_ALIAS_OFFSET</span><span class=\"token punctuation\">(</span>byte<span class=\"token punctuation\">,</span> bit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span></code></pre></div>\n<p>It’s also possible to calculate the address in the other direction from the alias region to the bit-banding region.\nBut it’s usually not nessecary to do the address translation in this direction.</p>\n<p>Here is a small example:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Set pI to point to the first 32-bit value in the memory bit-banding region</span>\n<span class=\"token keyword\">volatile</span> <span class=\"token class-name\">uint32_t</span> <span class=\"token operator\">*</span> pI <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x20000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Set the value where pI is pointing to 0</span>\n<span class=\"token operator\">*</span>pI <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Get the bit-banding alias address of bit 2 of the first byte in the bit-banding region</span>\n<span class=\"token keyword\">volatile</span> <span class=\"token class-name\">uint32_t</span> <span class=\"token operator\">*</span> pIAlias <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">BIT_BANDING_MEMORY_TO_ALIAS</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Seet this bit to one</span>\n<span class=\"token operator\">*</span>pIAlias <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// *pI == 4. The bit two ot *pI is now set</span></code></pre></div>\n<h1 id=\"bus-interfaces\">Bus Interfaces</h1>\n<p>The Cortex-M3 has multiple bus interfaces:</p>\n<ul>\n<li>Code Memory Bus: For fetching instructions from code memory.</li>\n<li>System Bus: For static RAM and peripherals.</li>\n<li>Private Peripheral Bus: For access to a part of the system memory and for debugging.</li>\n</ul>\n<h1 id=\"data-types\">Data Types</h1>\n<p>Following data types are supported in memory:</p>\n<ul>\n<li>Byte: 8 bits.</li>\n<li>Half-word: 16 bits.</li>\n<li>Word: 32 bits.</li>\n</ul>\n<p>The registers are 32 bit wide. The instruction set supports following data types in the registers:</p>\n<ul>\n<li>32-bit pointers.</li>\n<li>Unsigned and signed 32-bit integers.</li>\n<li>Unsigned 16-bit and 8-bit integers in zero-extended form.</li>\n<li>Signed 16-bit and 8-bit integers in sign-extended form.</li>\n<li>Unsigned and signed 64-bit integers held in two registers (limited direct support).</li>\n</ul>\n<p>Signed data is represented using two’s complement format.</p>\n<h1 id=\"exceptions\">Exceptions</h1>\n<table>\n<thead>\n<tr>\n<th>Exception number</th>\n<th>Exception</th>\n<th>Priority</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>Reset</td>\n<td>-3</td>\n</tr>\n<tr>\n<td>2</td>\n<td>NMI</td>\n<td>-2</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Hard Fault</td>\n<td>-1</td>\n</tr>\n<tr>\n<td>4</td>\n<td>MemManage</td>\n<td>configurable</td>\n</tr>\n<tr>\n<td>5</td>\n<td>BusFault</td>\n<td>configurable</td>\n</tr>\n<tr>\n<td>6</td>\n<td>UsageFault</td>\n<td>configurable</td>\n</tr>\n<tr>\n<td>7 - 10</td>\n<td>Reserved</td>\n<td>-</td>\n</tr>\n<tr>\n<td>11</td>\n<td>SVCall</td>\n<td>configurable</td>\n</tr>\n<tr>\n<td>12</td>\n<td>DebugMonitor</td>\n<td>configurable</td>\n</tr>\n<tr>\n<td>13</td>\n<td>Reserved</td>\n<td>-</td>\n</tr>\n<tr>\n<td>14</td>\n<td>PendSV</td>\n<td>configurable</td>\n</tr>\n<tr>\n<td>15</td>\n<td>SysTick</td>\n<td>configurable</td>\n</tr>\n<tr>\n<td>16 - 16+N</td>\n<td>External interrupt 0 .. N</td>\n<td>configurable</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"reset\">Reset</h2>\n<p>There are two levels of reset:</p>\n<ul>\n<li>Power Reset: Resets processor, System Control Space and debug logic.</li>\n<li>Local Reset: Resets processor and System Control Space (except some fault and debug resources).</li>\n</ul>\n<p>The exception can’t be disabled.\nReset exception has a fixed priority of <em>-3</em>.</p>\n<h2 id=\"non-maskable-interrupt-nmi\">Non Maskable Interrupt (NMI)</h2>\n<p>NMI is the highest priority exception after reset.</p>\n<p>NMI can be generated by hardware or software can set the NMI exception to the Pending state.</p>\n<p>It can’t be disabled.\nThe fixed priority is <em>-2</em>.</p>\n<h2 id=\"hardfault\">HardFault</h2>\n<p>HardFault is a generic exception. It usually means that the system is\nnot recoverable anymore. But in some cases it might be recoverable.</p>\n<p>HardFault can’t be disabled.\nIt has a fixed priority of <em>-1</em>.</p>\n<h2 id=\"memmanage\">MemManage</h2>\n<p>MemManage indicates a violation of memory access protected by the MPU (Memory Protection Unit).\nIt can occur for data and instruction memory transactions.</p>\n<p>This fault can be disabled by software. Then a MemManage escalates to a HardFault.</p>\n<p>The priority can be configured.</p>\n<h2 id=\"busfault\">BusFault</h2>\n<p>This are memory faults other than MemManage faults. They can occur\nfor data and instruction transactions.\nThey can occur synchronous or asynchronous and arise usually by errors\non system buses.</p>\n<p>This fault can be disabled by software. Then a BusFault escalates to a HardFault.</p>\n<p>The priority can be configured.</p>\n<h2 id=\"usagefault\">UsageFault</h2>\n<p>UsageFaults can have different causes:</p>\n<ul>\n<li>Undefined instruction.</li>\n<li>Invalid state when executing instruction.</li>\n<li>Error on exception return.</li>\n<li>Attempt to access co-processor when it’s unavailable (or disabled).</li>\n</ul>\n<p>The reporting of the following UsageFaults can be activated:</p>\n<ul>\n<li>Word/half-word access on unaligned memory address.</li>\n<li>Division by zero.</li>\n</ul>\n<p>This fault can be disabled by software. Then a UsageFault escalates to a HardFault.</p>\n<p>The priority can be configured.</p>\n<h2 id=\"debugmonitor\">DebugMonitor</h2>\n<p>The DebugMonitor is a fault and it’s a synchronous exception.\nIt occurs when halting debug is disabled and the DebugMonitor is enabled.</p>\n<p>The priority is configurable.</p>\n<blockquote>\n<p>A debug watch-point is asynchronous and behaves as an interrupt.</p>\n</blockquote>\n<h2 id=\"svcall\">SVCall</h2>\n<p>This exception is used as supervisor calls it’s caused by the instruction SVC.</p>\n<p>It’s permanently activated. The priority is configurable.</p>\n<h2 id=\"interrupts\">Interrupts</h2>\n<p>The Cortex-M3 has two levels of system interrupts and up to 496 external interrupts (the EFM32TG has 23).</p>\n<h3 id=\"system-level-interrupts\">System-Level Interrupts</h3>\n<h4 id=\"pendsv\">PendSV</h4>\n<p>Used for system calls (Supervisor call) generated by software. An application uses a Supervisor call if it uses resources from the OS.</p>\n<p>The Supervisor call caused by PendSV executes when the processor takes the PendSV interrupt.</p>\n<blockquote>\n<p>For a synchronous Supervisor call (with application code), software uses the SVC instruction. This generates an SVCall exception.</p>\n</blockquote>\n<p>PendSV is permanently enabled, and is controlled using the ICSR.PENDSVSET and ICSR.PENDSVCLR bits.</p>\n<h4 id=\"systick\">SysTick</h4>\n<p>Generated by the SysTick Timer (integral part of Cortex-M3).</p>\n<p>SysTick is permanently enabled, and is controlled using the ICSR.PENDSTSET and ICSR.PENDSTCLR bits.</p>\n<blockquote>\n<p>Software can suppress hardware generation of the SysTick event.</p>\n</blockquote>\n<h1 id=\"the-vector-table\">The Vector Table</h1>\n<p>The Vector Table contains the reset value of <em>SP_main</em> and the addresses of each exception handler function.</p>\n<table>\n<thead>\n<tr>\n<th>Offset in Table (32-bit words)</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>Reset value of SP_main</td>\n</tr>\n<tr>\n<td>Exception Number</td>\n<td>Address of exception handler</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>The least-significant bit of each exception handler address (vector) must be 1, indicating that the exception handler is in Thumb code.</p>\n</blockquote>\n<p>The position of the <em>Vector Table</em> is defined by the <em>Vector Table Offset Register (VTOR)</em>.</p>\n<h1 id=\"reset-sequence\">Reset Sequence</h1>\n<p>At start up the <em>Vector Table</em> is located at memory position 0 (flash).\nIt can later be relocated to an other memory position by software.</p>\n<p>After reset the processor does:</p>\n<ol>\n<li>Set main Stack Pointer\n<ul>\n<li>Load 32-bit value from address 0x00000000</li>\n<li>Save that value to <em>SP_main</em></li>\n</ul>\n</li>\n<li>Run start up code\n<ul>\n<li>Read the next entry in the <em>Vector Table</em> (0x00000004, reset vector)</li>\n<li>Jump to that address and start running code there</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>Since the Cortex-M4 has a full descending stack the initial stack address</p>\n</blockquote>\n<p>has to be 0x04 bigger the the beginning of the stack.</p>\n<h1 id=\"assembler\">Assembler</h1>\n<p>Most assembler examples use the <a href=\"https://sourceware.org/binutils/docs-2.25/as/index.html\">GCC Assembler (gas)</a>.</p>\n<h2 id=\"addressing-modes\">Addressing Modes</h2>\n<p><code class=\"language-text\">addr</code>: Absolute addressing mode (memory address of operator is given directly).</p>\n<p><code class=\"language-text\">%Rn</code>: Register direct (the value given in the register is used as operator).</p>\n<p><code class=\"language-text\">[%Rn]</code>: Register indirect or indexed (the value given in the register is used as address to the operator).</p>\n<p><code class=\"language-text\">[%Rn,#n]</code>: Register based with offset (the address of the operand is calculated by the content of the register plus a constant).</p>\n<p><code class=\"language-text\">#imm</code>: Immediate data (the operator is given directly as a constant).</p>\n<p><em>Rn</em> can be any of the numbered registers.</p>\n<h2 id=\"suffixes\">Suffixes</h2>\n<p>Some instructions can have suffixes.</p>\n<h3 id=\"write-flags-suffix\">Write Flags Suffix</h3>\n<p>The Suffix <code class=\"language-text\">S</code> indicates that the instruction updates the flags (in <em>APSR</em>) according to the result.</p>\n<p>For example <code class=\"language-text\">ADDS R0, R0, R1;</code> updates the flags.</p>\n<h3 id=\"conditional-suffixes\">Conditional Suffixes</h3>\n<p>This suffixes can be used for branching instructions but also for conditional execution commands.</p>\n<table>\n<thead>\n<tr>\n<th>Suffix</th>\n<th>Meaning</th>\n<th>Tested Flags</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">EQ</code></td>\n<td>Equal</td>\n<td><code class=\"language-text\">Z=1</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">NE</code></td>\n<td>Not equal</td>\n<td><code class=\"language-text\">Z=0</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">CS</code>or <code class=\"language-text\">HS</code></td>\n<td>Unsigned higher or same (carry set)</td>\n<td><code class=\"language-text\">C=1</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">CC</code>or <code class=\"language-text\">LO</code></td>\n<td>Unsigned lower (or carry clear)</td>\n<td><code class=\"language-text\">C=0</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">MI</code></td>\n<td>Negative (minus)</td>\n<td><code class=\"language-text\">N=1</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">PL</code></td>\n<td>Positive or zero (plus)</td>\n<td><code class=\"language-text\">N=0</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">VS</code></td>\n<td>Signed overflow (V set)</td>\n<td><code class=\"language-text\">V=1</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">VC</code></td>\n<td>No signed overflow (V clear)</td>\n<td><code class=\"language-text\">V=0</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">HI</code></td>\n<td>Unsigned higher</td>\n<td><code class=\"language-text\">(C=1) AND (Z=0)</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">LS</code></td>\n<td>Unsigned lower or same</td>\n<td><code class=\"language-text\">(C=0) OR (Z=1)</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GE</code></td>\n<td>Signed greater than or equal</td>\n<td><code class=\"language-text\">N=V</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">LT</code></td>\n<td>Signed less than</td>\n<td><code class=\"language-text\">N NOT V</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">GT</code></td>\n<td>Signed greater than</td>\n<td><code class=\"language-text\">(Z=0) AND (N=V)</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">LE</code></td>\n<td>Signed less than or equal</td>\n<td><code class=\"language-text\">(Z=1) OR (N NOT V)</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">AL</code> (or omitted)</td>\n<td>Always executed</td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n<p>In the instruction examples <code class=\"language-text\">&lt;c></code> is used to indicate that one of the conditional\nsuffixes can be used.</p>\n<h2 id=\"instruction-width-qualifier\">Instruction Width Qualifier</h2>\n<p>This assembler qualifier is used to select a 16-bit\nor 32-bit instruction encoding.</p>\n<p><code class=\"language-text\">.N</code>: Narrow: Assembler must select a 16-bit instruction.</p>\n<p><code class=\"language-text\">.W</code>: Wide: Assembler must select a 32-bit instruction.</p>\n<p>If the instruction is not available in the requested encoding the\nassembler produces an error.</p>\n<p>If no qualifier is given the assembler selects the 16-bit encoding if it\nis available.</p>\n<p>In the instruction examples <code class=\"language-text\">&lt;q></code> is used to indicate that <code class=\"language-text\">.N</code> or <code class=\"language-text\">.W</code> can be used.</p>\n<h2 id=\"data-transfer-commands\">Data Transfer Commands</h2>\n<h3 id=\"move-data-between-registers-mov-mvn\">Move Data between Registers (<code class=\"language-text\">MOV</code>, <code class=\"language-text\">MVN</code>)</h3>\n<p>Moves a value (or it’s negated value) from one register to an other.</p>\n<p>Moving immediate value directly into a register is also possible.</p>\n<p>There are also command for moving shifted data. In this case\nthe <code class=\"language-text\">MOV</code> commands are aliases for the shifting commands.</p>\n<h4 id=\"immediate\">Immediate</h4>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">MOVS <span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>,#<span class=\"token operator\">&lt;</span>imm8<span class=\"token operator\">></span>     <span class=\"token operator\">/</span><span class=\"token operator\">*</span> Outside IT block <span class=\"token operator\">*</span><span class=\"token operator\">/</span>\nMOV<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>,#<span class=\"token operator\">&lt;</span>imm8<span class=\"token operator\">></span>   <span class=\"token operator\">/</span><span class=\"token operator\">*</span> Inside IT block <span class=\"token operator\">*</span><span class=\"token operator\">/</span>\nMOV{S}<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span>.W <span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>,#<span class=\"token operator\">&lt;</span>const<span class=\"token operator\">></span>\nMOVW<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>,#<span class=\"token operator\">&lt;</span>imm16<span class=\"token operator\">></span></code></pre></div>\n<h4 id=\"register\">Register</h4>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">MOV<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>,<span class=\"token operator\">&lt;</span>Rm<span class=\"token operator\">></span>\nMOVS <span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>,<span class=\"token operator\">&lt;</span>Rm<span class=\"token operator\">></span>\nMOV{S}<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span>.W <span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>,<span class=\"token operator\">&lt;</span>Rm<span class=\"token operator\">></span></code></pre></div>\n<p>Examples:</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">MOV <span class=\"token register variable\">R3</span>, <span class=\"token register variable\">R2</span><span class=\"token comment\">; /* Move the value from R2 to R3 */</span>\nMVN <span class=\"token register variable\">R5</span>, <span class=\"token register variable\">R6</span><span class=\"token comment\">; /* Move the negated value of R6 to R5 */</span></code></pre></div>\n<h4 id=\"move-to-top-half-word-of-register-movt\">Move to top half-word of Register (<code class=\"language-text\">MOVT</code>)</h4>\n<p>Moves an immediate value to the top half of the given register. The\nbottom half of the register is not written.</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">MOVT<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>q<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>, #<span class=\"token operator\">&lt;</span>imm16<span class=\"token operator\">></span></code></pre></div>\n<h4 id=\"move-special-register-to-register-mrs\">Move Special Register to Register (<code class=\"language-text\">MRS</code>)</h4>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">MRS<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>,<span class=\"token operator\">&lt;</span>spec_reg<span class=\"token operator\">></span></code></pre></div>\n<p><code class=\"language-text\">MRS</code> is a system level instruction except when accessing the <em>APSR</em> or <em>CONTROL</em> register.</p>\n<h4 id=\"move-register-to-special-register-msr\">Move Register to Special Register (<code class=\"language-text\">MSR</code>)</h4>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">MSR<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>spec_reg<span class=\"token operator\">></span>,<span class=\"token operator\">&lt;</span>Rn<span class=\"token operator\">></span></code></pre></div>\n<p><code class=\"language-text\">MRS</code> is a system level instruction except when accessing the <em>APSR</em> or <em>CONTROL</em> register.</p>\n<h3 id=\"move-data-between-register-and-memory\">Move Data between Register and Memory</h3>\n<p>The basic commands for moving data to and from memory are store and load.\nThey exist with different operand sizes (byte, half word, word and double word).</p>\n<p>With some commands a register operand can be updated after the operation with <code class=\"language-text\">!</code>. If it’s\navailable it is optional.</p>\n<p>There are commands for storing or loading multiple registers at once.</p>\n<h2 id=\"arithmetic-commands\">Arithmetic Commands</h2>\n<h3 id=\"addition-add\">Addition (<code class=\"language-text\">ADD</code>)</h3>\n<p>Adds two values.</p>\n<h4 id=\"immediate-1\">Immediate</h4>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">ADDS <span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>,<span class=\"token operator\">&lt;</span>Rn<span class=\"token operator\">></span>,#<span class=\"token operator\">&lt;</span>imm3<span class=\"token operator\">></span>         <span class=\"token operator\">/</span><span class=\"token operator\">*</span> Outside IT block <span class=\"token operator\">*</span><span class=\"token operator\">/</span>\nADD<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>,<span class=\"token operator\">&lt;</span>Rn<span class=\"token operator\">></span>,#<span class=\"token operator\">&lt;</span>imm3<span class=\"token operator\">></span>       <span class=\"token operator\">/</span><span class=\"token operator\">*</span> Inside IT block <span class=\"token operator\">*</span><span class=\"token operator\">/</span>\nADDS <span class=\"token operator\">&lt;</span>Rdn<span class=\"token operator\">></span>,#<span class=\"token operator\">&lt;</span>imm8<span class=\"token operator\">></span>             <span class=\"token operator\">/</span><span class=\"token operator\">*</span> Outside IT block <span class=\"token operator\">*</span><span class=\"token operator\">/</span>\nADD<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>Rdn<span class=\"token operator\">></span>,#<span class=\"token operator\">&lt;</span>imm8<span class=\"token operator\">></span>           <span class=\"token operator\">/</span><span class=\"token operator\">*</span> Inside IT block <span class=\"token operator\">*</span><span class=\"token operator\">/</span>\nADD{S}<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span>.W <span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>,<span class=\"token operator\">&lt;</span>Rn<span class=\"token operator\">></span>,#<span class=\"token operator\">&lt;</span>const<span class=\"token operator\">></span>\nADDW<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>,<span class=\"token operator\">&lt;</span>Rn<span class=\"token operator\">></span>,#<span class=\"token operator\">&lt;</span>imm12<span class=\"token operator\">></span>\nADD{S}<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>q<span class=\"token operator\">></span> {<span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>,} <span class=\"token operator\">&lt;</span>Rn<span class=\"token operator\">></span>,  #<span class=\"token operator\">&lt;</span>const<span class=\"token operator\">></span>\nADDW<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>q<span class=\"token operator\">></span> {<span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>,} <span class=\"token operator\">&lt;</span>Rn<span class=\"token operator\">></span>,  #<span class=\"token operator\">&lt;</span>const<span class=\"token operator\">></span></code></pre></div>\n<h4 id=\"register-1\">Register</h4>\n<p>The second register operand can be shifted.</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">ADDS <span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>,<span class=\"token operator\">&lt;</span>Rn<span class=\"token operator\">></span>,<span class=\"token operator\">&lt;</span>Rm<span class=\"token operator\">></span>     <span class=\"token operator\">/</span><span class=\"token operator\">*</span> Outside IT block <span class=\"token operator\">*</span><span class=\"token operator\">/</span>\nADD<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>,<span class=\"token operator\">&lt;</span>Rn<span class=\"token operator\">></span>,<span class=\"token operator\">&lt;</span>Rm<span class=\"token operator\">></span>   <span class=\"token operator\">/</span><span class=\"token operator\">*</span> Inside IT block <span class=\"token operator\">*</span><span class=\"token operator\">/</span>\nADD<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>Rdn<span class=\"token operator\">></span>,<span class=\"token operator\">&lt;</span>Rm<span class=\"token operator\">></span>\nADD{S}<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span>.W <span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>,<span class=\"token operator\">&lt;</span>Rn<span class=\"token operator\">></span>,<span class=\"token operator\">&lt;</span>Rm<span class=\"token operator\">></span>{,<span class=\"token operator\">&lt;</span>shift<span class=\"token operator\">></span>}\nADD{S}<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>q<span class=\"token operator\">></span> {<span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>,}  <span class=\"token operator\">&lt;</span>Rn<span class=\"token operator\">></span>, <span class=\"token operator\">&lt;</span>Rm<span class=\"token operator\">></span> {,<span class=\"token operator\">&lt;</span>shift<span class=\"token operator\">></span>}</code></pre></div>\n<h4 id=\"sp-plus-immediate\"><em>SP</em> plus Immediate</h4>\n<p>Adds an immediate value to the <em>SP</em>, writes the result to the destination register.</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">ADD<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>,<span class=\"token register variable\">SP</span>,#<span class=\"token operator\">&lt;</span>imm8<span class=\"token operator\">></span>\nADD<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span> <span class=\"token register variable\">SP</span>,<span class=\"token register variable\">SP</span>,#<span class=\"token operator\">&lt;</span>imm7<span class=\"token operator\">></span>\nADD{S}<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span>.W <span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>,<span class=\"token register variable\">SP</span>,#<span class=\"token operator\">&lt;</span>const<span class=\"token operator\">></span>\nADDW<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>,<span class=\"token register variable\">SP</span>,#<span class=\"token operator\">&lt;</span>imm12<span class=\"token operator\">></span>\nADD{S}<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>q<span class=\"token operator\">></span> {<span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>,} <span class=\"token register variable\">SP</span>, #<span class=\"token operator\">&lt;</span>const<span class=\"token operator\">></span>\nADDW<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>q<span class=\"token operator\">></span> {<span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>,} <span class=\"token register variable\">SP</span>, #<span class=\"token operator\">&lt;</span>const<span class=\"token operator\">></span></code></pre></div>\n<h4 id=\"sp-plus-register\"><em>SP</em> plus Register</h4>\n<p>Adds an (optionally-shifted) register value to the <em>SP</em>,\nwrites the result to the destination register.</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">ADD<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>Rdm<span class=\"token operator\">></span>, <span class=\"token register variable\">SP</span>, <span class=\"token operator\">&lt;</span>Rdm<span class=\"token operator\">></span>\nADD<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span> <span class=\"token register variable\">SP</span>,<span class=\"token operator\">&lt;</span>Rm<span class=\"token operator\">></span>\nADD{S}<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span>.W <span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>,<span class=\"token register variable\">SP</span>,<span class=\"token operator\">&lt;</span>Rm<span class=\"token operator\">></span>{,<span class=\"token operator\">&lt;</span>shift<span class=\"token operator\">></span>}\nADD{S}<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>q<span class=\"token operator\">></span> {<span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>,} <span class=\"token register variable\">SP</span>, <span class=\"token operator\">&lt;</span>Rm<span class=\"token operator\">></span>{, <span class=\"token operator\">&lt;</span>shift<span class=\"token operator\">></span>}</code></pre></div>\n<h3 id=\"addition-with-carry-adc\">Addition with Carry (<code class=\"language-text\">ADC</code>)</h3>\n<p>Adds values with carry.</p>\n<h4 id=\"immediate-2\">Immediate</h4>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">ADC{S}<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span>  <span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>,<span class=\"token operator\">&lt;</span>Rn<span class=\"token operator\">></span>,#<span class=\"token operator\">&lt;</span>const<span class=\"token operator\">></span></code></pre></div>\n<h4 id=\"register-2\">Register</h4>\n<p>The register operand can be shifted.</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">ADCS <span class=\"token operator\">&lt;</span>Rdn<span class=\"token operator\">></span>,<span class=\"token operator\">&lt;</span>Rm<span class=\"token operator\">></span>     <span class=\"token operator\">/</span><span class=\"token operator\">*</span> Outside IT block <span class=\"token operator\">*</span><span class=\"token operator\">/</span>\nADC<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>Rdn<span class=\"token operator\">></span>,<span class=\"token operator\">&lt;</span>Rm<span class=\"token operator\">></span>   <span class=\"token operator\">/</span><span class=\"token operator\">*</span> Inside IT block <span class=\"token operator\">*</span><span class=\"token operator\">/</span>\nADC{S}<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span>.W <span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>,<span class=\"token operator\">&lt;</span>Rn<span class=\"token operator\">></span>,<span class=\"token operator\">&lt;</span>Rm<span class=\"token operator\">></span>{,<span class=\"token operator\">&lt;</span>shift<span class=\"token operator\">></span>}\nADC{S}<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>q<span class=\"token operator\">></span> {<span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>,}  <span class=\"token operator\">&lt;</span>Rn<span class=\"token operator\">></span>, <span class=\"token operator\">&lt;</span>Rm<span class=\"token operator\">></span> {,<span class=\"token operator\">&lt;</span>shift<span class=\"token operator\">></span>}</code></pre></div>\n<h3 id=\"multiply-mul\">Multiply (<code class=\"language-text\">MUL</code>)</h3>\n<p>Multiplies two registers. The least significant 32-bits\nare copied to the destination register.</p>\n<p>Can update flags.</p>\n<blockquote>\n<p>Writing flags can reduce performance!</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">MULS <span class=\"token operator\">&lt;</span>Rdm<span class=\"token operator\">></span>,<span class=\"token operator\">&lt;</span>Rn<span class=\"token operator\">></span>,<span class=\"token operator\">&lt;</span>Rdm<span class=\"token operator\">></span>    <span class=\"token operator\">/</span><span class=\"token operator\">*</span> Outside IT block <span class=\"token operator\">*</span><span class=\"token operator\">/</span>\nMUL<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>Rdm<span class=\"token operator\">></span>,<span class=\"token operator\">&lt;</span>Rn<span class=\"token operator\">></span>,<span class=\"token operator\">&lt;</span>Rdm<span class=\"token operator\">></span>  <span class=\"token operator\">/</span><span class=\"token operator\">*</span> Inside IT block <span class=\"token operator\">*</span><span class=\"token operator\">/</span>\nMUL<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>,<span class=\"token operator\">&lt;</span>Rn<span class=\"token operator\">></span>,<span class=\"token operator\">&lt;</span>Rm<span class=\"token operator\">></span>\nMUL{S}<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>q<span class=\"token operator\">></span> {<span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>,} <span class=\"token operator\">&lt;</span>Rn<span class=\"token operator\">></span>,  <span class=\"token operator\">&lt;</span>Rm<span class=\"token operator\">></span></code></pre></div>\n<h2 id=\"logical-commands\">Logical Commands</h2>\n<h3 id=\"and-and\">And (<code class=\"language-text\">AND</code>)</h3>\n<h4 id=\"immediate-3\">Immediate</h4>\n<p>Bit-wise <em>AND</em> of register and immediate value.</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">AND{S}<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span>  <span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>,<span class=\"token operator\">&lt;</span>Rn<span class=\"token operator\">></span>,#<span class=\"token operator\">&lt;</span>const<span class=\"token operator\">></span>\nAND{S}<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>q<span class=\"token operator\">></span> {<span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>,} <span class=\"token operator\">&lt;</span>Rn<span class=\"token operator\">></span>,  #<span class=\"token operator\">&lt;</span>const<span class=\"token operator\">></span></code></pre></div>\n<h4 id=\"register-3\">Register</h4>\n<p>Bit-wise <em>AND</em> of a register and a second (optionally-shifted) register.\nThe flags can be updated based on the result.</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">ANDS<span class=\"token operator\">&lt;</span>Rdn<span class=\"token operator\">></span>,<span class=\"token operator\">&lt;</span>Rm<span class=\"token operator\">></span>                       <span class=\"token operator\">/</span><span class=\"token operator\">*</span> Outside IT block <span class=\"token operator\">*</span><span class=\"token operator\">/</span>\nAND<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>Rdn<span class=\"token operator\">></span>,<span class=\"token operator\">&lt;</span>Rm<span class=\"token operator\">></span>                    <span class=\"token operator\">/</span><span class=\"token operator\">*</span> Inside IT block <span class=\"token operator\">*</span><span class=\"token operator\">/</span>\nAND{S}<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span>.W <span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>,<span class=\"token operator\">&lt;</span>Rn<span class=\"token operator\">></span>,<span class=\"token operator\">&lt;</span>Rm<span class=\"token operator\">></span>{,<span class=\"token operator\">&lt;</span>shift<span class=\"token operator\">></span>}\nAND{S}<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>q<span class=\"token operator\">></span> {<span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>,} <span class=\"token operator\">&lt;</span>Rn<span class=\"token operator\">></span>, <span class=\"token operator\">&lt;</span>Rm<span class=\"token operator\">></span> {,<span class=\"token operator\">&lt;</span>shift<span class=\"token operator\">></span>}</code></pre></div>\n<h2 id=\"bit-commands\">Bit Commands</h2>\n<h3 id=\"bit-field-clear-bfc\">Bit Field Clear (<code class=\"language-text\">BFC</code>)</h3>\n<p>Clear a number of adjacent bits in a register.</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">BFC<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>q<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>, #<span class=\"token operator\">&lt;</span>lsb<span class=\"token operator\">></span>, #<span class=\"token operator\">&lt;</span>width<span class=\"token operator\">></span></code></pre></div>\n<p>Where:</p>\n<p><code class=\"language-text\">&lt;lsb></code>: The least significant bit that is cleared (Range: 0-31).</p>\n<p><code class=\"language-text\">&lt;width></code>: Number of bits to clear.</p>\n<h3 id=\"bit-field-insert-bfi\">Bit Field Insert (<code class=\"language-text\">BFI</code>)</h3>\n<p>Insert given number of the lowest bits from source register to\na given position in the destination register.</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">BFI<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>q<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>, <span class=\"token operator\">&lt;</span>Rn<span class=\"token operator\">></span>, #<span class=\"token operator\">&lt;</span>lsb<span class=\"token operator\">></span>, #<span class=\"token operator\">&lt;</span>width<span class=\"token operator\">></span></code></pre></div>\n<p><code class=\"language-text\">&lt;lsb></code>: The least significant bit in destination where bits are copied to (Range: 0-31).</p>\n<p><code class=\"language-text\">&lt;width></code>: Number of bits to copy from source.</p>\n<h3 id=\"bit-clear-bic\">Bit Clear (<code class=\"language-text\">BIC</code>)</h3>\n<h4 id=\"immediate-4\">Immediate</h4>\n<p>Performs a bit-wise <em>AND</em> of register and the complement of the immediate\nvalue.</p>\n<p>The flags can be updated.</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">BIC{S}<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span>  <span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>,<span class=\"token operator\">&lt;</span>Rn<span class=\"token operator\">></span>,#<span class=\"token operator\">&lt;</span>const<span class=\"token operator\">></span>\nBIC{S}<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>q<span class=\"token operator\">></span> {<span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>,} <span class=\"token operator\">&lt;</span>Rn<span class=\"token operator\">></span>,  #<span class=\"token operator\">&lt;</span>const<span class=\"token operator\">></span></code></pre></div>\n<h4 id=\"register-4\">Register</h4>\n<p>Performs a bit-wise <em>AND</em> one register and the complement of a second register.\nThe second register can be shifted.</p>\n<p>The flags can be updated.</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">BICS<span class=\"token operator\">&lt;</span>Rdn<span class=\"token operator\">></span>,<span class=\"token operator\">&lt;</span>Rm<span class=\"token operator\">></span>    <span class=\"token operator\">/</span><span class=\"token operator\">*</span> Outside IT block <span class=\"token operator\">*</span><span class=\"token operator\">/</span>\nBIC<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>Rdn<span class=\"token operator\">></span>,<span class=\"token operator\">&lt;</span>Rm<span class=\"token operator\">></span> <span class=\"token operator\">/</span><span class=\"token operator\">*</span> Inside IT block <span class=\"token operator\">*</span><span class=\"token operator\">/</span>\nBIC{S}<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span>.W <span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>,<span class=\"token operator\">&lt;</span>Rn<span class=\"token operator\">></span>,<span class=\"token operator\">&lt;</span>Rm<span class=\"token operator\">></span>{,<span class=\"token operator\">&lt;</span>shift<span class=\"token operator\">></span>}\nBIC{S}<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>q<span class=\"token operator\">></span> {<span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>,}  <span class=\"token operator\">&lt;</span>Rn<span class=\"token operator\">></span>, <span class=\"token operator\">&lt;</span>Rm<span class=\"token operator\">></span> {,<span class=\"token operator\">&lt;</span>shift<span class=\"token operator\">></span>}</code></pre></div>\n<h3 id=\"count-leading-zeros-clz\">Count Leading Zeros (<code class=\"language-text\">CLZ</code>)</h3>\n<p>Returns the number of leading zero bits of a register.</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">CLZ<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>q<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>, <span class=\"token operator\">&lt;</span>Rm<span class=\"token operator\">></span></code></pre></div>\n<h2 id=\"shift-and-rotate-commands\">Shift and Rotate Commands</h2>\n<h3 id=\"arithmetic-shift-right-asr\">Arithmetic Shift Right (<code class=\"language-text\">ASR</code>)</h3>\n<h4 id=\"immediate-5\">Immediate</h4>\n<p>Shifts a register right by an immediate value. Shifts in copies\nof it’s <em>sign bit</em>.</p>\n<p>Can update flags.</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">ASRS <span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>,<span class=\"token operator\">&lt;</span>Rm<span class=\"token operator\">></span>,#<span class=\"token operator\">&lt;</span>imm5<span class=\"token operator\">></span>    <span class=\"token operator\">/</span><span class=\"token operator\">*</span> Outside IT block <span class=\"token operator\">*</span><span class=\"token operator\">/</span>\nASR<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>,<span class=\"token operator\">&lt;</span>Rm<span class=\"token operator\">></span>,#<span class=\"token operator\">&lt;</span>imm5<span class=\"token operator\">></span>  <span class=\"token operator\">/</span><span class=\"token operator\">*</span>Inside IT block <span class=\"token operator\">*</span><span class=\"token operator\">/</span>\nASR{S}<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span>.W <span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>,<span class=\"token operator\">&lt;</span>Rm<span class=\"token operator\">></span>,#<span class=\"token operator\">&lt;</span>imm5<span class=\"token operator\">></span>\nASR{S}<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>q<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>, <span class=\"token operator\">&lt;</span>Rm<span class=\"token operator\">></span>,  #<span class=\"token operator\">&lt;</span>imm5<span class=\"token operator\">></span></code></pre></div>\n<h4 id=\"register-5\">Register</h4>\n<p>Shifts a register by a variable number of bits, shifting in copies\nof it’s sing flag. The number of bits\nto shift is read from the <em>bottom byte</em> of a register.</p>\n<p>Flags can be set.</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">ASRS<span class=\"token operator\">&lt;</span>Rdn<span class=\"token operator\">></span>,<span class=\"token operator\">&lt;</span>Rm<span class=\"token operator\">></span>             <span class=\"token operator\">/</span><span class=\"token operator\">*</span> Outside IT block <span class=\"token operator\">*</span><span class=\"token operator\">/</span>\nASR<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>Rdn<span class=\"token operator\">></span>,<span class=\"token operator\">&lt;</span>Rm<span class=\"token operator\">></span>          <span class=\"token operator\">/</span><span class=\"token operator\">*</span> Inside IT block <span class=\"token operator\">*</span><span class=\"token operator\">/</span>\nASR{S}<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span>.W <span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>,<span class=\"token operator\">&lt;</span>Rn<span class=\"token operator\">></span>,<span class=\"token operator\">&lt;</span>Rm<span class=\"token operator\">></span>\nASR{S}<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>q<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>, <span class=\"token operator\">&lt;</span>Rn<span class=\"token operator\">></span>, <span class=\"token operator\">&lt;</span>Rm<span class=\"token operator\">></span></code></pre></div>\n<h2 id=\"compare-commands\">Compare Commands</h2>\n<h3 id=\"compare-cmp\">Compare (<code class=\"language-text\">CMP</code>)</h3>\n<h4 id=\"immediate-6\">Immediate</h4>\n<p>Compare values by subtracting an immediate value from a register.</p>\n<p>Updates the flags but discards result.</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">CMP<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>Rn<span class=\"token operator\">></span>,#<span class=\"token operator\">&lt;</span>imm8<span class=\"token operator\">></span>\nCMP<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span>.W <span class=\"token operator\">&lt;</span>Rn<span class=\"token operator\">></span>,#<span class=\"token operator\">&lt;</span>const<span class=\"token operator\">></span>\nCMP<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>q<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>Rn<span class=\"token operator\">></span>, #<span class=\"token operator\">&lt;</span>const<span class=\"token operator\">></span></code></pre></div>\n<h4 id=\"register-6\">Register</h4>\n<p>Compare values by subtracting an (optionally shifted) register\nfrom an other register.</p>\n<p>Updates the flags but discards result.</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">CMP<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>Rn<span class=\"token operator\">></span>,<span class=\"token operator\">&lt;</span>Rm<span class=\"token operator\">></span>    <span class=\"token operator\">/</span><span class=\"token operator\">*</span> <span class=\"token operator\">&lt;</span>Rn<span class=\"token operator\">></span> and <span class=\"token operator\">&lt;</span>Rm<span class=\"token operator\">></span> both from <span class=\"token register variable\">R0</span><span class=\"token operator\">-</span><span class=\"token register variable\">R7</span> <span class=\"token operator\">*</span><span class=\"token operator\">/</span>\nCMP<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span>.W <span class=\"token operator\">&lt;</span>Rn<span class=\"token operator\">></span>, <span class=\"token operator\">&lt;</span>Rm<span class=\"token operator\">></span> {,<span class=\"token operator\">&lt;</span>shift<span class=\"token operator\">></span>}\nCMP<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>q<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>Rn<span class=\"token operator\">></span>, <span class=\"token operator\">&lt;</span>Rm<span class=\"token operator\">></span> {,<span class=\"token operator\">&lt;</span>shift<span class=\"token operator\">></span>}</code></pre></div>\n<h3 id=\"compare-negative-cmn\">Compare Negative (<code class=\"language-text\">CMN</code>)</h3>\n<h4 id=\"immediate-7\">Immediate</h4>\n<p>Compare values by <strong>adding</strong> a register and an immediate value.</p>\n<p>Updates the flags but discards result.</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">CMN<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>Rn<span class=\"token operator\">></span>,#<span class=\"token operator\">&lt;</span>const<span class=\"token operator\">></span>\nCMN<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>q<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>Rn<span class=\"token operator\">></span>, #<span class=\"token operator\">&lt;</span>const<span class=\"token operator\">></span></code></pre></div>\n<h4 id=\"register-7\">Register</h4>\n<p>Compare values by <strong>adding</strong> to registers. The second register\ncan be shifted.</p>\n<p>Updates the flags but discards result.</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">CMN<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>Rn<span class=\"token operator\">></span>, <span class=\"token operator\">&lt;</span>Rm<span class=\"token operator\">></span>\nCMN<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span>.W <span class=\"token operator\">&lt;</span>Rn<span class=\"token operator\">></span>, <span class=\"token operator\">&lt;</span>Rm<span class=\"token operator\">></span>{, <span class=\"token operator\">&lt;</span>shift<span class=\"token operator\">></span>}\nCMN<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>q<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>Rn<span class=\"token operator\">></span>, <span class=\"token operator\">&lt;</span>Rm<span class=\"token operator\">></span> {,<span class=\"token operator\">&lt;</span>shift<span class=\"token operator\">></span>}</code></pre></div>\n<h2 id=\"branch-commands\">Branch Commands</h2>\n<ul>\n<li><code class=\"language-text\">B</code>: Branch (immediate)</li>\n<li><code class=\"language-text\">BL</code>: Branch with link (immediate)</li>\n<li><code class=\"language-text\">BX</code>: Branch indirect (register)</li>\n<li><code class=\"language-text\">BLX</code>: Branch indirect with link (register)</li>\n</ul>\n<p>All these branch to a label, or to an address given by the operand.</p>\n<p>In addition:</p>\n<ul>\n<li>The <code class=\"language-text\">BL</code> and <code class=\"language-text\">BLX</code> instructions write the address of the next instruction to <em>LR</em>.</li>\n<li>The <code class=\"language-text\">BX</code> and <code class=\"language-text\">BLX</code> instructions can change the instruction set (ARM ↔ Thumb).</li>\n</ul>\n<blockquote>\n<p>The <code class=\"language-text\">BX</code> and <code class=\"language-text\">BLX</code> instructions result in a <em>UsageFault</em> exception on the M3 if bit[0] of the target address is 0.</p>\n</blockquote>\n<p><code class=\"language-text\">B</code> is the only conditional instruction that can be inside or outside an <em>IT</em> block.\nAll other branch instructions can only be conditional inside an <em>IT</em> block, and are always unconditional otherwise.</p>\n<h3 id=\"branch-b\">Branch (<code class=\"language-text\">B</code>)</h3>\n<p>Branch to a target addressed.</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">B<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>label<span class=\"token operator\">></span>\nB<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span>.W <span class=\"token operator\">&lt;</span>label<span class=\"token operator\">></span>\nB<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>q<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>label<span class=\"token operator\">></span></code></pre></div>\n<h3 id=\"branch-with-link-bl\">Branch with Link (<code class=\"language-text\">BL</code>)</h3>\n<p>Calls a function at PC-relative address.</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\"><span class=\"token register variable\">BL</span><span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>q<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>label<span class=\"token operator\">></span></code></pre></div>\n<p><code class=\"language-text\">&lt;label></code>: The label to jump to. The assembler calculates the offset\nof the <code class=\"language-text\">BL</code> instruction and the label.</p>\n<h3 id=\"branch-and-exchange-bx\">Branch and Exchange (<code class=\"language-text\">BX</code>)</h3>\n<p>Calls a function at an address and instruction set (ARM/Thumb) specified in a register.</p>\n<p>It’s the same as <code class=\"language-text\">BXL</code> but it <strong>doesn’t save</strong> the next instruction in <em>LR</em>.</p>\n<blockquote>\n<p>Be aware that the Cortex-M3 only supports Thumb! (see <code class=\"language-text\">BLX</code>)</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\"><span class=\"token register variable\">BX</span><span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>Rm<span class=\"token operator\">></span>   <span class=\"token operator\">/</span><span class=\"token operator\">*</span> Outside or last in IT block <span class=\"token operator\">*</span><span class=\"token operator\">/</span>\n<span class=\"token register variable\">BX</span><span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>q<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>Rm<span class=\"token operator\">></span></code></pre></div>\n<p>Exceptions: UsageFault</p>\n<h3 id=\"branch-with-link-and-exchange-blx\">Branch with Link and Exchange (<code class=\"language-text\">BLX</code>)</h3>\n<p>Calls a function at an address and instruction set (ARM/Thumb) specified in a register.</p>\n<p>It saves the next instruction (after <code class=\"language-text\">BLX</code>) in <em>LR</em>.</p>\n<blockquote>\n<p>Be aware that the Cortex-M3 only supports Thumb! An attempt to change to ARM Mode will\ncause an <em>UsageFault</em> exception.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">BLX<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>Rm<span class=\"token operator\">></span>          <span class=\"token operator\">/</span><span class=\"token operator\">*</span> Outside or last in IT block <span class=\"token operator\">*</span><span class=\"token operator\">/</span>\nBLX<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>q<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>Rm<span class=\"token operator\">></span></code></pre></div>\n<p>Exceptions: UsageFault</p>\n<h2 id=\"compare-and-branch-commands\">Compare and Branch Commands</h2>\n<h3 id=\"compare-and-branch-on-non-zero-and-compare-and-branch-on-zero-cbnzcbz\">Compare and Branch on Non-Zero and Compare and Branch on Zero (<code class=\"language-text\">CBNZ</code>,<code class=\"language-text\">CBZ</code>)</h3>\n<p>Compares the value in register with zero, and conditionally branches <em>forward</em> a constant value.\nThe condition flags are not affected.</p>\n<blockquote>\n<p>these instructions are not allowed inside an <em>IT</em> block.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">CB{N}Z <span class=\"token operator\">&lt;</span>Rn<span class=\"token operator\">></span>,<span class=\"token operator\">&lt;</span>label<span class=\"token operator\">></span>    <span class=\"token operator\">/</span><span class=\"token operator\">*</span> Not permitted in IT block <span class=\"token operator\">*</span><span class=\"token operator\">/</span>\nCB{N}Z<span class=\"token operator\">&lt;</span>q<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>Rn<span class=\"token operator\">></span>, <span class=\"token operator\">&lt;</span>label<span class=\"token operator\">></span></code></pre></div>\n<p><code class=\"language-text\">&lt;Rn></code>: Register must be in range <em>R0</em> - <em>R7</em>.</p>\n<p><code class=\"language-text\">&lt;label></code>: The assembler calculates the offset from the <code class=\"language-text\">CB{N}Z</code> instruction to the label.\nPermitted offsets are even numbers in the range 0 to 126.</p>\n<h2 id=\"other-commands\">Other Commands</h2>\n<h3 id=\"calculate-address-adr\">Calculate Address (<code class=\"language-text\">ADR</code>)</h3>\n<p>Calculate <em>PC</em> relative address.</p>\n<p>Add immediate value to <em>PC</em> and store result in register.</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">ADR<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>,<span class=\"token operator\">&lt;</span>label<span class=\"token operator\">></span>\nADR<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span>.W <span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>,<span class=\"token operator\">&lt;</span>label<span class=\"token operator\">></span> <span class=\"token operator\">/</span><span class=\"token operator\">*</span> <span class=\"token operator\">&lt;</span>label<span class=\"token operator\">></span> before current instruction <span class=\"token operator\">*</span><span class=\"token operator\">/</span>\nSUB <span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>,PC,#<span class=\"token number\">0</span>.       <span class=\"token operator\">/</span><span class=\"token operator\">*</span> Special case for zero offset <span class=\"token operator\">*</span><span class=\"token operator\">/</span>\nADR<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>q<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>, <span class=\"token operator\">&lt;</span>label<span class=\"token operator\">></span>\nADD<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>q<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>, PC,  #<span class=\"token operator\">&lt;</span>const<span class=\"token operator\">></span>\nSUB<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>q<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>Rd<span class=\"token operator\">></span>, PC,  #<span class=\"token operator\">&lt;</span>const<span class=\"token operator\">></span> <span class=\"token operator\">/</span><span class=\"token operator\">*</span> Special case <span class=\"token operator\">*</span><span class=\"token operator\">/</span></code></pre></div>\n<h3 id=\"break-point-bkpt\">Break-point (<code class=\"language-text\">BKPT</code>)</h3>\n<p>Causes a <em>DebugMonitor</em> exception or a debug halt.</p>\n<p>It is a unconditional instruction and can be executed inside or\noutside an <em>TI</em> block.</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">BKPT<span class=\"token operator\">&lt;</span>q<span class=\"token operator\">></span>#<span class=\"token operator\">&lt;</span>imm8<span class=\"token operator\">></span></code></pre></div>\n<p><code class=\"language-text\">&lt;imm8></code> is a 8-bit value that is ignored by the hardware\nbut can be used to store some information by a debugger.</p>\n<p>Exceptions: <em>DebugMonitor</em></p>\n<h3 id=\"debug-hint-dbg\">Debug Hint (<code class=\"language-text\">DBG</code>)</h3>\n<p>Provides a hint to debug and trace systems.\nThe debug architecture defines the use (if any).</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">DBG<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>q<span class=\"token operator\">></span>#<span class=\"token operator\">&lt;</span>option<span class=\"token operator\">></span>\n<span class=\"token operator\">/</span><span class=\"token operator\">/</span> Any decoding of <span class=\"token string\">'option'</span> is specified by the debug system</code></pre></div>\n<h3 id=\"no-operation-nop\">No Operation (<code class=\"language-text\">NOP</code>)</h3>\n<p>The NOP does nothing.</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">NOP<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span>\nNOP<span class=\"token operator\">&lt;</span>c<span class=\"token operator\">></span>.W</code></pre></div>","frontmatter":{"title":"ARM Cortex-M3 Architecture","tags":["Computer Science","Assembler","Embedded Systems"],"category":"Programming"},"headings":[{"depth":1,"value":"General"},{"depth":1,"value":"EFM32TG Overview"},{"depth":1,"value":"Registers"},{"depth":2,"value":"General Purpose Registers"},{"depth":2,"value":"Stack Pointers (SP, R13, MSP, PSP)"},{"depth":2,"value":"Link Register (R14, LR)"},{"depth":2,"value":"Program Counter (R15, PC)"},{"depth":2,"value":"Program Status Registers"},{"depth":3,"value":"Application Program Status Register (APSR)"},{"depth":3,"value":"Interrupt Program Status Register (IPSR)"},{"depth":3,"value":"Execution Program Status Register (EPSR)"},{"depth":3,"value":"Composite views of the xPSR registers"},{"depth":2,"value":"Special-Purpose Mask Registers"},{"depth":2,"value":"Control Register"},{"depth":3,"value":"Control bit[0] (nPRIV, privilege level)"},{"depth":3,"value":"Control bit[1] (SPSEL, stack selection)"},{"depth":3,"value":"Switching Privilege Level"},{"depth":2,"value":"Reset Values and Required Access Privileges"},{"depth":1,"value":"Modes"},{"depth":1,"value":"Nested Vectored Interrupt Controller (NVIC)"},{"depth":2,"value":"Nested"},{"depth":2,"value":"Vectored"},{"depth":2,"value":"Dynamic Priority Setting"},{"depth":1,"value":"Memory Layout"},{"depth":2,"value":"Bit-Banding"},{"depth":1,"value":"Bus Interfaces"},{"depth":1,"value":"Data Types"},{"depth":1,"value":"Exceptions"},{"depth":2,"value":"Reset"},{"depth":2,"value":"Non Maskable Interrupt (NMI)"},{"depth":2,"value":"HardFault"},{"depth":2,"value":"MemManage"},{"depth":2,"value":"BusFault"},{"depth":2,"value":"UsageFault"},{"depth":2,"value":"DebugMonitor"},{"depth":2,"value":"SVCall"},{"depth":2,"value":"Interrupts"},{"depth":3,"value":"System-Level Interrupts"},{"depth":4,"value":"PendSV"},{"depth":4,"value":"SysTick"},{"depth":1,"value":"The Vector Table"},{"depth":1,"value":"Reset Sequence"},{"depth":1,"value":"Assembler"},{"depth":2,"value":"Addressing Modes"},{"depth":2,"value":"Suffixes"},{"depth":3,"value":"Write Flags Suffix"},{"depth":3,"value":"Conditional Suffixes"},{"depth":2,"value":"Instruction Width Qualifier"},{"depth":2,"value":"Data Transfer Commands"},{"depth":3,"value":"Move Data between Registers (<code class=\"language-text\">MOV</code>, <code class=\"language-text\">MVN</code>)"},{"depth":4,"value":"Immediate"},{"depth":4,"value":"Register"},{"depth":4,"value":"Move to top half-word of Register (<code class=\"language-text\">MOVT</code>)"},{"depth":4,"value":"Move Special Register to Register (<code class=\"language-text\">MRS</code>)"},{"depth":4,"value":"Move Register to Special Register (<code class=\"language-text\">MSR</code>)"},{"depth":3,"value":"Move Data between Register and Memory"},{"depth":2,"value":"Arithmetic Commands"},{"depth":3,"value":"Addition (<code class=\"language-text\">ADD</code>)"},{"depth":4,"value":"Immediate"},{"depth":4,"value":"Register"},{"depth":4,"value":"SP plus Immediate"},{"depth":4,"value":"SP plus Register"},{"depth":3,"value":"Addition with Carry (<code class=\"language-text\">ADC</code>)"},{"depth":4,"value":"Immediate"},{"depth":4,"value":"Register"},{"depth":3,"value":"Multiply (<code class=\"language-text\">MUL</code>)"},{"depth":2,"value":"Logical Commands"},{"depth":3,"value":"And (<code class=\"language-text\">AND</code>)"},{"depth":4,"value":"Immediate"},{"depth":4,"value":"Register"},{"depth":2,"value":"Bit Commands"},{"depth":3,"value":"Bit Field Clear (<code class=\"language-text\">BFC</code>)"},{"depth":3,"value":"Bit Field Insert (<code class=\"language-text\">BFI</code>)"},{"depth":3,"value":"Bit Clear (<code class=\"language-text\">BIC</code>)"},{"depth":4,"value":"Immediate"},{"depth":4,"value":"Register"},{"depth":3,"value":"Count Leading Zeros (<code class=\"language-text\">CLZ</code>)"},{"depth":2,"value":"Shift and Rotate Commands"},{"depth":3,"value":"Arithmetic Shift Right (<code class=\"language-text\">ASR</code>)"},{"depth":4,"value":"Immediate"},{"depth":4,"value":"Register"},{"depth":2,"value":"Compare Commands"},{"depth":3,"value":"Compare (<code class=\"language-text\">CMP</code>)"},{"depth":4,"value":"Immediate"},{"depth":4,"value":"Register"},{"depth":3,"value":"Compare Negative (<code class=\"language-text\">CMN</code>)"},{"depth":4,"value":"Immediate"},{"depth":4,"value":"Register"},{"depth":2,"value":"Branch Commands"},{"depth":3,"value":"Branch (<code class=\"language-text\">B</code>)"},{"depth":3,"value":"Branch with Link (<code class=\"language-text\">BL</code>)"},{"depth":3,"value":"Branch and Exchange (<code class=\"language-text\">BX</code>)"},{"depth":3,"value":"Branch with Link and Exchange (<code class=\"language-text\">BLX</code>)"},{"depth":2,"value":"Compare and Branch Commands"},{"depth":3,"value":"Compare and Branch on Non-Zero and Compare and Branch on Zero (<code class=\"language-text\">CBNZ</code>,<code class=\"language-text\">CBZ</code>)"},{"depth":2,"value":"Other Commands"},{"depth":3,"value":"Calculate Address (<code class=\"language-text\">ADR</code>)"},{"depth":3,"value":"Break-point (<code class=\"language-text\">BKPT</code>)"},{"depth":3,"value":"Debug Hint (<code class=\"language-text\">DBG</code>)"},{"depth":3,"value":"No Operation (<code class=\"language-text\">NOP</code>)"}]}},"pageContext":{"id":"f52a2e24-510a-5294-bbc1-ccfee2303c0a","previousPost":{"title":"Intel Architecture","slug":"/blog/intel_architecture"},"nextPost":{"title":"Arrays in C and C++","slug":"/blog/arrays_c_cpp"},"dates":{"created":1435923840,"modified":1647509701}}},
    "staticQueryHashes": []}