{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/blog/parsers_and_lexers",
    "result": {"data":{"site":{"siteMetadata":{"title":"My personal Website"}},"markdownRemark":{"id":"e0394c78-edbb-5c58-a214-1a8fc16da3c1","excerpt":"Most material on this page is from Udacity: Programming Languages  Lexical Analysis (Lexing): String -> Token List Syntatical Analysis (Parsing): Token List…","html":"<blockquote>\n<p>Most material on this page is from <a href=\"https://de.udacity.com/course/programming-languages--cs262/\">Udacity: Programming Languages</a></p>\n</blockquote>\n<p><code class=\"language-text\">Source --[Lexer (break up in words)]--> Tokens --[Parser (understand the structure)]--> AST --[Find meaning]-> ...</code></p>\n<ul>\n<li>Lexical Analysis (Lexing): String -> Token List</li>\n<li>Syntatical Analysis (Parsing): Token List -> Valid in Grammar?</li>\n</ul>\n<h1 id=\"grammars\">Grammars</h1>\n<ul>\n<li>Terminals</li>\n<li>Non-terminals</li>\n<li>Rewrite rule / derivations</li>\n</ul>\n<p>Recursion (recursive rewrite rules) in a context-free grammar can allow an <em>infinite</em> number of valid sentences in the language.</p>\n<h1 id=\"grammars-and-regular-expressions\">Grammars and Regular Expressions</h1>\n<ul>\n<li>Grammars are more powerful than Regular Expressions</li>\n<li><em>Regular Expressions</em> describe <em>Regular Languages</em></li>\n<li><em>Grammars</em> describe <em>Context Free Languages</em></li>\n</ul>\n<p><em>“A language <strong>L</strong> is a <strong>context-free language</strong> if there exists a context-free grammar <strong>G</strong> such that the set of strings accepted by <strong>G</strong> is exactly <strong>L</strong>. Context-free languages are strictly more powerful than regular languages. (i.e., context-free grammars are strictly more powerful than regular expressions.)”</em></p>\n<h1 id=\"programming-languages-analogy\">Programming Languages Analogy</h1>\n<ul>\n<li>Expressions := Noun Prases</li>\n<li>Operators := Verbs</li>\n<li>Statements := Setences</li>\n</ul>\n<h1 id=\"formal-grammar-concepts\">Formal Grammar Concepts</h1>\n<p>If a language ‘L’ is <em>regular</em>, then that language ‘L’ is also <em>context free</em>.</p>\n<p>Language: a set of strings</p>\n<ul>\n<li>Regular language: represented by FSM or Regexp</li>\n<li>Context-free language: represented by context-free Grammar</li>\n</ul>\n<h1 id=\"using-rewrite-rules\">Using Rewrite Rules</h1>\n<ul>\n<li>Closure</li>\n<li>Shift</li>\n<li>Reduce</li>\n</ul>\n<p>Function calls:</p>\n<ol>\n<li>Create a new environment. It’s <em>parent</em> is the current environment.</li>\n<li>Create storage places in the new environment for each <em>formal parameter</em>.</li>\n<li>Fill these placeswith the values of the <em>actual arguments</em></li>\n<li>Evaluate the <em>function body</em> in the new environment.</li>\n</ol>\n<h1 id=\"comparison-of-ll--and-lr-parsers\">Comparison of LL- and LR-Parsers</h1>\n<p>This overview is assembled mostly from\n<a href=\"http://blog.reverberate.org/2013/07/ll-and-lr-parsing-demystified.html\">LL and LR Parsing Demystified</a></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>LL Parser</th>\n<th>LR Parser</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>traversal</td>\n<td>pre-order  (visit the parent node before the children)</td>\n<td>post-order (visit the parent node after the children)</td>\n</tr>\n<tr>\n<td>derivations</td>\n<td>leftmost derivation</td>\n<td>reversed rightmost derivation</td>\n</tr>\n<tr>\n<td>direction</td>\n<td>top-down</td>\n<td>bottom-up</td>\n</tr>\n<tr>\n<td>alternative description</td>\n<td>predictive parser</td>\n<td>shift-reduce parser</td>\n</tr>\n</tbody>\n</table>","frontmatter":{"title":"Parsers and Lexers","tags":["Parsing","Computer Science"],"category":"Programming"},"headings":[{"depth":1,"value":"Grammars"},{"depth":1,"value":"Grammars and Regular Expressions"},{"depth":1,"value":"Programming Languages Analogy"},{"depth":1,"value":"Formal Grammar Concepts"},{"depth":1,"value":"Using Rewrite Rules"},{"depth":1,"value":"Comparison of LL- and LR-Parsers"}]}},"pageContext":{"id":"e0394c78-edbb-5c58-a214-1a8fc16da3c1","previousPost":{"title":"Modern C++ Design","slug":"/blog/modern_cpp_design"},"nextPost":{"title":"Complexity","slug":"/blog/complexity"},"dates":{"created":1483908949,"modified":1647509701}}},
    "staticQueryHashes": []}