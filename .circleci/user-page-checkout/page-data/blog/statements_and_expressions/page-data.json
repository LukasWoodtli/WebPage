{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/blog/statements_and_expressions",
    "result": {"data":{"site":{"siteMetadata":{"title":"My personal Website"}},"markdownRemark":{"id":"c83932f9-5d61-5f18-a6d4-0dbb152cf92a","excerpt":"“The purpose of an expression is to be evaluated to produce another expression; a statement, on the other hand, is evaluated to make some change to the state of…","html":"<p>“The purpose of an expression is to be evaluated to produce another expression; a statement, on the other hand, is evaluated to make some change to the state of the abstract machine.” [Tom Stuart, Understanding Computation]</p>\n<p>Statements often contain expressions but not the other way around.</p>\n<p><span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><munder><munder><mrow><mi>x</mi><mo>=</mo><mover><mover><mrow><mn>1</mn><mo>+</mo><mn>2</mn></mrow><mo stretchy=\"true\">⏞</mo></mover><mtext>expression</mtext></mover></mrow><mo stretchy=\"true\">⏟</mo></munder><mtext>statement</mtext></munder></mrow><annotation encoding=\"application/x-tex\">\\underbrace{x = \\overbrace{1 + 2}^{\\text{expression}}}_{\\text{statement}}</annotation></semantics></math></span></span></p>\n<h1 id=\"expressions-ausdruck\">Expressions (Ausdruck)</h1>\n<ul>\n<li>is <em>evaluated</em> according to semantics in a context</li>\n<li>‘returns’ a value</li>\n<li>can have side-effects (in most languages)</li>\n<li>some languages have expressions as only construct (functional, declarative)</li>\n<li>some languages have declarations for defining context of expression (among other things)</li>\n<li>can be nested with each other</li>\n</ul>\n<h1 id=\"statement-anweisung\">Statement (Anweisung)</h1>\n<ul>\n<li>\n<p>mostly just in imperative languages</p>\n</li>\n<li>\n<p>is <em>executed</em>, action to be carried out</p>\n<ul>\n<li>in most languages no result/value (no eval)</li>\n<li>only side-effects (change of state)</li>\n</ul>\n</li>\n<li>\n<p>in assembly languages statements are often called instruction/command</p>\n</li>\n<li>\n<p>most languages have fixed set of statements (can not be changed/extended)</p>\n</li>\n<li>\n<p>statements are often language keywords</p>\n<ul>\n<li>can’t be redefined</li>\n</ul>\n</li>\n<li>\n<p>some statements can be expressions</p>\n<ul>\n<li>assignment</li>\n<li>increment</li>\n<li>function calls</li>\n<li>…</li>\n</ul>\n</li>\n<li>\n<p>Examples:</p>\n<ul>\n<li>\n<p>Assignments</p>\n</li>\n<li>\n<p>Control statements</p>\n<ul>\n<li>jumps</li>\n<li>loops</li>\n<li>conditionals (if, else, switch, …)</li>\n<li>…</li>\n</ul>\n</li>\n<li>\n<p>procedure calls</p>\n</li>\n<li>\n<p>assertion</p>\n</li>\n<li>\n<p>declarations</p>\n</li>\n<li>\n<p>class/type definitions</p>\n</li>\n</ul>\n</li>\n<li>\n<p>statements often begin with a identifier/keyword</p>\n</li>\n<li>\n<p>the syntax of statements can be described with</p>\n<ul>\n<li><code class=\"language-text\">BNF &lt;https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_Form></code>_</li>\n<li><code class=\"language-text\">Syntax diagram &lt;https://en.wikipedia.org/wiki/Syntax_diagram></code>_</li>\n</ul>\n</li>\n<li>\n<p>statements differ from subroutine calls by handling of parameters</p>\n<ul>\n<li>\n<p>subroutine parameters are evaluated once</p>\n</li>\n<li>\n<p>statement parameters can be evaluated multiple times (e.g. condition in while loop)</p>\n<ul>\n<li>call-by-name (lazy evaluation)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>can’t be nested with each others or with expressions</p>\n</li>\n</ul>\n<h1 id=\"declaration\">Declaration</h1>\n<ul>\n<li>\n<p>set properties</p>\n<ul>\n<li>identifier (word/name)</li>\n<li>dimension</li>\n<li>scope</li>\n<li>…</li>\n</ul>\n</li>\n<li>\n<p>of</p>\n<ul>\n<li>variables</li>\n<li>constants</li>\n<li>functions</li>\n<li>classes</li>\n<li>enums</li>\n<li>type-defs</li>\n<li>…</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"Statements and Expressions","tags":["Computer Science"],"category":"Programming"},"headings":[{"depth":1,"value":"Expressions (Ausdruck)"},{"depth":1,"value":"Statement (Anweisung)"},{"depth":1,"value":"Declaration"}]}},"pageContext":{"id":"c83932f9-5d61-5f18-a6d4-0dbb152cf92a","previousPost":{"title":"Requirements Engineering","slug":"/blog/requirements_engineering"},"nextPost":{"title":"Understanding Computation","slug":"/blog/understanding_computation"},"dates":{"created":1467635511,"modified":1647509701}}},
    "staticQueryHashes": []}