{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/blog/harmful_c_functions",
    "result": {"data":{"site":{"siteMetadata":{"title":"My personal Website"}},"markdownRemark":{"id":"70f2a9df-a31b-589c-a06c-68f9a540fb84","excerpt":"[TOC] Pre- and postfixes for printf and scanf There are quite a lot of functions in the  and scanff amily. It might not be very clear when to use which of them…","html":"<p>[TOC]</p>\n<h1 id=\"pre--and-postfixes-for-printf-and-scanf\">Pre- and postfixes for printf and scanf</h1>\n<p>There are quite a lot of functions in the <code class=\"language-text\">printf</code> and scanff amily. It might not be very clear when to use which of them.</p>\n<p>Here is an explanation of the functions in the <em>Standard C Library</em>.</p>\n<h2 id=\"prefixes\">Prefixes</h2>\n<p>Most prefixed define where the function reads (<code class=\"language-text\">scanf</code>) or wirtes (<code class=\"language-text\">printf</code>) data from or to:</p>\n<ul>\n<li><em>no prefix</em>: use <code class=\"language-text\">STDIN</code> or <code class=\"language-text\">STDOUT</code></li>\n<li><code class=\"language-text\">f</code>: use a <code class=\"language-text\">FILE</code> stream</li>\n<li><code class=\"language-text\">s</code>: use a <code class=\"language-text\">char</code> buffer (string)</li>\n<li><code class=\"language-text\">sn</code>: same as s but checks for buffer size (only <code class=\"language-text\">printf</code>)</li>\n<li><code class=\"language-text\">v</code>: takes a <code class=\"language-text\">va_list</code> instead <code class=\"language-text\">...</code> (ellipsis), can be combined with the other prefixes</li>\n</ul>\n<h2 id=\"postfix\">Postfix</h2>\n<p>The C11 standard introduced addtional functions with the <code class=\"language-text\">_s</code> postfix which do some checks on the data.</p>\n<h2 id=\"overview\">Overview</h2>\n<h3 id=\"output\">Output</h3>\n<p>So we get following <code class=\"language-text\">printf</code>-like functions:</p>\n<table>\n<thead>\n<tr>\n<th>Output</th>\n<th>ellipsis</th>\n<th>va_list</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">STDOUT</code></td>\n<td><code class=\"language-text\">printf</code>(<code class=\"language-text\">_s</code>)</td>\n<td><code class=\"language-text\">vprintf</code>(<code class=\"language-text\">_s</code>)</td>\n</tr>\n<tr>\n<td>file</td>\n<td><code class=\"language-text\">fprintf(</code>_s<code class=\"language-text\">)</code></td>\n<td><code class=\"language-text\">vfprintf</code>(<code class=\"language-text\">_s</code>)</td>\n</tr>\n<tr>\n<td>char buffer</td>\n<td><del><code class=\"language-text\">sprintf</code></del>(<code class=\"language-text\">_s</code>)</td>\n<td><del><code class=\"language-text\">vsprintf</code></del>(<code class=\"language-text\">_s</code>)</td>\n</tr>\n<tr>\n<td>char buffer with size</td>\n<td><code class=\"language-text\">snprintf</code>(<code class=\"language-text\">_s</code>)</td>\n<td><code class=\"language-text\">vsnprintf</code>(<code class=\"language-text\">_s</code>)</td>\n</tr>\n</tbody>\n</table>\n<p>The functions with <code class=\"language-text\">_s</code> postfix should be preferred if available (C11).</p>\n<p>The <code class=\"language-text\">sprintf</code> and <code class=\"language-text\">vsprintf</code> functions should not be used since the can result in stack overflow. They are also\nsuffer from string vulnerability.</p>\n<p>Use <code class=\"language-text\">snpritf</code> or <code class=\"language-text\">vsnprintf</code> instead. If possible with <code class=\"language-text\">_s</code> postfix.</p>\n<p>And force null-termination manually <sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>.</p>\n<h3 id=\"input\">Input</h3>\n<p>And we get following <code class=\"language-text\">scanf</code>-like functions:</p>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>ellipsis</th>\n<th>va_list</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">STDIN</code></td>\n<td><code class=\"language-text\">scanf</code>(<code class=\"language-text\">_s</code>)</td>\n<td><code class=\"language-text\">vscanf</code>(<code class=\"language-text\">_s</code>)</td>\n</tr>\n<tr>\n<td>file</td>\n<td><code class=\"language-text\">fscanf</code>(<code class=\"language-text\">_s</code>)</td>\n<td><code class=\"language-text\">vfscanf</code>(<code class=\"language-text\">_s</code>)</td>\n</tr>\n<tr>\n<td>char buffer</td>\n<td><code class=\"language-text\">sscanf</code>(<code class=\"language-text\">_s</code>)</td>\n<td><code class=\"language-text\">vsscanf</code>(<code class=\"language-text\">_s</code>)</td>\n</tr>\n</tbody>\n</table>\n<p>The functions with <code class=\"language-text\">_s</code> postfix should be preferred if available (C11).</p>\n<p>And force null-termination manually <sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>.</p>\n<h1 id=\"openbsd\">OpenBSD</h1>\n<p>The OpenBSD kernel library defines some additional functions that are safer than their counterparts in the standard library.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>C standard library</th>\n<th>OpenBSD kernellibrary</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Copying string</td>\n<td><code class=\"language-text\">strcpy</code></td>\n<td><code class=\"language-text\">strlcpy</code></td>\n</tr>\n<tr>\n<td>Applying (concatenating) string</td>\n<td><code class=\"language-text\">strcat</code></td>\n<td><code class=\"language-text\">strlcat</code></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"replacements\">Replacements</h1>\n<p>These C functions suffer buffer overflow problems:</p>\n<table>\n<thead>\n<tr>\n<th>Original</th>\n<th>Replacement</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">gets()</code></td>\n<td><code class=\"language-text\">fgets()</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">cuserid()</code></td>\n<td><code class=\"language-text\">getlogin()</code> or <code class=\"language-text\">getpwuid()</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">scanf()</code> family</td>\n<td>See <sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup> and <sup id=\"fnref-3\"><a href=\"#fn-3\" class=\"footnote-ref\">3</a></sup>, use functions with <code class=\"language-text\">_s</code>postfix (C11)</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">sprintf()</code></td>\n<td><code class=\"language-text\">snprintf()</code>, use functions with <code class=\"language-text\">_s</code>postfix (C11)</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">vsprintf()</code></td>\n<td><code class=\"language-text\">vsnprintf()</code>, use functions with <code class=\"language-text\">_s</code>postfix (C11)</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">strcat()</code></td>\n<td><code class=\"language-text\">strncat()</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">strcpy()</code></td>\n<td><code class=\"language-text\">strncpy()</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">streadd()</code>, <code class=\"language-text\">strtrns()</code>, <code class=\"language-text\">strecpy()</code> …</td>\n<td>Check lengths of buffers or use standard library functions</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">getwd()</code></td>\n<td><code class=\"language-text\">getcwd()</code></td>\n</tr>\n</tbody>\n</table>\n<p>See also <sup id=\"fnref-4\"><a href=\"#fn-4\" class=\"footnote-ref\">4</a></sup></p>\n<h1 id=\"references\">References</h1>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\"><a href=\"http://randomascii.wordpress.com/2013/04/03/stop-using-strncpy-already/\">randomascii.wordpress.com</a><a href=\"#fnref-1\" class=\"footnote-backref\">↩</a></li>\n<li id=\"fn-2\"><a href=\"https://stackoverflow.com/questions/1621394/how-to-prevent-scanf-causing-a-buffer-overflow-in-c\">stackoverflow.com</a><a href=\"#fnref-2\" class=\"footnote-backref\">↩</a></li>\n<li id=\"fn-3\"><a href=\"https://stackoverflow.com/questions/9245682/in-c-what-is-a-safe-alternative-to-sscanf\">stackoverflow.com</a><a href=\"#fnref-3\" class=\"footnote-backref\">↩</a></li>\n<li id=\"fn-4\"><a href=\"http://stackoverflow.com/questions/1253053/cs-bad-functions-vs-their-good-alternatives\">stackoverflow.com</a><a href=\"#fnref-4\" class=\"footnote-backref\">↩</a></li>\n</ol>\n</div>","frontmatter":{"title":"Harmful C Functions and their replacements","tags":["C","C++"],"category":"Programming"},"headings":[{"depth":1,"value":"Pre- and postfixes for printf and scanf"},{"depth":2,"value":"Prefixes"},{"depth":2,"value":"Postfix"},{"depth":2,"value":"Overview"},{"depth":3,"value":"Output"},{"depth":3,"value":"Input"},{"depth":1,"value":"OpenBSD"},{"depth":1,"value":"Replacements"},{"depth":1,"value":"References"}]}},"pageContext":{"id":"70f2a9df-a31b-589c-a06c-68f9a540fb84","previousPost":{"title":"Enums in C and C++","slug":"/blog/enums"},"nextPost":{"title":"Emacs Artist Mode","slug":"/blog/artist_mode"},"dates":{"created":1429383800,"modified":1647509701}}},
    "staticQueryHashes": []}