{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/blog/cpp_smart_pointers",
    "result": {"data":{"site":{"siteMetadata":{"title":"My personal Website"}},"markdownRemark":{"id":"ac814728-ca21-5881-88bf-22adccc012b1","excerpt":"From:\nSmart Pointers to boost your code [TOC]  unique ownership copying prevented use  to transfer ownership const prevents transfer can’t be used as elements…","html":"<p>From:\n<a href=\"http://www.codeproject.com/Articles/8394/Smart-Pointers-to-boost-your-code\">Smart Pointers to boost your code</a></p>\n<p>[TOC]</p>\n<h1 id=\"unique_ptr\"><code class=\"language-text\">unique_ptr</code></h1>\n<ul>\n<li>unique ownership</li>\n<li>copying prevented</li>\n<li>use <code class=\"language-text\">std::move</code> to transfer ownership</li>\n<li>const prevents transfer</li>\n<li>can’t be used as elements in containers</li>\n<li>use as replacement for <code class=\"language-text\">auto_ptr</code></li>\n</ul>\n<h1 id=\"shared_ptr\"><code class=\"language-text\">shared_ptr</code></h1>\n<ul>\n<li>reference counting</li>\n<li>referenced object is destroyed when (and only when) all copies of the <code class=\"language-text\">shared_ptr</code> have been destroyed</li>\n<li>can be used as elements in containers</li>\n</ul>\n<h1 id=\"weak_ptr\"><code class=\"language-text\">weak_ptr</code></h1>\n<ul>\n<li>created as copy of <code class=\"language-text\">shared_ptr</code></li>\n<li>copying/destroying have no effect on ref counting of <code class=\"language-text\">shared_ptr</code></li>\n<li>after all copies of <code class=\"language-text\">shared_ptr</code> have been destroyed all <code class=\"language-text\">weak_ptr</code> copies become empty</li>\n</ul>\n<h1 id=\"scoped_ptr-boost\"><code class=\"language-text\">scoped_ptr</code> (Boost)</h1>\n<ul>\n<li>use <code class=\"language-text\">const unique_ptr</code> instead (or <code class=\"language-text\">unique_ptr</code> if you have to)</li>\n</ul>\n<h1 id=\"other-smart-pointers-boost\">Other smart pointers (Boost)</h1>\n<ul>\n<li><code class=\"language-text\">intrusive_ptr</code></li>\n<li><code class=\"language-text\">shared_array</code></li>\n<li><code class=\"language-text\">scoped_array</code></li>\n</ul>\n<h1 id=\"rules-for-smart-pointers\">Rules for smart pointers</h1>\n<ul>\n<li>Assign and keep:\n<ul>\n<li>Assign a newly constructed instance to a smart pointer immediately</li>\n<li>Keep the management of the referenced instance in the smart pointer(s).</li>\n</ul>\n</li>\n<li>The smart pointer(s) own the object.\n<ul>\n<li>Don’t delete the owned instance manually.</li>\n<li>You can’t (shouldn’t) take the instance away from the smart pointer.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">..._ptr&lt;T></code> is not a <code class=\"language-text\">T*</code>\n<ul>\n<li>There are no implicit conversions</li>\n<li>You can not assign a <code class=\"language-text\">T*</code> to a <code class=\"language-text\">..._ptr&lt;T></code></li>\n<li>You can not write <code class=\"language-text\">ptr = NULL</code> use <code class=\"language-text\">ptr.reset()</code></li>\n<li>To retrieve the raw pointer use <code class=\"language-text\">ptr.get()</code></li>\n<li>You must not delete it!</li>\n<li>You must not use this pointer after the smart pointer(s) it comes from is/are destroyed, resetted or reassigned</li>\n</ul>\n</li>\n<li>Avoid circular references\n<ul>\n<li>Use <code class=\"language-text\">weak_ptr</code> to break such cycles</li>\n</ul>\n</li>\n<li>No temporary <code class=\"language-text\">shared_ptr</code>\n<ul>\n<li>Always construct <em>named</em> smart pointer variables.</li>\n<li>No anonymous (i.e. as param in function call) smart pointer constuction</li>\n</ul>\n</li>\n<li>Smart pointers are thread safe. But not necessary the pointee objects</li>\n</ul>","frontmatter":{"title":"Smart Pointers","tags":["C++"],"category":"Programming"},"headings":[{"depth":1,"value":"<code class=\"language-text\">unique_ptr</code>"},{"depth":1,"value":"<code class=\"language-text\">shared_ptr</code>"},{"depth":1,"value":"<code class=\"language-text\">weak_ptr</code>"},{"depth":1,"value":"<code class=\"language-text\">scoped_ptr</code> (Boost)"},{"depth":1,"value":"Other smart pointers (Boost)"},{"depth":1,"value":"Rules for smart pointers"}]}},"pageContext":{"id":"ac814728-ca21-5881-88bf-22adccc012b1","previousPost":{"title":"Unix System Files","slug":"/blog/unix_system_files"},"nextPost":{"title":"Software Development Priorities","slug":"/blog/software_development_priorities"},"dates":{"created":1490044364,"modified":1647509701}}},
    "staticQueryHashes": []}