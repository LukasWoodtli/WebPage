{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/blog/gcc_binutils",
    "result": {"data":{"site":{"siteMetadata":{"title":"My personal Website"}},"markdownRemark":{"id":"bc43b858-43ea-5d09-9c13-9b59774e764f","excerpt":"Work in Progress! [TOC] ld Flags If the linker is called through the compler the linker flags need to be added with . : Symbols are resolved at program…","html":"<blockquote>\n<p>Work in Progress!</p>\n</blockquote>\n<p>[TOC]</p>\n<h1 id=\"ld\">ld</h1>\n<h2 id=\"flags\">Flags</h2>\n<p>If the linker is called through the compler the linker flags need to be added with <code class=\"language-text\">-Wl,&lt;linker-flag></code>.</p>\n<ul>\n<li><code class=\"language-text\">-z now</code>: Symbols are resolved at program initialization time (instead of lazy, dynamic binding through PLT)</li>\n<li><code class=\"language-text\">-O1</code> (linker!)</li>\n<li><code class=\"language-text\">--no-undefined</code>: gives an error if some symbols are not available in the object files at linking stage</li>\n<li><code class=\"language-text\">--no-allow-shlib-undefined</code>: Similar to <code class=\"language-text\">--no-undefined</code>, but gives an error if symbols are not available in other shared libraries we link against</li>\n<li><code class=\"language-text\">--as-needed</code>: Link only libraries that are needed</li>\n</ul>\n<p>See also: <a href=\"http://www.bnikolic.co.uk/blog/gnu-ld-as-needed.html\">The new “—as-needed” option to the GNU linker</a></p>\n<h2 id=\"environment-variables\">Environment Variables</h2>\n<ul>\n<li><code class=\"language-text\">LD_BIND_NOW</code>: same as linker flag <code class=\"language-text\">-z now</code></li>\n<li><code class=\"language-text\">LD_PRELOAD</code>: Add libraries that are loaded first (can be used to override functionality)</li>\n<li><code class=\"language-text\">LD_DEBUG</code>: Trace functionality of the linker/loader</li>\n<li><code class=\"language-text\">LD_DEBUG_OUTPUT</code></li>\n</ul>\n<h1 id=\"readelf\">readelf</h1>\n<h2 id=\"show-which-libraries-have-been-linked\">Show which libraries have been linked</h2>\n<p><code class=\"language-text\">readelf -a &lt;prog> | grep \"Shared library\"</code></p>\n<h2 id=\"show-the-run-time-linker\">Show the run-time linker</h2>\n<p><code class=\"language-text\">readelf -a &lt;prog> | grep \"program interpreter\"</code></p>\n<h1 id=\"objdump\">objdump</h1>\n<h2 id=\"flags-1\">Flags</h2>\n<ul>\n<li><code class=\"language-text\">-d</code>: disassemble</li>\n<li><code class=\"language-text\">-C</code>: demangle C++ symbols</li>\n<li><code class=\"language-text\">--no-show-raw-insn</code>: Do not print the instruction bytes in disassembled code</li>\n</ul>\n<h1 id=\"link-time-optimization\">Link Time Optimization</h1>\n<p>Add <code class=\"language-text\">-flto</code> flag to compile and link commands.</p>\n<h1 id=\"find-unused-code\">Find Unused Code</h1>\n<p>Add flags <code class=\"language-text\">-ffunction-sections</code> and <code class=\"language-text\">-fdata-sections</code> to the compiler invocation. For the linker use the flags <code class=\"language-text\">--gc-sections</code> and <code class=\"language-text\">--print-gc-sections</code>.</p>\n<p>These flags can prevent some optimizations.</p>\n<h1 id=\"output-link-map\">Output Link Map</h1>\n<p>The link map contains information about object files, symbols, addresses…</p>\n<p>Add these flags to the linker invocation: <code class=\"language-text\">--cref -Map name.map</code></p>\n<h1 id=\"dump-default-linker-script\">Dump Default Linker Script</h1>\n<p><code class=\"language-text\">gcc -o /dev/null -xc /dev/null -Wl,--verbose</code></p>\n<h1 id=\"library-directories\">Library Directories</h1>\n<p><a href=\"https://stackoverflow.com/questions/9922949/how-to-print-the-ldlinker-search-path\">Print <code class=\"language-text\">ld</code> search pathes</a></p>","frontmatter":{"title":"GCC, binutils and other developer tools","tags":["C","C++","OS","Linux"],"category":"Programming"},"headings":[{"depth":1,"value":"ld"},{"depth":2,"value":"Flags"},{"depth":2,"value":"Environment Variables"},{"depth":1,"value":"readelf"},{"depth":2,"value":"Show which libraries have been linked"},{"depth":2,"value":"Show the run-time linker"},{"depth":1,"value":"objdump"},{"depth":2,"value":"Flags"},{"depth":1,"value":"Link Time Optimization"},{"depth":1,"value":"Find Unused Code"},{"depth":1,"value":"Output Link Map"},{"depth":1,"value":"Dump Default Linker Script"},{"depth":1,"value":"Library Directories"}]}},"pageContext":{"id":"bc43b858-43ea-5d09-9c13-9b59774e764f","previousPost":{"title":"Language Implementation Patterns","slug":"/blog/language_implementation_patterns"},"nextPost":{"title":"Finance and Capital Markets","slug":"/blog/finance_and_capital_markets"},"dates":{"created":1519333430,"modified":1647509701}}},
    "staticQueryHashes": []}