{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/blog/regex",
    "result": {"data":{"site":{"siteMetadata":{"title":"My personal Website"}},"markdownRemark":{"id":"62f9ac12-82ae-5663-804f-9c3fa54016d2","excerpt":"See also the Python Standard Library Documentation My Repository on GitHub Metacharacters Twelve Metacharacters: Backslash  Caret  Dollar  Dot  Pipe  Questionâ€¦","html":"<p>See also <a href=\"https://docs.python.org/3/library/re.html\">the Python Standard Library Documentation</a></p>\n<p>My Repository on <a href=\"https://github.com/LukasWoodtli/MasteringPythonRegularExpressions\">GitHub</a></p>\n<h1 id=\"metacharacters\">Metacharacters</h1>\n<p>Twelve Metacharacters:</p>\n<ul>\n<li>Backslash <code class=\"language-text\">\\</code></li>\n<li>Caret <code class=\"language-text\">^</code></li>\n<li>Dollar <code class=\"language-text\">$</code></li>\n<li>Dot <code class=\"language-text\">.</code></li>\n<li>Pipe <code class=\"language-text\">|</code></li>\n<li>Question mark <code class=\"language-text\">?</code></li>\n<li>Asterisk <code class=\"language-text\">*</code></li>\n<li>Plus <code class=\"language-text\">+</code></li>\n<li>Opening and closing parenthesis <code class=\"language-text\">(</code> and <code class=\"language-text\">)</code></li>\n</ul>\n<h1 id=\"character-classes\">Character Classes</h1>\n<ul>\n<li>Also known as character sets</li>\n<li>Grouped in <code class=\"language-text\">[</code> and <code class=\"language-text\">]</code></li>\n<li>Example: Hex number <code class=\"language-text\">[0-9a-fA-F]</code></li>\n<li>Invert character set with <code class=\"language-text\">^</code></li>\n</ul>\n<h2 id=\"predefined-character-classes\">Predefined Character Classes</h2>\n<p>Available in Python</p>\n<table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">.</code></td>\n<td>Any character except newline <code class=\"language-text\">\\n</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">\\d</code></td>\n<td>Decimal digit, equivalent to <code class=\"language-text\">[0-9]</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">\\D</code></td>\n<td>Any non-digit character, equivalent to <code class=\"language-text\">[^0-9]</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">\\s</code></td>\n<td>Any whitespace character, equivalent to <code class=\"language-text\">[ \\t\\n\\r\\f\\v]</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">\\S</code></td>\n<td>Any non-whitespace character, equivalent to <code class=\"language-text\">[^ \\t\\n\\r\\f\\v]</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">\\w</code></td>\n<td>Any alphanumeric character, equivalent to <code class=\"language-text\">[a-zA-Z0-9_]</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">\\W</code></td>\n<td>Any non-alphanumeric character, equivalent to <code class=\"language-text\">[^a-zA-Z0-9_]</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"posix-character-classes\">POSIX Character Classes</h2>\n<ul>\n<li>POSIX defines some classes: <a href=\"https://en.wikibooks.org/wiki/Regular_Expressions/POSIX_Basic_Regular_Expressions#Character_classes\">Wikibooks</a></li>\n<li>not available in Python</li>\n</ul>\n<h1 id=\"alternation\">Alternation</h1>\n<ul>\n<li>Alternation (or) is marked with <code class=\"language-text\">|</code></li>\n</ul>\n<h1 id=\"quantifiers\">Quantifiers</h1>\n<p>Quantifiers can be applied to characters, character sets, and to groups</p>\n<ul>\n<li>Optional (0 or 1 repetition): <code class=\"language-text\">?</code></li>\n<li>Zero (0) or more times: <code class=\"language-text\">*</code></li>\n<li>One (1) or more times: <code class=\"language-text\">+</code></li>\n<li>Exact repetition and ranges: <code class=\"language-text\">{}</code>\n<ul>\n<li>Exactly <code class=\"language-text\">n</code> times: <code class=\"language-text\">{n}</code></li>\n<li>Between <code class=\"language-text\">n</code> and <code class=\"language-text\">m</code> times (both inclusive): <code class=\"language-text\">{n,m}</code></li>\n<li>At least <code class=\"language-text\">n</code> times: <code class=\"language-text\">{n,}</code></li>\n<li>At most <code class=\"language-text\">n</code> times: <code class=\"language-text\">{,n}</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"greedy-and-reluctant-quantifiers\">Greedy and Reluctant Quantifiers</h2>\n<ul>\n<li>greedy quantifiers will try to match as much as possible\n<ul>\n<li>default behavior</li>\n<li>biggest possible result</li>\n</ul>\n</li>\n<li>reluctant (non-greedy, lazy) will try to have smalles match possible\n<ul>\n<li>extra <code class=\"language-text\">?</code> to quantifier: <code class=\"language-text\">??</code>, <code class=\"language-text\">*?</code> and <code class=\"language-text\">+?</code></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"boundary-matchers\">Boundary Matchers</h1>\n<table>\n<thead>\n<tr>\n<th>Identifiers</th>\n<th>Match</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">^</code></td>\n<td>Beginning of a line</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">$</code></td>\n<td>End of a line</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">\\b</code></td>\n<td>At word boundary</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">\\B</code></td>\n<td>Anything that is not word boundary (opposite of <code class=\"language-text\">\\b</code>)</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">\\A</code></td>\n<td>Beginning of the input</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">\\Z</code></td>\n<td>End of the input</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"python-regex-functions\">Python Regex Functions</h1>\n<ul>\n<li><code class=\"language-text\">RegexObject</code> class in <code class=\"language-text\">re</code> module</li>\n<li>wrapper functions in <code class=\"language-text\">re</code> module</li>\n<li><code class=\"language-text\">match</code> tries to match at beginning of string\n<ul>\n<li><strong>pos</strong> and slicing can have different results</li>\n</ul>\n</li>\n<li><code class=\"language-text\">search</code> is like <em>match</em> in most languages (e.g Perl)\n<ul>\n<li>tries to match at any position in string</li>\n</ul>\n</li>\n<li><a href=\"https://docs.python.org/2/library/re.html#re.compile\">Compilation Flags</a></li>\n</ul>\n<h1 id=\"grouping\">Grouping</h1>\n<ul>\n<li>Subexpressions are grouped within <code class=\"language-text\">(</code> and <code class=\"language-text\">)</code></li>\n</ul>\n<p>Used for different purposes:</p>\n<ul>\n<li>Creating subexpressions for applying <em>quantifiers</em></li>\n<li>Limiting scope of an <em>alternation</em></li>\n<li>Extract <em>parts</em> of the matched pattern (capturing)</li>\n<li>Using captured <em>parts</em> again in the regex</li>\n</ul>\n<h1 id=\"look-around\">Look Around</h1>\n<ul>\n<li>Add subpatterns that are not in the result (not consuming characters)\n<ul>\n<li>positive: subpattern needs to match</li>\n<li>negative: subpattern must not match</li>\n</ul>\n</li>\n<li>Also called zero-width assertions</li>\n<li>Python <code class=\"language-text\">re</code> module allows <em>look behind</em> only with <em>fixed size (sub-) patterns</em></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>positive</th>\n<th>negative</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Look ahead</td>\n<td>(?=regex)</td>\n<td>(?!regex)</td>\n</tr>\n<tr>\n<td>Look behind</td>\n<td>(?&#x3C;=regex)</td>\n<td>(?&#x3C;!regex)</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"benchmarking\">Benchmarking</h1>\n<p>General for Python:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> cProfile\ncProfile<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token string\">\"myFunction\"</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"Regular Expressions","tags":["Computer Science"],"category":"Programming"},"headings":[{"depth":1,"value":"Metacharacters"},{"depth":1,"value":"Character Classes"},{"depth":2,"value":"Predefined Character Classes"},{"depth":2,"value":"POSIX Character Classes"},{"depth":1,"value":"Alternation"},{"depth":1,"value":"Quantifiers"},{"depth":2,"value":"Greedy and Reluctant Quantifiers"},{"depth":1,"value":"Boundary Matchers"},{"depth":1,"value":"Python Regex Functions"},{"depth":1,"value":"Grouping"},{"depth":1,"value":"Look Around"},{"depth":1,"value":"Benchmarking"}]}},"pageContext":{"id":"62f9ac12-82ae-5663-804f-9c3fa54016d2","previousPost":{"title":"Unix Directory Structure","slug":"/blog/unix_directory_structure"},"nextPost":{"title":"OS X Keymap","slug":"/blog/osx_keyboard_layout"},"dates":{"created":1475875123,"modified":1647509701}}},
    "staticQueryHashes": []}