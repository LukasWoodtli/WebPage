{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/blog/unix_device_files",
    "result": {"data":{"site":{"siteMetadata":{"title":"My personal Website"}},"markdownRemark":{"id":"8918b205-e30e-50a4-adfb-17cfa4686929","excerpt":"Device files provide access to drivers through files. They are listed under .\nThere are two kinds of device drivers (as shown with )\n: character device\n: block…","html":"<p>Device files provide access to drivers through files.</p>\n<p>They are listed under <code class=\"language-text\">/dev</code>.\nThere are two kinds of device drivers (as shown with <code class=\"language-text\">ls -l</code>)\n<code class=\"language-text\">c</code>: character device\n<code class=\"language-text\">b</code>: block device</p>\n<ul>\n<li>Character devices provide a stream of bytes (e. g. serial ports, USB, system consoles …)</li>\n<li>Block devices allow random access of blocks of information (e. g. HD, SSD …).</li>\n</ul>\n<p>The device files have a major and a minor number. The same major number means that the same device\ndriver is responsible for the file/device. The minor number is used to distinguish different devices\nof the same type that use the same device driver.</p>\n<h1 id=\"functions\">Functions</h1>\n<p>A file descriptor for a device file can be aquired by the common <code class=\"language-text\">open()</code> function. Afer use it can be\nclosed with <code class=\"language-text\">close()</code>. Reading and writing to the file is donne with <code class=\"language-text\">read()</code> and <code class=\"language-text\">write()</code>.</p>\n<p>Contol of device drivers is acomplished with the <code class=\"language-text\">ioctl()</code> function.</p>\n<p>Man page: <code class=\"language-text\">man ioctl</code> and <code class=\"language-text\">man ioctl_list</code> (only Linux).</p>\n<h1 id=\"special-device-files\">Special Device Files</h1>\n<ul>\n<li><code class=\"language-text\">/dev/null</code>: used to redirect unused streams to ‘nowhere’</li>\n<li><code class=\"language-text\">/dev/zero</code>: ‘infinite’ sized file filled with <code class=\"language-text\">0</code> (s.a. <code class=\"language-text\">mmap()</code>)</li>\n<li><code class=\"language-text\">/dev/pts/</code>: virtual consoles (s.a. <a href=\"http://unix.stackexchange.com/questions/93531/what-is-stored-in-dev-pts-files-and-can-we-open-them/93640#93640\">stackexchange</a>)</li>\n<li><code class=\"language-text\">/dev/random</code> and <code class=\"language-text\">/dev/urandom</code>: provide random numbers (<code class=\"language-text\">/dev/random</code> might block (high entropy), <code class=\"language-text\">/dev/urandom</code> doesn’t block)</li>\n<li><code class=\"language-text\">/dev/full</code>: can be used to simulate writing to a file when the disk is full (sets <code class=\"language-text\">errno</code> to <code class=\"language-text\">ENOSPC</code>)</li>\n</ul>","frontmatter":{"title":"Unix Device Files","tags":["Computer Science","OS","Linux","Unix"],"category":"Programming"},"headings":[{"depth":1,"value":"Functions"},{"depth":1,"value":"Special Device Files"}]}},"pageContext":{"id":"8918b205-e30e-50a4-adfb-17cfa4686929","previousPost":{"title":"Complexity","slug":"/blog/complexity"},"nextPost":{"title":"Unix System Files","slug":"/blog/unix_system_files"},"dates":{"created":1488745173,"modified":1647509701}}},
    "staticQueryHashes": []}