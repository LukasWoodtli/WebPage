{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/blog/sanitizers",
    "result": {"data":{"site":{"siteMetadata":{"title":"My personal Website"}},"markdownRemark":{"id":"ef9cd6dd-671b-54f9-96f3-29c4117dbf94","excerpt":"[TOC] Sanitizers Address Sanitizer (and Leak Sanitizer) Compile and link with the flag \nIt might be necessary to link with  with older gcc/ld versions. When…","html":"<p>[TOC]</p>\n<h1 id=\"sanitizers\">Sanitizers</h1>\n<h2 id=\"address-sanitizer-and-leak-sanitizer\">Address Sanitizer (and Leak Sanitizer)</h2>\n<p>Compile and link with the flag <code class=\"language-text\">-fsanitize=address</code>\nIt might be necessary to link with <code class=\"language-text\">-lasan</code> with older gcc/ld versions.</p>\n<p>When linking shared libraries (dso’s) the sanitizer run-time library (<code class=\"language-text\">libasan.so</code>) is not linked. This hapens only when executables are linked.\nIt can lead to problems with some linker flags. For example <code class=\"language-text\">-Wl,--no-undefined</code> or <code class=\"language-text\">-Wl,-z,defs</code> don’t work with with sanitizer because the compiler\nadds sanatizer related code into object files but the linker does not link the run-time library (leading to linker errors due to undefined symbols).</p>\n<p>To solve this problem either don’t use the mentioned linker flags or compile only files needed in executables (and not in shared libraries) with the sanatizer flag.</p>\n<h3 id=\"run-time-flags\">Run-time flags</h3>\n<p>Flags for the sanitizers can be provided with the <code class=\"language-text\">ASAN_OPTIONS</code> and <code class=\"language-text\">LSAN_OPTIONS</code> environment variables. They take a colon (<code class=\"language-text\">:</code>) separated list and should be exported in the environment, before running a sanatized executable.</p>\n<h3 id=\"leak-sanitizer-and-additional-checks\">Leak Sanitizer and Additional Checks</h3>\n<p>The Leak Sanitizer can be enabled in ASan by setting <code class=\"language-text\">ASAN_OPTIONS=detect_leaks=1</code>. This is not needed on Linux as it is enabled by default.</p>\n<p>Find dynamic initialization order problems (only on Linux):\n<code class=\"language-text\">ASAN_OPTIONS=check_initialization_order=1</code></p>\n<p>To find memory use after return add <code class=\"language-text\">ASAN_OPTIONS=detect_stack_use_after_return=1</code>.</p>\n<p>To check for memory use after scope the compiler flag (not runtime oprion) <code class=\"language-text\">-fsanitize-address-use-after-scope</code> can be used.</p>\n<h3 id=\"symbolizing-output\">Symbolizing output</h3>\n<p>To see nice call stacks with readable symbols when the sanitizer finds a problem a symbolizer might be needed.</p>\n<p>Add this to the sanitizer runtime flags:</p>\n<p><code class=\"language-text\">ASAN_OPTIONS=symbolize=1</code></p>\n<p>and the path to the symbolizer</p>\n<p><code class=\"language-text\">ASAN_SYMBOLIZER_PATH=/usr/local/bin/llvm-symbolizer</code></p>\n<p>also the compiler flag to not omit the frame pointer can help: <code class=\"language-text\">-fno-omit-frame-pointer</code></p>\n<h3 id=\"preloading\">Preloading</h3>\n<p>In some cases the sanitizer library needs to be preloaded to an executable. Especially if other libraries are preloaded. Then the sanitizer library needs to be first in the list of preloaded libraries:</p>\n<p><code class=\"language-text\">LD_PRELOAD=libasan.so.3:libmylib.dso:$LD_PRELOAD ./myexecutable</code></p>\n<p>Note that the version of the sanitizer library (e.g. <code class=\"language-text\">libasan.so.3</code>) needs to be provided if there is no symbolic link <code class=\"language-text\">libasan.so</code> that points to the right version.</p>\n<p>To find out the right library name (and the path) one can run\n<code class=\"language-text\">ldd path/to/an/executable | grep libasan</code>\non an executable that was built with the <code class=\"language-text\">-fsanitize=address</code> flag</p>\n<p>For debugging problems with <code class=\"language-text\">LD_PRELOAD</code> setting the environment variable <code class=\"language-text\">LD_DEBUG=libs</code> might help. It shows which DSO is loaded from which directory and the order of loading the DSO’s.</p>\n<h3 id=\"custom-signal-handlers\">Custom Signal Handlers</h3>\n<p>If an executable uses custom signal handlers then the signal handlers of ASan need to be disabled:</p>\n<p><code class=\"language-text\">ASAN_OPTIONS=\"allow_user_segv_handler=1:handle_segv=0:handle_abort=0:handle_sigfpe=0\"</code></p>\n<h3 id=\"suppressions\">Suppressions</h3>\n<p>To suppress detection of concrete leaks foud by LSan a suppression file can be provided</p>\n<p><code class=\"language-text\">LSAN_OPTIONS=\"suppressions=$(realpath lsan_suppressions.txt)\"</code></p>\n<p>Example of <code class=\"language-text\">lsan_suppressions.txt</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">leak:FooBar\nleak:libmylibrary.so\nleak:myexecutable</code></pre></div>\n<p>There is also a similar suppression mechanism for ASan.</p>\n<h3 id=\"virtual-memory-max-map-count\">Virtual Memory Max Map Count</h3>\n<p>When out of memory errors occur when using the address sanatizer it can be of help to increase\nthe number of virtual memory maps that a process can have.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">sysctl -w vm.max_map_count<span class=\"token operator\">=</span><span class=\"token number\">1000000</span></code></pre></div>\n<p>The number of maps needs to be adjusted per use case (just experiment).</p>\n<p>The setting is also available at <code class=\"language-text\">/proc/sys/vm/max_map_count</code></p>\n<p>See also: <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/vm-max-map-count.html\">Elasticsearch: Virtual memory</a></p>\n<h3 id=\"docker\">Docker</h3>\n<p>To run an sanitized executable in a docker container the argument <code class=\"language-text\">--cap-add SYS_PTRACE</code> needs to be added to the <code class=\"language-text\">docker run</code> command.</p>\n<h3 id=\"help-and-debugging\">Help and Debugging</h3>\n<p>It’s possible to print debug information when using the sanitizer. Also the verbosity\nof any output can be increased.</p>\n<p><code class=\"language-text\">ASAN_OPTIONS=\"verbosity=2:debug=1:help=1\"</code></p>\n<p>For getting help</p>\n<p><code class=\"language-text\">ASAN_OPTIONS=\"help=1\"</code></p>","frontmatter":{"title":"Sanitizers","tags":["C","C++","Dynamic Analysis"],"category":"Programming"},"headings":[{"depth":1,"value":"Sanitizers"},{"depth":2,"value":"Address Sanitizer (and Leak Sanitizer)"},{"depth":3,"value":"Run-time flags"},{"depth":3,"value":"Leak Sanitizer and Additional Checks"},{"depth":3,"value":"Symbolizing output"},{"depth":3,"value":"Preloading"},{"depth":3,"value":"Custom Signal Handlers"},{"depth":3,"value":"Suppressions"},{"depth":3,"value":"Virtual Memory Max Map Count"},{"depth":3,"value":"Docker"},{"depth":3,"value":"Help and Debugging"}]}},"pageContext":{"id":"ef9cd6dd-671b-54f9-96f3-29c4117dbf94","previousPost":{"title":"Zeit Management","slug":"/blog/zeit_management"},"nextPost":{"title":"QEMU Quickstart","slug":"/blog/qemu_quickstart"},"dates":{"created":1520280309,"modified":1647509701}}},
    "staticQueryHashes": []}