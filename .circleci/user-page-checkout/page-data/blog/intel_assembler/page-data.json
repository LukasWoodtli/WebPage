{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/blog/intel_assembler",
    "result": {"data":{"site":{"siteMetadata":{"title":"My personal Website"}},"markdownRemark":{"id":"a143e898-773a-5467-81c8-dd95e80665f8","excerpt":"[TOC] Program Format Typical sections of an assembler program are:  section: declaration and definition of initialized data  section: declaration ofâ€¦","html":"<p>[TOC]</p>\n<h1 id=\"program-format\">Program Format</h1>\n<p>Typical sections of an assembler program are:</p>\n<ul>\n<li><code class=\"language-text\">Data</code> section: declaration and definition of initialized data</li>\n<li><code class=\"language-text\">BSS</code> section: declaration of uninitialized data</li>\n<li><code class=\"language-text\">Text</code> section: where the code is placed</li>\n</ul>\n<h1 id=\"comments\">Comments</h1>\n<p>Code comments are written using the semicolon (<code class=\"language-text\">;</code>).\nIt can be placed anywhere. Everything to the end of the line is ignored.</p>\n<h1 id=\"numeric-literals\">Numeric Literals</h1>\n<table>\n<thead>\n<tr>\n<th>Radix</th>\n<th>Format</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Decimal</td>\n<td><em>default</em></td>\n<td><code class=\"language-text\">127</code></td>\n</tr>\n<tr>\n<td>Hex</td>\n<td><code class=\"language-text\">0x</code> prefix</td>\n<td><code class=\"language-text\">0x7F</code></td>\n</tr>\n<tr>\n<td>Octal</td>\n<td><code class=\"language-text\">q</code> postfix</td>\n<td><code class=\"language-text\">177q</code></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"constants\">Constants</h1>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\"><span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span>  equ   <span class=\"token operator\">&lt;</span>value<span class=\"token operator\">></span></code></pre></div>\n<p>Constants are substituted with their value during the assembly process.\nThey are not assigned a memory location</p>\n<p>Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">SIZE  equ   <span class=\"token number\">127</span></code></pre></div>\n<h1 id=\"initialized-variables-data\">Initialized Variables (data)</h1>\n<ul>\n<li>Declared in <code class=\"language-text\">section .data</code></li>\n<li>Name, data type and initial value</li>\n<li>Supported data types:\n<ul>\n<li><code class=\"language-text\">db</code>: 8-bit(byte)</li>\n<li><code class=\"language-text\">dw</code>: 16-bit (word)</li>\n<li><code class=\"language-text\">dd</code>: 32-bit (double word)</li>\n<li><code class=\"language-text\">dq</code>: 64-bit (quad word)</li>\n<li><code class=\"language-text\">ddq</code>: 128-bit integer</li>\n<li><code class=\"language-text\">dt</code>: 128-bit float</li>\n</ul>\n</li>\n<li>Arrays are Initialized with comma separated values</li>\n</ul>\n<p>Format:</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\"><span class=\"token operator\">&lt;</span>varName<span class=\"token operator\">></span>  <span class=\"token operator\">&lt;</span>dataType<span class=\"token operator\">></span>   <span class=\"token operator\">&lt;</span>initialValue<span class=\"token operator\">></span></code></pre></div>\n<p>Examples:</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">bVal db <span class=\"token number\">2</span>            <span class=\"token comment\">; byte</span>\ncVal db <span class=\"token string\">\"H\"</span>          <span class=\"token comment\">; char</span>\nstr db <span class=\"token string\">\"Hello World\"</span> <span class=\"token comment\">; string</span>\nwVal dw <span class=\"token number\">5000</span>         <span class=\"token comment\">; 16-bit word</span>\ndVal dd <span class=\"token number\">50000</span>        <span class=\"token comment\">; 32-bit (double word)</span>\narr dd <span class=\"token number\">100</span>, <span class=\"token number\">200</span>, <span class=\"token number\">300</span> <span class=\"token comment\">; 3 element array</span>\nflt1 dd <span class=\"token number\">3.14159</span>      <span class=\"token comment\">; 32-bit float</span>\nqVar dq <span class=\"token number\">1000000000</span>   <span class=\"token comment\">; 64-bit (quad word)</span></code></pre></div>\n<h1 id=\"uninitialized-variables-bss\">Uninitialized Variables (BSS)</h1>\n<ul>\n<li>Declared in <code class=\"language-text\">section .bss</code></li>\n<li>Name, data type and count</li>\n<li>Supported data types:\n<ul>\n<li>resb 8-bit (byte)</li>\n<li>resw 16-bit (word)</li>\n<li>resd 32-bit (double-word)</li>\n<li>resq 64-bit (quad-word)</li>\n<li>resdq 128-bit (double quad-word)</li>\n</ul>\n</li>\n</ul>\n<p>Format:</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\"><span class=\"token operator\">&lt;</span>varName<span class=\"token operator\">></span>  <span class=\"token operator\">&lt;</span>resType<span class=\"token operator\">></span>   <span class=\"token operator\">&lt;</span>count<span class=\"token operator\">></span></code></pre></div>\n<p>Examples:</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">bArr resb <span class=\"token number\">5</span>   <span class=\"token comment\">; 5 element byte array</span>\nwArr resw <span class=\"token number\">20</span>  <span class=\"token comment\">; 20 element word array</span>\ndArr resd <span class=\"token number\">30</span>  <span class=\"token comment\">; 30 element double array</span>\nqArr resq <span class=\"token number\">25</span>  <span class=\"token comment\">; 25 element quad array</span></code></pre></div>\n<h1 id=\"code-text\">Code (text)</h1>\n<ul>\n<li>Placed in `section .text</li>\n<li>initial program entry point needs to be defined</li>\n</ul>\n<p>For the standard linker (Linux) the entry point is defined:</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\"><span class=\"token keyword\">global _start</span>\n<span class=\"token label function\">_start:</span></code></pre></div>\n<h1 id=\"assembler-directives\">Assembler Directives</h1>\n<p>Assembler directives are instrutions for the assembler that are not directly translated\nto CPU instrutions.</p>\n<h1 id=\"labels\">Labels</h1>\n<ul>\n<li>Labels are used as targets for jumps</li>\n<li>Can contain letters, numbers and <code class=\"language-text\">_</code></li>\n<li>Terminated with colon (<code class=\"language-text\">:</code>)</li>\n<li>Case sensitive (at least in <em>yasm</em>)</li>\n<li>May be definied only once</li>\n</ul>\n<p>Examples:</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\"><span class=\"token label function\">loopBegin:</span>\n<span class=\"token label function\">end:</span></code></pre></div>","frontmatter":{"title":"Intel Assembler Overview","tags":["Computer Science","Assembler"],"category":"Programming"},"headings":[{"depth":1,"value":"Program Format"},{"depth":1,"value":"Comments"},{"depth":1,"value":"Numeric Literals"},{"depth":1,"value":"Constants"},{"depth":1,"value":"Initialized Variables (data)"},{"depth":1,"value":"Uninitialized Variables (BSS)"},{"depth":1,"value":"Code (text)"},{"depth":1,"value":"Assembler Directives"},{"depth":1,"value":"Labels"}]}},"pageContext":{"id":"a143e898-773a-5467-81c8-dd95e80665f8","previousPost":{"title":"Git Reset","slug":"/blog/git_reset"},"nextPost":{"title":"x86 Calling Conventions","slug":"/blog/intel_calling_conventions"},"dates":{"created":1508257186,"modified":1647509701}}},
    "staticQueryHashes": []}