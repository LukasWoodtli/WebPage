{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/blog/linking_and_loading",
    "result": {"data":{"site":{"siteMetadata":{"title":"My personal Website"}},"markdownRemark":{"id":"28433163-0666-5d0a-8e40-cfed8c087352","excerpt":"The different forms of Linking There are two major forms of linking: static and dynamic. But there are some subtle details in each form of linking. This…","html":"<p>The different forms of Linking</p>\n<p>There are two major forms of linking: static and dynamic. But there are some subtle details in each form of linking.</p>\n<p>This explanations are mainly for Linux. On other OS’s the same concepts apply but with some minor differences.</p>\n<p>See also: <a href=\"%7Bfilename%7D/executable_loader.md\">Executable Loader</a></p>\n<h1 id=\"static-linking\">Static Linking</h1>\n<ul>\n<li>Combine object files and archives to binaries (executables and shared libraries)</li>\n<li>Usually a step in the build process (after compiling)</li>\n<li>Not very flexible</li>\n<li>Not very suitable for libraries\n<ul>\n<li>Libraries should be linked dynamically to executables</li>\n<li>Libraries are usually created by statically linking object files together</li>\n</ul>\n</li>\n<li>Order of symbol resolution can be tricky (e. g. same symbol in multiple object files)</li>\n</ul>\n<h1 id=\"dynamic-linking\">Dynamic Linking</h1>\n<p>Shared libraries (so, dll, dylib) are loaded at runtime.</p>\n<h2 id=\"loading\">Loading</h2>\n<ul>\n<li>Often just called: dynamic linking</li>\n<li>Shared libraries are passed to linker in build process (like with static linking)</li>\n<li>Dynamic loader loads library to process address space when executable is started (or can be lazy loaded)</li>\n<li>Mostly used for libraries that are available at build time</li>\n</ul>\n<h2 id=\"manual-loading-dlopen\">Manual loading (dlopen)</h2>\n<ul>\n<li>Same mechanism as dynamic linking</li>\n<li>But linking happens manually (programmatically)</li>\n<li>‘dlopen’ on Linux/UNIX</li>\n<li>Can load library at run time</li>\n<li>Used for plug-in mechanism</li>\n</ul>\n<h2 id=\"preloading\">Preloading</h2>\n<ul>\n<li>The dynamic linker looks for libraries in ‘LD_PATH’</li>\n<li>Possible to hook into loading process with ‘LD_PRELOAD’</li>\n<li>Libraries provided in ‘LD_PRELOAD’ are loaded instead of libraries in ‘LD_PATH’</li>\n<li>Can be used for overwriting or extending system functions (e. g. allocators: ‘malloc’, ‘free’, ‘realloc’ …)</li>\n<li>Special checks (security) are performed before library is preloaded</li>\n</ul>","frontmatter":{"title":"Linking and Loading","tags":["Computer Science","OS","Linux","Unix"],"category":"Programming"},"headings":[{"depth":1,"value":"Static Linking"},{"depth":1,"value":"Dynamic Linking"},{"depth":2,"value":"Loading"},{"depth":2,"value":"Manual loading (dlopen)"},{"depth":2,"value":"Preloading"}]}},"pageContext":{"id":"28433163-0666-5d0a-8e40-cfed8c087352","previousPost":{"title":"Linux System Calls","slug":"/blog/linux_system_calls"},"nextPost":{"title":"Make as multi-paradigm language","slug":"/blog/make_paradigms"},"dates":{"created":1511528760,"modified":1647509701}}},
    "staticQueryHashes": []}