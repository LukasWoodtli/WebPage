{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/blog/qemu_quickstart",
    "result": {"data":{"site":{"siteMetadata":{"title":"My personal Website"}},"markdownRemark":{"id":"e5715b5b-cd44-5e5d-9618-80885fa35a26","excerpt":"This shows a basic use for QEMU. See also QEMU Documentation QEMU can emulate different processor architectures: : ARM : MIPS : PowerPC : x86 and x86_64 QEMUâ€¦","html":"<p>This shows a basic use for QEMU.</p>\n<p>See also <a href=\"https://www.qemu.org/docs/master/system/index.html\">QEMU Documentation</a></p>\n<p>QEMU can emulate different processor architectures:</p>\n<ul>\n<li><code class=\"language-text\">qemu-system-arm</code>: ARM</li>\n<li><code class=\"language-text\">qemu-system-mips</code>: MIPS</li>\n<li><code class=\"language-text\">qemu-system-ppc</code>: PowerPC</li>\n<li><code class=\"language-text\">qemu-system-x86</code>: x86 and x86_64</li>\n</ul>\n<p>QEMU emulates lot of hardware for each architecture which can be shown with the option <code class=\"language-text\">-machine help</code>.</p>\n<p>Example use:</p>\n<p><code class=\"language-text\">qemu-system-arm -machine vexpress-a9 -m 256M -drive file=rootfs.ext4,sd -net nic -net use -kernel zImage -dtb vexpress-v2p-ca9.dtb -append \"console=ttyAMA0,115200 root=/dev/mmcblk0\" -serial stdio -net nic,model=lan9118 -net tap,ifname=tap0</code></p>\n<p>The most important options are:</p>\n<ul>\n<li><code class=\"language-text\">-machine vexpress-a9</code>: emulation of ARM Versatile Express development board (with Cortex A-9 processor)</li>\n<li><code class=\"language-text\">-m 256M</code>: 256 MiB RAM</li>\n<li><code class=\"language-text\">-drive file=rootfs.ext4,sd</code>: connect the sd interface to the file <code class=\"language-text\">rootfs.ext4</code> (filesystem image)</li>\n<li><code class=\"language-text\">-kernel zImage</code>: loads the Linux kernel from the file <code class=\"language-text\">zImage</code></li>\n<li><code class=\"language-text\">-dtb vexpress-v2p-ca9.dtb</code>: loads the device tree from the file <code class=\"language-text\">vexpress-v2p-ca9.dtb</code></li>\n<li><code class=\"language-text\">-append \"...\"</code>: supplies this string as the kernel command line</li>\n<li><code class=\"language-text\">-serial stdio</code>: connects the serial port to the terminal that launched QEMU, so you can log via the serial console</li>\n<li><code class=\"language-text\">-net nic,model=lan9118</code>: creates a network interface</li>\n<li><code class=\"language-text\">-net tap,ifname=tap0</code>: connects the network interface to the virtual network interface <code class=\"language-text\">tap0</code></li>\n</ul>\n<p>For configuring the network interface the command <code class=\"language-text\">tunctl</code> is used:</p>\n<p><code class=\"language-text\">sudo tunctl -u $(whoami) -t tap0</code></p>\n<p>This creates a network interface named <code class=\"language-text\">tap0</code> which is connected to the network controller in the emulated QEMU machine.</p>\n<p>The <code class=\"language-text\">tunctl</code> command is available from the <em>User Mode Linux (UML)</em> project (uml-utilites).</p>","frontmatter":{"title":"QEMU Quickstart","tags":["Embedded Systems","OS"],"category":"Programming"},"headings":[]}},"pageContext":{"id":"e5715b5b-cd44-5e5d-9618-80885fa35a26","previousPost":{"title":"Sanitizers","slug":"/blog/sanitizers"},"nextPost":{"title":"Docker","slug":"/blog/docker"},"dates":{"created":1520365760,"modified":1647509701}}},
    "staticQueryHashes": []}