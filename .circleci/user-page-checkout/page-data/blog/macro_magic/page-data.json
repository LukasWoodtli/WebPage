{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/blog/macro_magic",
    "result": {"data":{"site":{"siteMetadata":{"title":"My personal Website"}},"markdownRemark":{"id":"47ee1387-d75b-5a11-a0ba-f059290f5280","excerpt":"Macro Tricks Stringification The  operator allows to create a string out of a macro parameter. With the ‘stringize’ trick any defined constant can be converted…","html":"<h1 id=\"macro-tricks\">Macro Tricks</h1>\n<h2 id=\"stringification\">Stringification</h2>\n<p>The <code class=\"language-text\">#</code> operator allows to create a string out of a macro parameter. With the ‘stringize’ trick any defined constant can be converted into a string literal.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">stringize</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token function\">_stringize</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">_stringize</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> #s</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">IMPORTANT_CONST</span> <span class=\"token expression\"><span class=\"token number\">4</span></span></span></code></pre></div>\n<p>If you’d use the ‘stringize’ operator <code class=\"language-text\">#</code> directly in a macro you won’t get the intended string:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token function\">_stringize</span><span class=\"token punctuation\">(</span>IMPORTANT_CONST<span class=\"token punctuation\">)</span></code></pre></div>\n<p>would lead to:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token string\">\"IMPORTANT_CONST\"</span></code></pre></div>\n<p>That’s why there is another macro calling the first one:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token function\">stringize</span><span class=\"token punctuation\">(</span>IMPORTANT_CONST<span class=\"token punctuation\">)</span></code></pre></div>\n<p>is replaced to:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token function\">stringize</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  </code></pre></div>\n<p>which leads to:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token function\">_stringize</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  </code></pre></div>\n<p>and finally:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token string\">\"4\"</span>  </code></pre></div>\n<h2 id=\"concatenation\">Concatenation</h2>\n<p>With the <code class=\"language-text\">##</code> operator in a preprocessor macro it’s possible to combine two tokens.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">CREATE_ID</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> ID_</span><span class=\"token punctuation\">##</span><span class=\"token expression\">name</span></span>\n\n<span class=\"token function\">CREATE_ID</span><span class=\"token punctuation\">(</span>IMPORTANT_THING<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">ID_IMPORTANT_THING</code></pre></div>\n<h2 id=\"further-reading\">Further Reading</h2>\n<p>There is a good explanation in the GCC online docs:\n<a href=\"https://gcc.gnu.org/onlinedocs/cpp/Macros.html#Macros\">Macros</a></p>","frontmatter":{"title":"Macro Magic in C and C++","tags":["C","C++"],"category":"Programming"},"headings":[{"depth":1,"value":"Macro Tricks"},{"depth":2,"value":"Stringification"},{"depth":2,"value":"Concatenation"},{"depth":2,"value":"Further Reading"}]}},"pageContext":{"id":"47ee1387-d75b-5a11-a0ba-f059290f5280","previousPost":{"title":"Emacs Artist Mode","slug":"/blog/artist_mode"},"nextPost":{"title":"Introduction to Statistics","slug":"/blog/statistics"},"dates":{"created":1431714260,"modified":1647509701}}},
    "staticQueryHashes": []}