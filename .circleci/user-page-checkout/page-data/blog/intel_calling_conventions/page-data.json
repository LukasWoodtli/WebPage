{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/blog/intel_calling_conventions",
    "result": {"data":{"site":{"siteMetadata":{"title":"My personal Website"}},"markdownRemark":{"id":"0bcbf87e-eac0-5168-b6d3-d941d4e50984","excerpt":"There are a lot of different calling conventions fir x86 processors.\nSee also Wikipedia:x86 calling conventions Unix System V AMD64 ABI: Linux macOS FreeBSD…","html":"<p>There are a lot of different calling conventions fir x86 processors.\nSee also <a href=\"https://en.m.wikipedia.org/wiki/X86_calling_conventions\">Wikipedia:x86 calling conventions</a></p>\n<h1 id=\"unix\">Unix</h1>\n<p>System V AMD64 ABI:</p>\n<ul>\n<li>Linux</li>\n<li>macOS</li>\n<li>FreeBSD</li>\n<li>Solaris</li>\n</ul>\n<p>This calling conventions are also used for C/C++ programs.</p>\n<h2 id=\"instructions\">Instructions</h2>\n<ul>\n<li><code class=\"language-text\">call</code>: Save return address, implicitely pushing <code class=\"language-text\">RIP</code>to stack</li>\n<li><code class=\"language-text\">ret</code>: Pop’s corrent top of stack (<code class=\"language-text\">RSP</code>) into <code class=\"language-text\">RIP</code></li>\n</ul>\n<h2 id=\"argument-passing\">Argument Passing</h2>\n<p>The first 6 arguments (integer or pointer) are passed in registers:</p>\n<table>\n<thead>\n<tr>\n<th>Register</th>\n<th>Argument</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">RDI</code></td>\n<td>1st argument</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">RSI</code></td>\n<td>2nd argument</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">RDX</code></td>\n<td>3rd argument</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">RCX</code></td>\n<td>4th argument</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">R8</code></td>\n<td>5th argument</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">R9</code></td>\n<td>6th argument</td>\n</tr>\n</tbody>\n</table>\n<p>The first 8 floating point arguments are in the registers <code class=\"language-text\">xmm0</code> - <code class=\"language-text\">xmm7</code>.</p>\n<ul>\n<li>Additional arguments are located on the stack in reverse order (from right to left)</li>\n<li><code class=\"language-text\">R10</code> is used as static chain pointer for nested functions</li>\n<li>Variadic functions:\n<ul>\n<li>Number of floating point arguments: <code class=\"language-text\">RAX</code></li>\n<li>The arguments are passed in the vector registers</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"return-value\">Return Value</h2>\n<p>The return value is passed in registers <code class=\"language-text\">RAX</code> and if needed also in <code class=\"language-text\">RDX</code>.</p>\n<p>If the return value is a floating point number it is passed in <code class=\"language-text\">xmm0</code>.</p>\n<h2 id=\"call-by-reference-out-params\">Call by Reference (out params)</h2>\n<p>Output parameters need two steps to return a value:</p>\n<ol>\n<li>Get the address from the stack</li>\n<li>Use that address to return the value</li>\n</ol>\n<h2 id=\"registers\">Registers</h2>\n<ul>\n<li>Calle: must save and restore <code class=\"language-text\">RBP</code>, <code class=\"language-text\">RBX</code> and <code class=\"language-text\">R12</code>-<code class=\"language-text\">R15</code> if they are used</li>\n<li>Caller: all other registers must be saved and restored if their content is needed after the function cal</li>\n<li>No <code class=\"language-text\">XMM</code> registers are preserved</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Register</th>\n<th>Usage</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">rax</code></td>\n<td>Return Value</td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">rbx</code></td>\n<td>Callee Saved</td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">rcx</code></td>\n<td>4th Argument</td>\n<td>Not preserved during function call</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">rdx</code></td>\n<td>3rd Argument</td>\n<td>Not preserved during function call</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">rsi</code></td>\n<td>2nd Argument</td>\n<td>Not preserved during function call</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">rdi</code></td>\n<td>1st Argument</td>\n<td>Not preserved during function call</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">rbp</code></td>\n<td>Callee Saved</td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">rsp</code></td>\n<td>Stack Pointer</td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">r8 </code></td>\n<td>5th Argument</td>\n<td>Not preserved during function call</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">r9</code></td>\n<td>6th Argument</td>\n<td>Not preserved during function call</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">r10</code></td>\n<td>Temporary</td>\n<td>Not preserved during function call</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">r11</code></td>\n<td>Temporary</td>\n<td>Not preserved during function call</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">r12</code></td>\n<td>Callee Saved</td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">r13</code></td>\n<td>Callee Saved</td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">r14</code></td>\n<td>Callee Saved</td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">r15</code></td>\n<td>Callee Saved</td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">xmm0</code> - <code class=\"language-text\">xmm15</code></td>\n<td></td>\n<td>Not preserved during function call</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"clean-up\">Clean-Up</h2>\n<p>The caller is responsible for clearing the argument from the stack.\nThis is usually donne by adjusting the <code class=\"language-text\">RSP</code>, instead of <code class=\"language-text\">POP</code> instructions.</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">add <span class=\"token register variable\">rsp</span>, numberOfArguments <span class=\"token operator\">*</span> <span class=\"token number\">8</span> <span class=\"token comment\">; number of arguments placed on stack</span></code></pre></div>\n<h2 id=\"stack-frame\">Stack Frame</h2>\n<p>The stack frame is the data on the stack that belong to one function call.\nIt’s also called activation record or call frame.</p>\n<p><a href=\"https://eli.thegreenplace.net/2011/09/06/stack-frame-layout-on-x86-64\">Here</a> is a good explanation.</p>\n<ol>\n<li>Arguments that are not passed in registers</li>\n<li>Return address (saved by <code class=\"language-text\">call</code>)</li>\n<li>Saved <code class=\"language-text\">rbp</code> from last stack frame. <code class=\"language-text\">rbp</code> needs to point now to this address</li>\n<li>Local variables. <code class=\"language-text\">rsp</code> points to last used address</li>\n<li>After the last stack frame there are 128 bytes <em>red zone</em></li>\n</ol>\n<blockquote>\n<p>The System V AMD64 ABI doesn’t require to use the base pointer</p>\n</blockquote>\n<p>To save and adjust <code class=\"language-text\">rbp</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\"><span class=\"token comment\">; prologue</span>\npush <span class=\"token register variable\">rbp</span>\n   <span class=\"token comment\">; save the 'old' `rbp` on the stack</span>\nmov <span class=\"token register variable\">rbp</span>, <span class=\"token register variable\">rsp</span>   <span class=\"token comment\">; adjust `rbp` to point to the just saved 'old' `rbp`</span></code></pre></div>\n<h2 id=\"the-red-zone\">The Red Zone</h2>\n<ul>\n<li>The 128 bytes after the last stack frame are reserved for compiler optimization</li>\n<li>This range is not allowed to be changed asynchonically (e.g by signals or IRQ handlers)</li>\n<li>Some functions (i.e. leaf functions) don’t need a stack frame at all. They can use the red zone</li>\n</ul>","frontmatter":{"title":"x86 Calling Conventions","tags":["Assembler","Embedded Systems","Computer Science"],"category":"Programming"},"headings":[{"depth":1,"value":"Unix"},{"depth":2,"value":"Instructions"},{"depth":2,"value":"Argument Passing"},{"depth":2,"value":"Return Value"},{"depth":2,"value":"Call by Reference (out params)"},{"depth":2,"value":"Registers"},{"depth":2,"value":"Clean-Up"},{"depth":2,"value":"Stack Frame"},{"depth":2,"value":"The Red Zone"}]}},"pageContext":{"id":"0bcbf87e-eac0-5168-b6d3-d941d4e50984","previousPost":{"title":"Intel Assembler Overview","slug":"/blog/intel_assembler"},"nextPost":{"title":"Linux System Calls","slug":"/blog/linux_system_calls"},"dates":{"created":1509911811,"modified":1647509701}}},
    "staticQueryHashes": []}