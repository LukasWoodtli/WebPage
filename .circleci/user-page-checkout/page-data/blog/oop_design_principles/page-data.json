{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/blog/oop_design_principles",
    "result": {"data":{"site":{"siteMetadata":{"title":"My personal Website"}},"markdownRemark":{"id":"71334bae-0e6f-593e-bb6c-7e82c0ee81b3","excerpt":"[TOC] General Use Coding conventions Keep it simple, stupid (KISS) Boy Scout Rule: “Always leave the campground cleaner than you found it” - Robert C. Martin…","html":"<p>[TOC]</p>\n<h1 id=\"general\">General</h1>\n<ul>\n<li>Use <a href=\"https://en.wikipedia.org/wiki/Coding_conventions\">Coding conventions</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/KISS_principle\">Keep it simple, stupid (KISS)</a></li>\n<li>Boy Scout Rule: “Always leave the campground cleaner than you found it” - Robert C. Martin</li>\n<li><a href=\"https://pragprog.com/the-pragmatic-programmer/extracts/software-entropy\">Broken Window Theory</a>: Don’t Live with Broken Windows</li>\n<li>Fix root cause (root cause analysis, no workaraounds): otherwise it will get you again</li>\n<li><a href=\"https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it\">You aren’t gonna need it (YAGNI)</a>: implement things when you need them</li>\n</ul>\n<h1 id=\"class-design\">Class Design</h1>\n<h2 id=\"solid\">SOLID</h2>\n<ul>\n<li><em>S</em>: Single responsibility principle (only one reason to change)</li>\n<li><em>O</em>: Open/closed principle (open for extension, closed for modification)</li>\n<li><em>L</em>: Liskov substitution principle</li>\n<li><em>I</em>: Interface segregation principle</li>\n<li><em>D</em>: Dependency inversion principle (dependency injection can be used)</li>\n</ul>\n<p>See <a href=\"https://en.wikipedia.org/wiki/SOLID\">SOLID</a> and <a href=\"%7Bfilename%7D/solid.md\">SOLID Design Principles</a>.</p>\n<h1 id=\"package-design\">Package Design</h1>\n<p>See <a href=\"https://en.wikipedia.org/wiki/Package_principles\">Package principles</a></p>\n<h2 id=\"package-cohesion\">Package Cohesion</h2>\n<h3 id=\"reuse-release-equivalence-principle-rep\">Reuse-release Equivalence Principle (REP)</h3>\n<ul>\n<li>A package must contain reusable classes</li>\n<li>All of the classes inside the package are reusable (or none of them are)</li>\n<li>The classes must be of the same family</li>\n</ul>\n<h3 id=\"common-reuse-principle-crp\">Common-Reuse Principle (CRP)</h3>\n<p>Classes that are reused together belong in the same package</p>\n<h3 id=\"common-closure-principle-ccp\">Common-Closure Principle (CCP)</h3>\n<ul>\n<li>A package should not have more than one reason to change</li>\n<li>Changes to an application shall occur only in one package</li>\n<li>If classes are tightly coupled, they belong to the same package</li>\n</ul>\n<h2 id=\"package-coupling\">Package Coupling</h2>\n<h3 id=\"acyclic-dependencies-principle-adp\">Acyclic Dependencies Principle (ADP)</h3>\n<ul>\n<li>No cycles are allowed in the dependency structure</li>\n<li>Dependencies form a tree (or DAG)</li>\n</ul>\n<h2 id=\"stable-dependencies-principle-sdp\">Stable-Dependencies Principle (SDP)</h2>\n<ul>\n<li>Packages that are changed frequently shall not depend on packages that are difficult to change</li>\n</ul>\n<h2 id=\"stable-abstractions-principle-sap\">Stable-Abstractions Principle (SAP)</h2>\n<ul>\n<li>Stable packages should be abstract, so that it can be easier extended</li>\n<li>Unstable packages should be concrete, it’s easier to change</li>\n</ul>\n<h1 id=\"development-environment-and-infrastructure\">Development Environment and Infrastructure</h1>\n<ul>\n<li>Building the software needs to be possible with just one command</li>\n<li>Running a single test needs to be possible with just one command</li>\n<li>Running all tests needs to be possible with just one command</li>\n<li>Integrate unit tests into build</li>\n<li>Source control (e.g. git) for everything: source, docs, reference data, tools…</li>\n<li>Use static and dynamic analysis tools</li>\n<li>Set highest warning level of compilers, use multiple different compilers</li>\n<li>Write documentation: Wiki, Doxygen, Markdown…</li>\n<li>Apply CI/CD, pipeline as code</li>\n</ul>\n<h1 id=\"references\">References</h1>\n<ul>\n<li><a href=\"https://97-things-every-x-should-know.gitbooks.io/97-things-every-programmer-should-know/content/en/index.html\">97 Things Every Programmer Should Know</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Encapsulation_%28computer_programming%29\">Encapsulate</a> what varies (<a href=\"http://c2.com/cgi/wiki?EncapsulationIsNotInformationHiding\">Encapsulation Is Not Information Hiding</a>)</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Composition_over_inheritance\">Prefer Composition to inheritance</a></li>\n<li>Program to Interface, not Implementation: <a href=\"https://en.wikipedia.org/wiki/Liskov_substitution_principle\">Liskov substitution principle</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Cohesion_%28computer_science%29\">Cohesion</a>: Objects should only interact with ‘friends’ (objects in their neighborhood)</li>\n<li>Ineracting Objects should aim for <a href=\"https://en.wikipedia.org/wiki/Loose_coupling\">loose coupling</a></li>\n<li><a href=\"http://martinfowler.com/bliki/TellDontAsk.html\">Tell don’t ask</a>: Tell Objects what to do with their data, don’t ask for the data to operate on it</li>\n<li><a href=\"%7Bfilename%7D/design_patterns.md\">List of Design Patterns</a></li>\n</ul>","frontmatter":{"title":"Object Oriented Design Principles","tags":["C++","Python","OOP"],"category":"Programming"},"headings":[{"depth":1,"value":"General"},{"depth":1,"value":"Class Design"},{"depth":2,"value":"SOLID"},{"depth":1,"value":"Package Design"},{"depth":2,"value":"Package Cohesion"},{"depth":3,"value":"Reuse-release Equivalence Principle (REP)"},{"depth":3,"value":"Common-Reuse Principle (CRP)"},{"depth":3,"value":"Common-Closure Principle (CCP)"},{"depth":2,"value":"Package Coupling"},{"depth":3,"value":"Acyclic Dependencies Principle (ADP)"},{"depth":2,"value":"Stable-Dependencies Principle (SDP)"},{"depth":2,"value":"Stable-Abstractions Principle (SAP)"},{"depth":1,"value":"Development Environment and Infrastructure"},{"depth":1,"value":"References"}]}},"pageContext":{"id":"71334bae-0e6f-593e-bb6c-7e82c0ee81b3","previousPost":{"title":"Blender Basics","slug":"/blog/blender_basics"},"nextPost":{"title":"Midnight Commander","slug":"/blog/midnight_commander"},"dates":{"created":1527780526,"modified":1647509701}}},
    "staticQueryHashes": []}