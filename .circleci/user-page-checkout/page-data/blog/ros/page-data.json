{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/blog/ros",
    "result": {"data":{"site":{"siteMetadata":{"title":"My personal Website"}},"markdownRemark":{"id":"04de9b0a-29a5-58c8-aca6-caad937f307c","excerpt":"Currently I’m using Melodic Morenia. [TOC]  There is -completion for almost everything Load ROS Environment For Bash: or Zsh: Commands Command Function  List…","html":"<blockquote>\n<p>Currently I’m using <em>Melodic Morenia</em>.</p>\n</blockquote>\n<p>[TOC]</p>\n<h1 id=\"rosbash\"><code class=\"language-text\">rosbash</code></h1>\n<blockquote>\n<p>There is <code class=\"language-text\">tab</code>-completion for almost everything</p>\n</blockquote>\n<h2 id=\"load-ros-environment\">Load ROS Environment</h2>\n<p>For Bash:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> /opt/ros/melodic/setup.bash</code></pre></div>\n<p>or Zsh:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">source</span> /opt/ros/melodic/setup.zsh</code></pre></div>\n<h2 id=\"commands\">Commands</h2>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">rosls &lt;package_name></code></td>\n<td>List package content</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">roscd &lt;package_name></code></td>\n<td>Go to package directory</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"rospack\"><code class=\"language-text\">rospack</code></h1>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">rospack list</code></td>\n<td>List installed packages</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">rospack find &lt;package-name></code></td>\n<td>Search for a package</td>\n</tr>\n</tbody>\n</table>\n<p>Each package is defined by a package directory that contains a manifest\nfile called <code class=\"language-text\">package.xml</code>.</p>\n<p>Package executables are not stored in the package directory.\nThey are placed in a separate standardized directory hierarchy.</p>\n<h1 id=\"the-master-roscore\">The Master (<code class=\"language-text\">roscore</code>)</h1>\n<ul>\n<li><code class=\"language-text\">roscore</code> starts the master. There are no command line arguments.</li>\n</ul>\n<h1 id=\"nodes\">Nodes</h1>\n<h2 id=\"start-a-node-rosrun\">Start a node (<code class=\"language-text\">rosrun</code>)</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">rosrun <span class=\"token operator\">&lt;</span>package-name<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>executable-name<span class=\"token operator\">></span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">package-name</code>: the name of the node’s package</li>\n<li><code class=\"language-text\">executable-name</code>: the executable name in that package</li>\n</ul>\n<h2 id=\"handle-multiple-nodes-roslaunch\">Handle multiple nodes (<code class=\"language-text\">roslaunch</code>)</h2>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">roslaunch &lt;package-name> &lt;launch-file-name></code></td>\n<td>Launch nodes from launch file in package</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">roslaunch &lt;launch-file-path></code></td>\n<td>Launch nodes from launch file given with full path</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"launch-file-structure-xml-tags-and-arguments\">Launch File Structure (XML Tags and Arguments)</h3>\n<ul>\n<li><code class=\"language-text\">&lt;launch></code>: Root element of launch file</li>\n<li><code class=\"language-text\">&lt;node name=\"listener\" pkg=\"roscpp_tutorials\" type=\"listener\" output=\"screen\" /></code>: A ROS node to be launched\n<ul>\n<li><code class=\"language-text\">name</code>: Name of the node (free to choose)</li>\n<li><code class=\"language-text\">pkg</code>: The ROS package name containing the node executable</li>\n<li><code class=\"language-text\">type</code>: Type of the node in the package</li>\n<li><code class=\"language-text\">output</code>: Where to output log messages (<code class=\"language-text\">screen</code> or <code class=\"language-text\">log</code>)</li>\n</ul>\n</li>\n<li><code class=\"language-text\">&lt;arg name=\"arg_name\" default=\"default_value\"/></code>: Define arguments (variables)\n<ul>\n<li><code class=\"language-text\">$(arg arg_name)</code>: Reference arguments</li>\n<li><code class=\"language-text\">roslaunch launch_file.launch arg_name:=value</code>: Provide arguments when running a launchfile</li>\n</ul>\n</li>\n<li><code class=\"language-text\">&lt;include file=\"package_name\"/></code>: Include other launchfile\n<ul>\n<li><code class=\"language-text\">$(find package_name)</code>: Find other package in workspace</li>\n</ul>\n</li>\n</ul>\n<p>Notes about how to writ launch files can be found at <a href=\"http://wiki.ros.org/roslaunch/XML\">roslaunch/XML</a> and\n<a href=\"http://wiki.ros.org/ROS/Tutorials/Roslaunch%20tips%20for%20larger%20projects\">Roslaunch tips for large projects</a></p>\n<p>Flags:</p>\n<ul>\n<li><code class=\"language-text\">-v</code>: Print verbose output</li>\n<li><code class=\"language-text\">--screen</code>: Display output for all nodes in launch file</li>\n</ul>\n<h2 id=\"commands-for-handling-nodes\">Commands for handling Nodes</h2>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">rosnode list</code></td>\n<td>Print the running nodes</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">rosnode info &lt;node-name></code></td>\n<td>Inspect a running node</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">rosnode kill &lt;node-name></code></td>\n<td>Stop and remove a running node</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">rosnode cleanup</code></td>\n<td>Remove killed nodes from the list</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"communication-and-data-sharing\">Communication and Data Sharing</h1>\n<h2 id=\"topics-and-messages\">Topics and Messages</h2>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">rostopic list</code></td>\n<td>Print all topics currently published or subscribed</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">rostopic list -v</code></td>\n<td>Print also publishers and subscribers</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">rostopic echo &lt;topic></code></td>\n<td>Print data published on a topic</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">rostopic info &lt;topic></code></td>\n<td>Print message type, publishers and subscribers</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">rostopic type &lt;topic></code></td>\n<td>Get the message type published on a topic</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">rosmsg show &lt;msg-type></code></td>\n<td>Get the fields of a message type</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">rostopic pub &lt;topic> &lt;msg-type> -- &lt;args></code></td>\n<td>Publish on a topic (use <code class=\"language-text\">TAB</code> completion to get a template message)</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"parameters-rosparam\">Parameters (<code class=\"language-text\">rosparam</code>)</h2>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">rosparam list</code></td>\n<td>Print a list of all parameters</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">rosparam get &lt;parameter-name></code></td>\n<td>Ask for the value of a parameter</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">rosparam get &lt;namespace></code></td>\n<td>Ask for all values of all parameters in a namespace</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">rosparam set &lt;parameter-name> &lt;value></code></td>\n<td>Set the value of a parameter</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">rosparam set &lt;namespace> &lt;values></code></td>\n<td>Set the values of parameters in a namespace using YAML</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">rosparam dump &lt;filename> &lt;namespace></code></td>\n<td>Save all parameters from a namespace in a YAML file</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">rosparam load &lt;filename> &lt;namespace></code></td>\n<td>Load all parameters from a YAML file into a namespace</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"services\">Services</h2>\n<p>A <em>client</em> node sends a <strong>request</strong> to a <em>server</em> node and waits for a <strong>response</strong>.</p>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">rosservice list</code></td>\n<td>Get a list of currently active services</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">rosservice node &lt;service-name></code></td>\n<td>Print the node that offers a given service</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">rosservice info &lt;service-name></code></td>\n<td>Finding the data type of a service</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">rossrv show &lt;service-data-type-name></code></td>\n<td>Show the data fields of the request and the response</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">rosservice call &lt;service-name> &lt;request></code></td>\n<td>Get a response from a service</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><code class=\"language-text\">rosservice</code>: interacting with services that are currently offered by a node</li>\n<li><code class=\"language-text\">rossrv</code>: information about service data types</li>\n</ul>\n<p>Information about writing services and clients in C++ can be found here\n<a href=\"http://wiki.ros.org/ROS/Tutorials/WritingServiceClient(c++)\">Writing a Simple Service and Client (C++)</a>.</p>\n<h2 id=\"topics-messages-and-services\">Topics, Messages and Services</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Topics</th>\n<th>Services</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>active entities</td>\n<td><code class=\"language-text\">rostopic</code></td>\n<td><code class=\"language-text\">rosservice</code></td>\n</tr>\n<tr>\n<td>data types</td>\n<td><code class=\"language-text\">rosmsg</code></td>\n<td><code class=\"language-text\">rossrv</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"overview\">Overview</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Topics</th>\n<th>Services</th>\n<th>Actions</th>\n<th>Parameters</th>\n<th>Dynamic Reconfigure</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Description</td>\n<td>Continuous data streams</td>\n<td>Blocking call for processing requests</td>\n<td>Non-blocking, preemptable, goal oriented</td>\n<td>Global constant parameters</td>\n<td>Local, changeable parameters</td>\n</tr>\n<tr>\n<td>Application</td>\n<td>One-way data flow</td>\n<td>Short triggers or calculations</td>\n<td>Task executions and robot actions</td>\n<td>Constant settings</td>\n<td>Tuning parameters</td>\n</tr>\n<tr>\n<td>Examples</td>\n<td>Sensor data, robot state</td>\n<td>Trigger change, request state, compute quantity</td>\n<td>Navigation, grasping, motion execution</td>\n<td>Topic names, camera settings, calibration data, robot setup</td>\n<td>Controller parameters</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"bag-files\">Bag files</h1>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">rosbag record -O &lt;filename> &lt;topic-names></code></td>\n<td>Record all messages of the given topics (stop with <code class=\"language-text\">Ctrl-C</code>)</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">rosrun rosbag record -O &lt;filename> &lt;topic-names></code></td>\n<td>Alternative to be used in launch files</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">rosbag play &lt;filename></code></td>\n<td>Replay bag file</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">rosrun rosbag play &lt;filename></code></td>\n<td>Alternative to be used in launch files</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">rosbag info &lt;filename></code></td>\n<td>Inspect bag file</td>\n</tr>\n</tbody>\n</table>\n<p>Flags:</p>\n<ul>\n<li><code class=\"language-text\">-j</code>: Compress bag files</li>\n</ul>\n<h1 id=\"workspaces-and-packages\">Workspaces and Packages</h1>\n<p>All packages belonging to one project should be placed in one workspace.</p>\n<h2 id=\"creating-a-workspaces\">Creating a Workspaces</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> -p <span class=\"token operator\">&lt;</span>workspace-name<span class=\"token operator\">></span>/src    <span class=\"token comment\"># don't forget the `src` subdirectory</span>\n<span class=\"token builtin class-name\">cd</span>  <span class=\"token operator\">&lt;</span>workspace-name<span class=\"token operator\">></span>/\ncatkin build  <span class=\"token comment\"># don't use catkin_make</span>\n<span class=\"token builtin class-name\">source</span> devel/setup.zsh</code></pre></div>\n<h2 id=\"creating-a-package\">Creating a Package</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span>  <span class=\"token operator\">&lt;</span>workspace-name<span class=\"token operator\">></span>/src\ncatkin_create_pkg <span class=\"token operator\">&lt;</span>package-name<span class=\"token operator\">></span> <span class=\"token punctuation\">[</span>list of dependencies<span class=\"token punctuation\">]</span></code></pre></div>\n<h2 id=\"building-a-workspace\">Building a Workspace</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span>  <span class=\"token operator\">&lt;</span>workspace-name<span class=\"token operator\">></span>/\ncatkin build  <span class=\"token comment\"># don't use catkin_make</span>\n<span class=\"token builtin class-name\">source</span> devel/setup.zsh</code></pre></div>\n<h2 id=\"configuring-build-in-a-workspace\">Configuring build in a Workspace</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span>  <span class=\"token operator\">&lt;</span>workspace-name<span class=\"token operator\">></span>/\ncatkin config\n<span class=\"token builtin class-name\">source</span> devel/setup.zsh</code></pre></div>\n<h3 id=\"provide-arguments-to-cmake\">Provide Arguments to CMake</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">catkin config --cmake-args -DCMAKE_BUILD_TYPE<span class=\"token operator\">=</span>Debug</code></pre></div>\n<h2 id=\"running-a-node-from-workspace\">Running a Node from Workspace</h2>\n<p>A master is required to run before running any nodes.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span>  <span class=\"token operator\">&lt;</span>workspace-name<span class=\"token operator\">></span>/\n<span class=\"token builtin class-name\">source</span> devel/setup.zsh\nrosrun <span class=\"token operator\">&lt;</span>package-name<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>executable-name<span class=\"token operator\">></span></code></pre></div>\n<h2 id=\"cleaning-the-workspace\">Cleaning the Workspace</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span>  <span class=\"token operator\">&lt;</span>workspace-name<span class=\"token operator\">></span>/\ncatkin clean --all</code></pre></div>\n<h1 id=\"client-libraries\">Client Libraries</h1>\n<h2 id=\"node-handles\">Node Handles</h2>\n<table>\n<thead>\n<tr>\n<th>Node Handle</th>\n<th>C++ Code</th>\n<th>Namespace for Topics</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Default (public)</td>\n<td><code class=\"language-text\">nh_ = ros::NodeHandle();</code></td>\n<td><code class=\"language-text\">/namespace/topic</code></td>\n</tr>\n<tr>\n<td>Private</td>\n<td><code class=\"language-text\">nh_private_ = ros::NodeHandle(\"~\");</code></td>\n<td><code class=\"language-text\">/namespace/node/topic</code></td>\n</tr>\n<tr>\n<td>Namespaced</td>\n<td><code class=\"language-text\">nh_eth_ = ros::NodeHandle(\"eth\");</code></td>\n<td><code class=\"language-text\">/namespace/eth/topic</code></td>\n</tr>\n</tbody>\n</table>\n<p>It’s also possible to use global node handlers. But it is not recomended.</p>\n<h2 id=\"time-library\">Time Library</h2>\n<p>It’s recomended to always use the ROS Time APIs (and not the standard library).</p>\n<p>This allows to handle simulated time properly.</p>\n<ul>\n<li><code class=\"language-text\">ros::Time</code>:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">ros<span class=\"token double-colon punctuation\">::</span>Time begin <span class=\"token operator\">=</span> ros<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">Time</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> secs <span class=\"token operator\">=</span> begin<span class=\"token punctuation\">.</span><span class=\"token function\">toSec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">ros::Duration</code>:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token function\">duration</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0.5s</span>\nros<span class=\"token double-colon punctuation\">::</span>Duration passed <span class=\"token operator\">=</span> ros<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> begin<span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">ros::Rate</code>:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">ros<span class=\"token double-colon punctuation\">::</span>Rate <span class=\"token function\">rate</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10Hz</span></code></pre></div>\n<p>If wall time is required, use <code class=\"language-text\">ros::WallTime</code>, <code class=\"language-text\">ros::WallDuration</code> and <code class=\"language-text\">ros::WallRate</code></p>\n<h1 id=\"urdf-and-xacro\">URDF and Xacro</h1>\n<p>To generate an URFD file from a xacro file:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">xacro input.xacro <span class=\"token operator\">></span> output.urdf</code></pre></div>\n<p>Checking URDF files:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">check_urdf file.urdf</code></pre></div>\n<p>Create graph for URDF:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">urdf_to_graphiz file.urdf  <span class=\"token comment\"># note the missing 'v' in graphiz</span></code></pre></div>\n<h1 id=\"checking-for-problems\">Checking for Problems</h1>\n<ul>\n<li><code class=\"language-text\">roswtf</code>: Perform sanity checks for the running ROS system</li>\n<li><code class=\"language-text\">rosnode info</code>: Get information about nodes</li>\n<li><code class=\"language-text\">rostopic echo</code>: Show data published on a topic</li>\n<li><code class=\"language-text\">rqt_graph</code>: Show nodes and topics as graphs</li>\n<li><code class=\"language-text\">rviz</code>: Visualize data</li>\n<li><code class=\"language-text\">rqt</code>: Generic GUI with a lot of plugins</li>\n</ul>\n<h1 id=\"references\">References</h1>\n<ul>\n<li><a href=\"https://cse.sc.edu/~jokane/agitr/\">A Gentle Introduction to ROS</a></li>\n<li><a href=\"http://wiki.ros.org/\">ROS Wiki</a></li>\n</ul>","frontmatter":{"title":"Robot Operating System (ROS)","tags":["Cheat Sheet","Robotics"],"category":"Mechanics"},"headings":[{"depth":1,"value":"<code class=\"language-text\">rosbash</code>"},{"depth":2,"value":"Load ROS Environment"},{"depth":2,"value":"Commands"},{"depth":1,"value":"<code class=\"language-text\">rospack</code>"},{"depth":1,"value":"The Master (<code class=\"language-text\">roscore</code>)"},{"depth":1,"value":"Nodes"},{"depth":2,"value":"Start a node (<code class=\"language-text\">rosrun</code>)"},{"depth":2,"value":"Handle multiple nodes (<code class=\"language-text\">roslaunch</code>)"},{"depth":3,"value":"Launch File Structure (XML Tags and Arguments)"},{"depth":2,"value":"Commands for handling Nodes"},{"depth":1,"value":"Communication and Data Sharing"},{"depth":2,"value":"Topics and Messages"},{"depth":2,"value":"Parameters (<code class=\"language-text\">rosparam</code>)"},{"depth":2,"value":"Services"},{"depth":2,"value":"Topics, Messages and Services"},{"depth":2,"value":"Overview"},{"depth":1,"value":"Bag files"},{"depth":1,"value":"Workspaces and Packages"},{"depth":2,"value":"Creating a Workspaces"},{"depth":2,"value":"Creating a Package"},{"depth":2,"value":"Building a Workspace"},{"depth":2,"value":"Configuring build in a Workspace"},{"depth":3,"value":"Provide Arguments to CMake"},{"depth":2,"value":"Running a Node from Workspace"},{"depth":2,"value":"Cleaning the Workspace"},{"depth":1,"value":"Client Libraries"},{"depth":2,"value":"Node Handles"},{"depth":2,"value":"Time Library"},{"depth":1,"value":"URDF and Xacro"},{"depth":1,"value":"Checking for Problems"},{"depth":1,"value":"References"}]}},"pageContext":{"id":"04de9b0a-29a5-58c8-aca6-caad937f307c","previousPost":{"title":"vim","slug":"/blog/vim"},"nextPost":{"title":"Notes on std","slug":"/blog/std_chrono"},"dates":{"created":1555660355,"modified":1647509701}}},
    "staticQueryHashes": []}