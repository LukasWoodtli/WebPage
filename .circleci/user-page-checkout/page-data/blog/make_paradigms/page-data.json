{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/blog/make_paradigms",
    "result": {"data":{"site":{"siteMetadata":{"title":"My personal Website"}},"markdownRemark":{"id":"36b3738e-8d57-5651-9c30-4a3a0f497cb5","excerpt":"Make can be seen as a multi-paradigm programming language. It supports at least three paradigms: Declarative Imperative Functional Declarative Rules inâ€¦","html":"<p>Make can be seen as a multi-paradigm programming language.</p>\n<p>It supports at least three paradigms:</p>\n<ol>\n<li>Declarative</li>\n<li>Imperative</li>\n<li>Functional</li>\n</ol>\n<h1 id=\"declarative\">Declarative</h1>\n<p>Rules in makefiles are written in a declarative way:</p>\n<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre class=\"language-makefile\"><code class=\"language-makefile\"><span class=\"token target symbol\">%.o</span><span class=\"token punctuation\">:</span> %.c\n\tgcc -c <span class=\"token variable\">$&lt;</span> -o <span class=\"token variable\">$@</span></code></pre></div>\n<h1 id=\"imperative\">Imperative</h1>\n<p>Conditionals can be used as an imperative way to describe alternative actions in makefiles .</p>\n<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre class=\"language-makefile\"><code class=\"language-makefile\"><span class=\"token keyword\">ifeq</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>MSG<span class=\"token punctuation\">)</span>,<span class=\"token punctuation\">)</span>\n<span class=\"token variable\">$</span><span class=\"token punctuation\">(</span><span class=\"token function\">warning</span> <span class=\"token string\">\"No message provided\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">endif</span></code></pre></div>\n<h1 id=\"functional\">Functional</h1>\n<p>Functions in make are evaluated in a functional way:</p>\n<p>Example: Calculate the factorial with help of <code class=\"language-text\">bc</code></p>\n<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre class=\"language-makefile\"><code class=\"language-makefile\">fact<span class=\"token operator\">=</span><span class=\"token variable\">$</span><span class=\"token punctuation\">(</span><span class=\"token function\">if</span> <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span><span class=\"token function\">filter</span> 0, <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>, 1, <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span><span class=\"token function\">shell</span> echo <span class=\"token string\">\"$(1) * \\\n\t$(call fact, $(shell echo \"</span><span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>1<span class=\"token punctuation\">)</span> - 1<span class=\"token string\">\" | bc))\"</span> <span class=\"token operator\">|</span> bc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nresult<span class=\"token operator\">=</span><span class=\"token variable\">$</span><span class=\"token punctuation\">(</span><span class=\"token function\">call</span> fact, 4<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 24</span></code></pre></div>","frontmatter":{"title":"Make as multi-paradigm language","tags":["Build Tools","Computer Science"],"category":"Programming"},"headings":[{"depth":1,"value":"Declarative"},{"depth":1,"value":"Imperative"},{"depth":1,"value":"Functional"}]}},"pageContext":{"id":"36b3738e-8d57-5651-9c30-4a3a0f497cb5","previousPost":{"title":"Linking and Loading","slug":"/blog/linking_and_loading"},"nextPost":{"title":"Language Implementation Patterns","slug":"/blog/language_implementation_patterns"},"dates":{"created":1511943789,"modified":1647509701}}},
    "staticQueryHashes": []}