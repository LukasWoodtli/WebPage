{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/blog/intel_architecture",
    "result": {"data":{"site":{"siteMetadata":{"title":"My personal Website"}},"markdownRemark":{"id":"8424cc79-0079-57c6-8101-010ccf3b6897","excerpt":"On this page I write down some notes about the Intel architecture (x86). I learned most of it in school few years ago. Part of the notes here are for Intel…","html":"<p>On this page I write down some notes about the Intel architecture (x86). I learned most of it in <a href=\"http://www.vdf.ethz.ch/info/showDetails.asp?isbnNr=3255\">school</a> few years ago.</p>\n<p>Part of the notes here are for Intel 80186. But some sections are extend with information about modern <a href=\"http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html\">Intel processors</a> (<a href=\"https://en.wikipedia.org/wiki/IA-32\">IA-32</a>, <a href=\"https://en.wikipedia.org/wiki/X86-64\">x86-64</a>).</p>\n<p>Some information (especially about x86-64) is taken from <a href=\"http://www.egr.unlv.edu/~ed/x86.html\">x86-64 Assembly Language Programming with Ubuntu</a> by Ed Jorgensen.</p>\n<p>I’m trying to keep all code examples in <a href=\"http://www.nasm.us\">NASM</a> syntax.</p>\n<p>There is a good overview of the <a href=\"https://en.wikipedia.org/wiki/X86_instruction_listings\">x86 instructions</a> on Wikipedia.</p>\n<p>I keep some examples on <a href=\"https://github.com/LukasWoodtli/LinuxAssemblyProgramming\">GitHub</a>.</p>\n<p>[TOC]</p>\n<h1 id=\"general\">General</h1>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CPU Design</td>\n<td><a href=\"https://en.wikipedia.org/wiki/Complex_instruction_set_computing\">CISC</a></td>\n</tr>\n<tr>\n<td>Endianness</td>\n<td><a href=\"https://en.wikipedia.org/wiki/Endianness\">little</a></td>\n</tr>\n<tr>\n<td>Type</td>\n<td><a href=\"https://en.wikipedia.org/wiki/Register_memory_architecture\">Register-memory</a></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"operation-modes\">Operation Modes</h1>\n<table>\n<thead>\n<tr>\n<th>Mode</th>\n<th>Introduced in</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Real Mode</td>\n<td>8086</td>\n</tr>\n<tr>\n<td>Protected Mode</td>\n<td>80286</td>\n</tr>\n<tr>\n<td>Virtual 8086 mode</td>\n<td>80386</td>\n</tr>\n<tr>\n<td>Long Mode</td>\n<td>x86-64</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"memory-models\">Memory Models</h1>\n<p>The memory models define how data and code is manged in memory.</p>\n<p>Most information in this section is from\n<a href=\"http://www.agner.org/optimize/#manuals\">Calling conventions for different C++ compilers and operating systems</a>.</p>\n<p>There is also a good <a href=\"https://en.m.wikipedia.org/wiki/Intel_Memory_Model\">Wikipedia page</a>.</p>\n<p>The memory is byte addressable. Data is stored in little endian format. This means that the\nleast significant byte (LSB) is saved on the smallest memory address.</p>\n<h2 id=\"real-mode-memory-models-16-bit\">Real Mode Memory Models (16-bit)</h2>\n<p>This memory models are used in DOS for example.</p>\n<h3 id=\"tiny\">Tiny</h3>\n<p>Code and data in the same segment (64 kB). Code starts at\n<code class=\"language-text\">0x100</code> relative to segment.</p>\n<p>Executable has ending <em>.com</em> (instead of <em>.exe</em>).</p>\n<h3 id=\"small\">Small</h3>\n<p>One segment for code and one segment for data and stack.\nBoth segments have max. size of 64 kB.</p>\n<h3 id=\"medium\">Medium</h3>\n<p>The code can exceed 64 kB (multiple segments). <em>Far</em> function calls are needed.</p>\n<p>One segment (of max. 64 kB) for data and stack.</p>\n<h3 id=\"compact\">Compact</h3>\n<p>Code is limited to one segment (64 kB).</p>\n<p>Stack is limited to one segment (64 kB).</p>\n<p>Data can exceed 64 kB. <em>Far</em> pointers are needed for data.</p>\n<h3 id=\"large\">Large</h3>\n<p>Code can exceed 64 kB.</p>\n<p>Data can exceed 64 kB.</p>\n<p>Stack is limited to one segment (64 kB).</p>\n<p><em>Far</em> pointers are needed for code and data.</p>\n<h3 id=\"huge\">Huge</h3>\n<p>Same as large. A data structure can exceed 64 kB by\nmodifying segment and offset when a pointer is incremented.</p>\n<h2 id=\"protected-mode-memory-models-16-bit\">Protected Mode Memory Models (16-bit)</h2>\n<p>Win 3.x uses <em>Protected Mode</em> and similar memory models as in Real Mode.</p>\n<p>Segment registers contain <em>Segment Selectors</em> instead of physical\naddresses.</p>\n<p>To access data structures bigger than 64 kB the <em>8</em> has to be\nadded to the segment descriptor for each 64 kB increment.</p>\n<p>On a 32-bit processor a 32-bit offset is used.</p>\n<h2 id=\"32-bit-memory-models\">32-bit Memory Models</h2>\n<p>32-bit OS’s (Windows, Linux, BSD, Intel-Mac) use the <em>Flat</em> memory\nmodel. Application code uses only one (max. 2 GB) segment.</p>\n<p>Pointers are 32-bit <em>signed</em> addresses. Negative addresses are\nreseved for kernel and drivers.</p>\n<h2 id=\"64-bit-memory-models\">64-bit Memory Models</h2>\n<h3 id=\"windows\">Windows</h3>\n<p>The size of code and static data together is limited to 2 GB.\nSo it’s possible to use RIP-relative addresses.\nThe image base of an executable binary is usually below <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>31</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^{31}</annotation></semantics></math></span></span>.\nAbsolute 32-bit addresses are not often used.</p>\n<p>Stack and dynamically allocated data (data on heap) can exceed 2 GB.</p>\n<p>Pointers are usually 64 bits (sometimes 32 bits).</p>\n<p>Negative addresses are reserved for the kernel.</p>\n<h3 id=\"linux-and-bsd\">Linux and BSD</h3>\n<h4 id=\"small-1\">Small</h4>\n<p>Code an static data is limited to 2 GB and stored at addresses below <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>31</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^{31}</annotation></semantics></math></span></span>.\nThe compiler can use absolte signed 32-bit addresses.</p>\n<p>Stack and dynamically allocated data can exceed 2 GB.</p>\n<p>Pointers are 64 bits.</p>\n<p>Default memory model in Linux (x64) and BSD.</p>\n<h4 id=\"medium-1\">Medium</h4>\n<p>Static data bigger than the ‘large-data-threshold’ is stored in a\ndata section that can exceed 2 GB.</p>\n<p>Code and smaller static data are limited to addresses below\n<span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>31</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^{31}</annotation></semantics></math></span></span>.</p>\n<h4 id=\"large-1\">Large</h4>\n<p>Code and data can exceed 2 GB. Addresses are 64 bits.</p>\n<h4 id=\"kernel\">Kernel</h4>\n<p>Used to compile the kernel and device drivers.</p>\n<p>Addresses must be negative between <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>31</mn></msup></mrow><annotation encoding=\"application/x-tex\">-2^{31}</annotation></semantics></math></span></span> and <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span></span>.</p>\n<h3 id=\"os-x-darwin\">OS X (Darwin)</h3>\n<p>The default memory model of the intel-based darwin kernel\nlimits code and static data together to 2 GB.\nSo 32-bit RIP-relative addresses can be used.</p>\n<p>Code is loaded to addresses above <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>32</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^{32}</annotation></semantics></math></span></span> by default.\nAddresses below <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>32</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^{32}</annotation></semantics></math></span></span> are blocked (pagezero).</p>\n<p>Stack and dynamically allocated data can exceed 2 GB.</p>\n<p>Pointers are 64 bits. Pointer tables can use 32-bit\nsigned addresses relative to any reference point.</p>\n<p>Certain system functions can be accessed in the <em>commpage</em>.</p>\n<p>It’s possible to reduce the size of <em>pagezero</em> to place\ncode below <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>31</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^{31}</annotation></semantics></math></span></span> so that absolute 32-bit addresses can be used.</p>\n<h1 id=\"registers\">Registers</h1>\n<h2 id=\"general-purpose-registers\">General-Purpose Registers</h2>\n<table>\n<thead>\n<tr>\n<th>64-bit</th>\n<th>32-bit</th>\n<th>16-bit</th>\n<th>8-bit</th>\n<th>Purpose</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>rax</td>\n<td>eax</td>\n<td>ax</td>\n<td>al</td>\n<td>General-Purpose Register (GPR)</td>\n<td>Accumulator for <code class=\"language-text\">IN</code>/<code class=\"language-text\">OUT</code> (AX or AL). Can be used as 8-bit registers (AH/AL).</td>\n</tr>\n<tr>\n<td>rbx</td>\n<td>ebx</td>\n<td>bx</td>\n<td>bl</td>\n<td>General-Purpose Register (GPR)</td>\n<td>Base index (array). Can be used as 8-bit registers (BH/BL).</td>\n</tr>\n<tr>\n<td>rcx</td>\n<td>ecx</td>\n<td>cx</td>\n<td>cl</td>\n<td>General-Purpose Register (GPR)</td>\n<td>Only register that can be used for <code class=\"language-text\">LOOP</code>. Can be used as 8-bit registers (CH/CL).</td>\n</tr>\n<tr>\n<td>rdx</td>\n<td>edx</td>\n<td>dx</td>\n<td>dl</td>\n<td>General-Purpose Register (GPR)</td>\n<td>Needs to contain port address for <code class=\"language-text\">IN</code>/<code class=\"language-text\">OUT</code>. Extend precision of accumulator. Can be used as 8-bit registers (DH/DL).</td>\n</tr>\n<tr>\n<td>rdi</td>\n<td>edi</td>\n<td>di</td>\n<td>dil</td>\n<td>Destination Index</td>\n<td>Destination for string operations.</td>\n</tr>\n<tr>\n<td>rsi</td>\n<td>esi</td>\n<td>si</td>\n<td>sil</td>\n<td>Source Index</td>\n<td>Source for string operations.</td>\n</tr>\n<tr>\n<td>rbp</td>\n<td>ebp</td>\n<td>bp</td>\n<td>bpl</td>\n<td>Base Pointer</td>\n<td>Often used as Frame Pointer (pointing to current stack frame).</td>\n</tr>\n<tr>\n<td>rsp</td>\n<td>esp</td>\n<td>sp</td>\n<td>spl</td>\n<td>Stack Pointer</td>\n<td>Points to the top of the stack.</td>\n</tr>\n<tr>\n<td>r8-r15</td>\n<td>r8d-r15d</td>\n<td>r8w-r15w</td>\n<td>r8w-r15w</td>\n<td>GPRs</td>\n<td>x86-64 adds new GPRs.</td>\n</tr>\n</tbody>\n</table>\n<p>The first four <em>GPRs</em> can be accessed as two 8 bit registers. i. e:\n<em>bx’s</em> high byte can be accessed as <em>bh</em> and low byte as <em>bl</em>.</p>\n<h2 id=\"segment-registers\">Segment Registers</h2>\n<p>These registers are used in real mode and protected mode for memory segmentation.</p>\n<table>\n<thead>\n<tr>\n<th>Register</th>\n<th>Purpose</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>cs</td>\n<td>Code Segment</td>\n</tr>\n<tr>\n<td>ds</td>\n<td>Data Segment</td>\n</tr>\n<tr>\n<td>ss</td>\n<td>Stack Segment</td>\n</tr>\n<tr>\n<td>es</td>\n<td>Extra Segment</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"special-registers\">Special Registers</h2>\n<table>\n<thead>\n<tr>\n<th>Register</th>\n<th>Purpose</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>rFlags</td>\n<td>Status Register</td>\n<td>Carry Flag, Overflow Flag, Zero flag…</td>\n</tr>\n<tr>\n<td>rip</td>\n<td>Instruction Pointer</td>\n<td>Points to the <em>next</em> instruction (cannot be directly accessed)</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"values-after-reset\">Values after Reset</h2>\n<table>\n<thead>\n<tr>\n<th>Register</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>IP</td>\n<td><code class=\"language-text\">0x0000</code></td>\n</tr>\n<tr>\n<td>CS</td>\n<td><code class=\"language-text\">0xffff</code></td>\n</tr>\n<tr>\n<td>DS</td>\n<td><code class=\"language-text\">0x0000</code></td>\n</tr>\n<tr>\n<td>ES</td>\n<td><code class=\"language-text\">0x0000</code></td>\n</tr>\n<tr>\n<td>SS</td>\n<td><code class=\"language-text\">0x0000</code></td>\n</tr>\n</tbody>\n</table>\n<p>All other registers have a random value after reset.</p>\n<h2 id=\"xmm-registes\">XMM Registes</h2>\n<p>There are registers for 64-bit and 32-bit floating point operations, for\nsingle Instruction Multiple Data (SIMD) and SSE.</p>\n<p>There are 16 XMM registers with a size of 128 bits.\nThey are called xmm0-xmm15.</p>\n<h2 id=\"flags-register\">Flags Register</h2>\n<table>\n<thead>\n<tr>\n<th>Bit</th>\n<th>Mnemonic</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>15</td>\n<td>-</td>\n<td>Reserved</td>\n</tr>\n<tr>\n<td>14</td>\n<td>NT</td>\n<td>Nested Task Flag (286+)</td>\n</tr>\n<tr>\n<td>13 and 12</td>\n<td>IOPL</td>\n<td>I/O Privilege Level (286+)</td>\n</tr>\n<tr>\n<td>11</td>\n<td>OF</td>\n<td>Overflow Flag</td>\n</tr>\n<tr>\n<td>10</td>\n<td>DF</td>\n<td>Direction Flag</td>\n</tr>\n<tr>\n<td>9</td>\n<td>IF</td>\n<td>Interrupt Enable Flag</td>\n</tr>\n<tr>\n<td>8</td>\n<td>TF</td>\n<td>Trap Flag (single step)</td>\n</tr>\n<tr>\n<td>7</td>\n<td>SF</td>\n<td>Sign Flag</td>\n</tr>\n<tr>\n<td>6</td>\n<td>ZF</td>\n<td>Zero Flag</td>\n</tr>\n<tr>\n<td>5</td>\n<td>-</td>\n<td>Reserved</td>\n</tr>\n<tr>\n<td>4</td>\n<td>AF</td>\n<td>Adjust Flag</td>\n</tr>\n<tr>\n<td>3</td>\n<td>-</td>\n<td>Reserved</td>\n</tr>\n<tr>\n<td>2</td>\n<td>PF</td>\n<td>Parity Flag</td>\n</tr>\n<tr>\n<td>1</td>\n<td>-</td>\n<td>Reserved</td>\n</tr>\n<tr>\n<td>0</td>\n<td>CF</td>\n<td>Carry Flag</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"segmentation\">Segmentation</h1>\n<p>To allow access to 20-bit addresses with 16-bit registers the 8086 uses segmentation.</p>\n<p><span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mi>h</mi><mi>y</mi><mi>s</mi><mi>i</mi><mi>c</mi><mi>a</mi><mi>l</mi><mi mathvariant=\"normal\">_</mi><mi>a</mi><mi>d</mi><mi>d</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mo>=</mo><mi>s</mi><mi>e</mi><mi>g</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi mathvariant=\"normal\">_</mi><mi>r</mi><mi>e</mi><mi>g</mi><mi>i</mi><mi>s</mi><mi>t</mi><mi>e</mi><mi>r</mi><mo>×</mo><mn>1</mn><msub><mn>0</mn><mrow><mi>h</mi><mi>e</mi><mi>x</mi></mrow></msub><mo>+</mo><mi>o</mi><mi>f</mi><mi>f</mi><mi>s</mi><mi>e</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">physical\\_ address = segment\\_ register \\times 10_{hex} + offset</annotation></semantics></math></span></span></p>\n<ul>\n<li><span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>×</mo><mn>1</mn><msub><mn>0</mn><mrow><mi>h</mi><mi>e</mi><mi>x</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\times 10_{hex}</annotation></semantics></math></span></span> means a 4-bit shift to left</li>\n<li>Each addressable segment is 64 kB big.</li>\n<li>20-bit address bus: Total <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>20</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^{20}</annotation></semantics></math></span></span> bytes addressable (1’048’576 bytes = 1 MB).</li>\n<li>16-bit offset: <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>16</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^{16}</annotation></semantics></math></span></span> bytes addressable (65’536 bytes = 64 kB) per segment.</li>\n<li>Needed segments: <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>20</mn></msup><mi mathvariant=\"normal\">/</mi><msup><mn>2</mn><mn>16</mn></msup><mo>=</mo><msup><mn>2</mn><mn>4</mn></msup><mo>=</mo><mn>16</mn></mrow><annotation encoding=\"application/x-tex\">2^{20}/2^{16} = 2^4 = 16</annotation></semantics></math></span></span> segments needed to access complete address space.</li>\n<li>Segments can overlap or there can be gaps between them.</li>\n</ul>\n<h1 id=\"addressing\">Addressing</h1>\n<p>Intel processors have 5 different addressing modes.</p>\n<h2 id=\"immediate\">Immediate</h2>\n<p>The operand (constant) is given with the command. i.e:</p>\n<pre>MOV CL, <strong>42</strong>; move the value 42 to register CL</pre>\n<h2 id=\"implicit\">Implicit</h2>\n<p>Some commands work always with the same register/address. i.e:</p>\n<p><code class=\"language-text\">PUSH</code>/<code class=\"language-text\">POP</code> work always with SP register.</p>\n<h2 id=\"register\">Register</h2>\n<p>The operand is held in a register</p>\n<pre>INC <strong>CH</strong>; Increment value in CH register</pre>\n<h2 id=\"direct\">Direct</h2>\n<p>The address of the operand value comes directly after the command. i. e:</p>\n<pre>MOV CX, <strong>counter</strong>; counter holds the address of the value</pre>\n<h2 id=\"register-indirect\">Register-Indirect</h2>\n<p>The operand is given indirectly by one or two registers. A segment register and a constant offset value can be supplied.</p>\n<p>The calculated value acts as a pointer (address to a memory location).</p>\n<p>i.e:</p>\n<pre>MOV <strong>[BX + DI]</strong>, CH; calculate the operand with the values from BX and DI</pre>\n<h3 id=\"address\">Address</h3>\n<h4 id=\"real-mode\">Real Mode</h4>\n<p>To calculate an address in processors with segmentation the following scheme is used:</p>\n<p><span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mi>f</mi><mi>f</mi><mi>s</mi><mi>e</mi><mi>t</mi><mo>:</mo><mo>=</mo><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.16em\" columnalign=\"center\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mo lspace=\"0em\" rspace=\"0em\">−</mo></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>C</mi><mi>S</mi><mo>:</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>D</mi><mi>S</mi><mo>:</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>S</mi><mi>S</mi><mo>:</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>E</mi><mi>S</mi><mo>:</mo></mrow></mstyle></mtd></mtr></mtable><mo fence=\"true\">}</mo></mrow><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.16em\" columnalign=\"center\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mo lspace=\"0em\" rspace=\"0em\">−</mo></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>B</mi><mi>X</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>B</mi><mi>P</mi></mrow></mstyle></mtd></mtr></mtable><mo fence=\"true\">}</mo></mrow><mo>+</mo><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.16em\" columnalign=\"center\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mo lspace=\"0em\" rspace=\"0em\">−</mo></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>S</mi><mi>I</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>D</mi><mi>I</mi></mrow></mstyle></mtd></mtr></mtable><mo fence=\"true\">}</mo></mrow><mo>+</mo><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.16em\" columnalign=\"center\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mo lspace=\"0em\" rspace=\"0em\">−</mo></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>d</mi><mi>i</mi><mi>s</mi><mi>p</mi><mi>l</mi><mi>a</mi><mi>c</mi><mi>e</mi><mi>m</mi><mi>e</mi><mi>n</mi><msub><mi>t</mi><mn>8</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>d</mi><mi>i</mi><mi>s</mi><mi>p</mi><mi>l</mi><mi>a</mi><mi>c</mi><mi>e</mi><mi>m</mi><mi>e</mi><mi>n</mi><msub><mi>t</mi><mn>16</mn></msub></mrow></mstyle></mtd></mtr></mtable><mo fence=\"true\">}</mo></mrow></mrow><annotation encoding=\"application/x-tex\">Offset := \\begin{Bmatrix}-\\\\CS:\\\\DS:\\\\SS:\\\\ES:\\end{Bmatrix}\\begin{Bmatrix}-\\\\BX\\\\BP\\end{Bmatrix} +\\begin{Bmatrix}-\\\\SI\\\\DI\\end{Bmatrix} + \\begin{Bmatrix}-\\\\displacement_8\\\\displacement_{16}\\end{Bmatrix}</annotation></semantics></math></span></span></p>\n<p><span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo></mrow><annotation encoding=\"application/x-tex\">-</annotation></semantics></math></span></span> means that this element is not used.</p>\n<p>The three possible address parts are:</p>\n<ol>\n<li>Basis Register (BX or BP): Contains usually the start address of a data structure. A segment prefix can be given.</li>\n<li>Index Register (SI or DI): Can contain an index (i.e Array index) that can be calculated at run-time. It’s 16-bit unsigned.</li>\n<li>Displacement: A <em>signed</em> constant value (8-bit or 16-bit) that gives an offset.</li>\n</ol>\n<p>This addressing scheme gives a total of 27 addressing combinations. But only <em>24</em> combinations are allowed. The following three are <strong>not allowed</strong>:</p>\n<ul>\n<li>No address at all: <pre><strike>MOV AX, [];</strike></pre> or <pre><strike>MOV AX, ;</strike></pre></li>\n<li>Only 8-bit displacement: Only memory 0-255 could be addressed.</li>\n<li>Only BP: BP points to stack. No practical use. <pre><strike>MOV AX, [BP];</strike></pre></li>\n</ul>\n<h4 id=\"segment-prefix\">Segment Prefix</h4>\n<p>A segment prefix (<strong>CS:</strong>, <strong>DS:</strong>, <strong>ES:</strong> or <strong>SS:</strong>) defines which segment register will be used for calculating the address.\nDefault for most registers is DS. But for BP the default is SS.</p>\n<h4 id=\"x86-64\">x86-64</h4>\n<p>The general for calculating a memory address is:</p>\n<p><span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>b</mi><mi>a</mi><mi>s</mi><mi>e</mi><mi>A</mi><mi>d</mi><mi>d</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mo>+</mo><mo stretchy=\"false\">(</mo><mi>i</mi><mi>n</mi><mi>d</mi><mi>e</mi><mi>x</mi><mi>R</mi><mi>e</mi><mi>g</mi><mi>i</mi><mi>s</mi><mi>t</mi><mi>e</mi><mi>r</mi><mo>⋅</mo><mi>s</mi><mi>c</mi><mi>a</mi><mi>l</mi><mi>e</mi><mi>V</mi><mi>a</mi><mi>l</mi><mi>u</mi><mi>e</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>d</mi><mi>i</mi><mi>s</mi><mi>p</mi><mi>l</mi><mi>a</mi><mi>c</mi><mi>e</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[baseAddress + (indexRegister \\cdot scaleValue) + displacement]</annotation></semantics></math></span></span></p>\n<p>Where:</p>\n<ul>\n<li><em>baseAddress</em>: any GP register or variable name</li>\n<li><em>indexRegister</em>: any GP register</li>\n<li><em>scaleValue</em>: immediate value of <em>1</em>, <em>2</em>, <em>4</em> or <em>8</em> (<em>1</em> does nothing)</li>\n<li><em>displacement</em>: 8-bit or 32-bit constant</li>\n</ul>\n<p>Examples:</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">mov <span class=\"token register variable\">eax</span>, dword <span class=\"token operator\">[</span>var<span class=\"token operator\">]</span>\nmov <span class=\"token register variable\">rax</span>, qword <span class=\"token operator\">[</span><span class=\"token register variable\">rbx</span><span class=\"token operator\">+</span><span class=\"token register variable\">rsi</span><span class=\"token operator\">]</span>\nmov <span class=\"token register variable\">ax</span>, word <span class=\"token operator\">[</span>lst<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token operator\">]</span>\nmov <span class=\"token register variable\">bx</span>, word <span class=\"token operator\">[</span>lst<span class=\"token operator\">+</span><span class=\"token register variable\">rdx</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token operator\">]</span>\nmov <span class=\"token register variable\">rcx</span>, qword <span class=\"token operator\">[</span>lst<span class=\"token operator\">+</span>(<span class=\"token register variable\">rsi</span><span class=\"token operator\">*</span><span class=\"token number\">8</span>)<span class=\"token operator\">]</span>\nmov <span class=\"token register variable\">al</span>, byte <span class=\"token operator\">[</span>buffer<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token register variable\">rcx</span><span class=\"token operator\">]</span>\nmov <span class=\"token register variable\">eax</span>, dword <span class=\"token operator\">[</span><span class=\"token register variable\">rbx</span><span class=\"token operator\">+</span>(<span class=\"token register variable\">rsi</span><span class=\"token operator\">*</span><span class=\"token number\">4</span>)<span class=\"token operator\">+</span><span class=\"token number\">16</span><span class=\"token operator\">]</span></code></pre></div>\n<p>Because addresses are always of 64-bit size (<code class=\"language-text\">qword</code>), a 64-bit\nregister is needed for memory addressing. Even when accessing\nsmaller sized values.</p>\n<h4 id=\"operand-size-word-dword\">Operand Size (<code class=\"language-text\">WORD</code>, <code class=\"language-text\">DWORD</code>…)</h4>\n<p>In some cases the size of an operand can be given (for some cases it is even mandatory). Size types:</p>\n<p><code class=\"language-text\">BYTE</code>, <code class=\"language-text\">WORD</code>, <code class=\"language-text\">DWORD</code>, <code class=\"language-text\">QWORD</code>, <code class=\"language-text\">TBYTE</code>, <code class=\"language-text\">FAR</code>…</p>\n<p>Even if the operand size is not mandatory it’s good programming\npractice to incule it.</p>\n<h4 id=\"examples\">Examples</h4>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">MOV <span class=\"token register variable\">DX</span>, <span class=\"token operator\">[</span><span class=\"token register variable\">BX</span><span class=\"token operator\">]</span><span class=\"token comment\">;</span>\nMOV <span class=\"token register variable\">AL</span>, <span class=\"token operator\">[</span><span class=\"token register variable\">BX</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token operator\">]</span><span class=\"token comment\">;</span>\nMOV <span class=\"token register variable\">CX</span>, <span class=\"token operator\">[</span><span class=\"token register variable\">CS</span>:<span class=\"token register variable\">BX</span><span class=\"token operator\">+</span><span class=\"token register variable\">SI</span><span class=\"token operator\">]</span><span class=\"token comment\">;</span>\nMOV <span class=\"token register variable\">ES</span>, <span class=\"token operator\">[</span><span class=\"token register variable\">BX</span><span class=\"token operator\">+</span><span class=\"token register variable\">DI</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token operator\">]</span><span class=\"token comment\">;</span>\nMOV WORD <span class=\"token operator\">[</span><span class=\"token register variable\">ES</span>:<span class=\"token register variable\">BX</span><span class=\"token operator\">+</span><span class=\"token register variable\">DI</span><span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token operator\">]</span>, <span class=\"token register variable\">AX</span><span class=\"token comment\">;</span></code></pre></div>\n<h2 id=\"addressing-memory\">Addressing Memory</h2>\n<p>For addressing the memory the immediate, direct and indirect method can be used.</p>\n<p>A variable name without brackets is used to get the address of the variable.\nWith brackets the value stored in the variable is taken.</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">mov <span class=\"token register variable\">rax</span>, qword <span class=\"token operator\">[</span>var1<span class=\"token operator\">]</span> <span class=\"token comment\">; value of var1 in rax</span>\nmov <span class=\"token register variable\">rax</span>, var1         <span class=\"token comment\">; address of var1 in rax</span></code></pre></div>\n<h1 id=\"data-transfer-commands\">Data Transfer Commands</h1>\n<h2 id=\"move-command-mov\">Move Command (<code class=\"language-text\">MOV</code>)</h2>\n<p>Moves (copies) a value from a source to a destination.</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">MOV dest, src</code></pre></div>\n<ul>\n<li><code class=\"language-text\">dest</code> can be a memory variable or a register (but not CS or IP) and not an immediate.</li>\n<li><code class=\"language-text\">src</code> can be a memory variable, a register or a constant.</li>\n<li>Only one memory operand can be used. Then the other one needs to be a register or a constant.</li>\n<li>destination and source operands must be of the same size.</li>\n</ul>\n<blockquote>\n<p>For <em>double-word</em> destination and source operands the upper part of the <em>quad-word</em> destination register is set to 0!</p>\n</blockquote>\n<p>Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">qFirstVal  dq  <span class=\"token number\">0xffffffffffffffff</span> <span class=\"token comment\">; inital 64-bit value</span>\ndVar32     dd  <span class=\"token number\">0xabcdefab</span>         <span class=\"token comment\">; 32-bit value</span>\nwVar16     dw  <span class=\"token number\">0xbdbd</span>             <span class=\"token comment\">; 16-bit value</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">; 16-bit example\nmov     rax, qword [qFirstVal]    ; initialize rax\nmov     ax, word [wVar16]         ; write lowest 16 bit\n; now rax has value 0xffffffffffffbdbd: the upper part of the register is kept\n\n; 32-bit example\nmov     rax, qword [qFirstVal]    ; initialize rax\nmov     eax, dword [dVar32]       ; write lowest 32 bit\n; now rax has value 0x00000000abcdefab: the upper part of the register is cleared!</code></pre></div>\n<h2 id=\"exchange-command-xchg\">Exchange Command (<code class=\"language-text\">XCHG</code>)</h2>\n<p>Exchanges the values of the two operands (memory/registers).</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">XCHG op1, op2</code></pre></div>\n<ul>\n<li>Addressing memory/register is same as with <code class=\"language-text\">MOV</code>.</li>\n<li>Segment Register and Immediate addressing is not possible.</li>\n</ul>\n<h2 id=\"input-output-commands-inout\">Input-/Output Commands (<code class=\"language-text\">IN</code>/<code class=\"language-text\">OUT</code>)</h2>\n<p>For reading and writing data to/from ports</p>\n<p>Input/Output can only be done with accumulator register (AX/AL).</p>\n<p>Port address needs to be written to DX before calling the IN-/OUT-Command. As special case a 8-bit port address can be given directly.</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">IN <span class=\"token register variable\">AL</span>, <span class=\"token register variable\">DX</span><span class=\"token comment\">;</span>\nOUT <span class=\"token register variable\">DX</span>, <span class=\"token register variable\">AX</span><span class=\"token comment\">;</span>\nIN <span class=\"token register variable\">AX</span>, <span class=\"token number\">42h</span><span class=\"token comment\">;</span>\nOUT <span class=\"token number\">16h</span>, <span class=\"token register variable\">AL</span><span class=\"token comment\">;</span></code></pre></div>\n<p>It’s not possible communicate directly between memory and ports. For this a DMA (Direct Memory Access) Hardware would be needed.</p>\n<h2 id=\"load-effective-address-lea\">Load Effective Address (<code class=\"language-text\">LEA</code>)</h2>\n<p>Loads an address:</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">lea   <span class=\"token operator\">&lt;</span>reg64<span class=\"token operator\">></span>, <span class=\"token operator\">&lt;</span>mem<span class=\"token operator\">></span> <span class=\"token comment\">; address of &lt;mem> in reg64</span></code></pre></div>\n<p>Examples:</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">lea   <span class=\"token register variable\">rcx</span>, byte <span class=\"token operator\">[</span>bvar<span class=\"token operator\">]</span>\nlea   <span class=\"token register variable\">rsi</span>, dword <span class=\"token operator\">[</span>dVar<span class=\"token operator\">]</span></code></pre></div>\n<h1 id=\"conversion-instructions\">Conversion Instructions</h1>\n<h2 id=\"narrowing-conversions\">Narrowing Conversions</h2>\n<ul>\n<li>No special instructions are needed</li>\n<li><code class=\"language-text\">mov</code> instruction is used</li>\n<li>Programmer is responsible that narrowing conversions are sane</li>\n<li>The instruction will just strip upper part of register or variable</li>\n</ul>\n<h2 id=\"widening-conversions\">Widening Conversions</h2>\n<p>Upper-order bit (sign) must be set based on original value</p>\n<h3 id=\"unsigned-conversions-movzx\">Unsigned Conversions (<code class=\"language-text\">MOVZX</code>)</h3>\n<ul>\n<li>Upper part of register or memory location must be set to zero</li>\n<li>Instruction <code class=\"language-text\">movzx</code> can be used</li>\n<li><code class=\"language-text\">movzx</code> does not allow a quad-word destination with double-word source operand\n<ul>\n<li>A <code class=\"language-text\">mov</code> with a double-word destination register and with double-word source operand will zero out the upper double-word of the quad-word destination register (s.a. <code class=\"language-text\">MOV</code>)</li>\n</ul>\n</li>\n<li>Only one memory operand is allowed</li>\n<li>Destination can not be an immediate</li>\n</ul>\n<h3 id=\"signed-conversions-cbw-cwd-\">Signed Conversions (<code class=\"language-text\">CBW</code>, <code class=\"language-text\">CWD</code>, …)</h3>\n<ul>\n<li>Widening conversion for singed values need adjustment of the upper order bits</li>\n<li>This is needed to keep the</li>\n</ul>\n<p><a href=\"https://en.wikipedia.org/wiki/Two%27s_complement\">two’s complement</a> format</p>\n<ul>\n<li>The upper order bits must be set to 0’s or 1’s depending if original value was negative or positive</li>\n<li>There are general instructions: <code class=\"language-text\">movsx</code> and <code class=\"language-text\">movsxd</code>\n<ul>\n<li>Only one operand can be memory</li>\n<li>Destination can not be immediate</li>\n<li><code class=\"language-text\">movsxd</code> required for 32-bit to 64-bit extension</li>\n</ul>\n</li>\n<li>There are special instructions that convert values in a register : <em>convert byte to word</em> <code class=\"language-text\">cbw</code>, <em>convert word to double-word</em> <code class=\"language-text\">cwd</code>, …\n<ul>\n<li>These work only on the <code class=\"language-text\">A</code> register sometimes using <code class=\"language-text\">D</code> register for result</li>\n</ul>\n</li>\n</ul>\n<p>Instructions <code class=\"language-text\">movsx</code> and <code class=\"language-text\">movsxd</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">::nasm\nmovsx &lt;dest>, &lt;src>\nmovsxd &lt;dest>, &lt;src></code></pre></div>\n<p>Special instructions:</p>\n<table>\n<thead>\n<tr>\n<th>Instruction</th>\n<th>Source Size</th>\n<th>Implicit Source</th>\n<th>Destination Size</th>\n<th>Implicit destination</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">cbw</code></td>\n<td>byte</td>\n<td><code class=\"language-text\">al</code></td>\n<td>word</td>\n<td><code class=\"language-text\">ax</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">cwd</code></td>\n<td>word</td>\n<td><code class=\"language-text\">ax</code></td>\n<td>double-word</td>\n<td><code class=\"language-text\">dx:ax</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">cwde</code></td>\n<td>word</td>\n<td><code class=\"language-text\">ax</code></td>\n<td>double-word</td>\n<td><code class=\"language-text\">eax</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">cdq</code></td>\n<td>double-word</td>\n<td><code class=\"language-text\">eax</code></td>\n<td>quadword</td>\n<td><code class=\"language-text\">edx:eax</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">cdqe</code></td>\n<td>double-word</td>\n<td><code class=\"language-text\">eax</code></td>\n<td>quad-word</td>\n<td><code class=\"language-text\">rax</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">cqo</code></td>\n<td>quadword</td>\n<td><code class=\"language-text\">rax</code></td>\n<td>double-quadword</td>\n<td><code class=\"language-text\">rdx:rax</code></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"arithmetic-commands\">Arithmetic Commands</h1>\n<ul>\n<li>The result of arithmetic commands is written to the first operand (the original value is lost).</li>\n<li>Both operands (of binary arithmetic commands) need to be of same size.</li>\n<li>Only one operand is allowed to be a memory operand.</li>\n</ul>\n<h2 id=\"addition-add\">Addition (<code class=\"language-text\">ADD</code>)</h2>\n<p>Adds the two operands and writes the result into the first one.</p>\n<ul>\n<li>The first operand can not be a constant (immediate)</li>\n<li>Both operands need to be of same size</li>\n<li>Only one operand can be memory</li>\n</ul>\n<h3 id=\"affected-flags\">Affected Flags</h3>\n<ul>\n<li>Carry: with unsigned operands</li>\n<li>Overflow: with signed operands</li>\n<li>Zero: if result is zero</li>\n<li>Sign: if signed result is negative</li>\n<li>Parity: if parity is even</li>\n</ul>\n<h2 id=\"addition-with-carry-adc\">Addition with Carry (<code class=\"language-text\">ADC</code>)</h2>\n<p>Adds the two operands and the carry flag. The result is written into the first operand.</p>\n<ul>\n<li>The first operand can not be a constant (immediate)</li>\n<li>Both operands need to be of same size</li>\n<li>Only one operand can be memory</li>\n<li>The <code class=\"language-text\">adc</code> instruction should directly follow an inital <code class=\"language-text\">add</code> instruction otherwise the carry bit can be lost</li>\n</ul>\n<blockquote>\n<p>Addition of big signed operands can be splitted into several <code class=\"language-text\">ADC</code> commands.</p>\n</blockquote>\n<h3 id=\"affected-flags-1\">Affected Flags</h3>\n<ul>\n<li>Carry: with unsigned operands</li>\n<li>Overflow: with signed operands</li>\n<li>Zero: if result is zero</li>\n<li>Sign: if signed result is negative</li>\n<li>Parity: if parity is even</li>\n</ul>\n<h2 id=\"increment-inc\">Increment (<code class=\"language-text\">INC</code>)</h2>\n<p>Adds one to the operand. The result is saved in the given operand.</p>\n<ul>\n<li>The operand can not be an immediate</li>\n</ul>\n<h3 id=\"affected-flags-2\">Affected Flags</h3>\n<ul>\n<li>Overflow: with signed operands</li>\n<li>Zero: if result is zero</li>\n<li>Sign: if signed result is negative</li>\n<li>Parity: if parity is even</li>\n</ul>\n<blockquote>\n<p>The carry-flag is not affected! An overflow can be recognized with the zero-flag.</p>\n</blockquote>\n<blockquote>\n<p><code class=\"language-text\">INC</code> can be used to increment a control variable in a loop without affecting the carry-flag.</p>\n</blockquote>\n<h2 id=\"subtraction-sub\">Subtraction (<code class=\"language-text\">SUB</code>)</h2>\n<p>Subtracts the second operand from the first. The result is written into the first operand.</p>\n<ul>\n<li>The first operand can not be a constant (immediate)</li>\n<li>Only one operand can be memory</li>\n<li>Subtraction work same for signed and unsigned data</li>\n</ul>\n<h3 id=\"affected-flags-3\">Affected Flags</h3>\n<ul>\n<li>Carry: with unsigned operands</li>\n<li>Overflow: with signed operands</li>\n<li>Zero: if result is zero</li>\n<li>Sign: if signed result is negative</li>\n<li>Parity: if parity is even</li>\n</ul>\n<h2 id=\"subtraction-with-borrow-sbb\">Subtraction with Borrow (<code class=\"language-text\">SBB</code>)</h2>\n<p>Subtracts the second operand and the carry-flag (borrow) from the first operand. The result is written into the first operand. The first operand can not be a constant.</p>\n<h3 id=\"affected-flags-4\">Affected Flags</h3>\n<ul>\n<li>Carry: with unsigned operands</li>\n<li>Overflow: with signed operands</li>\n<li>Zero: if result is zero</li>\n<li>Sign: if signed result is negative</li>\n<li>Parity: if parity is even</li>\n</ul>\n<blockquote>\n<p>Subtraction of big signed operands can be splitted into several <code class=\"language-text\">SBB</code> commands.</p>\n</blockquote>\n<h2 id=\"decrement-dec\">Decrement (<code class=\"language-text\">DEC</code>)</h2>\n<p>Subtracts one from the given operand.</p>\n<h3 id=\"affected-flags-5\">Affected Flags</h3>\n<ul>\n<li>Overflow: with signed operands</li>\n<li>Zero: if result is zero</li>\n<li>Sign: if signed result is negative</li>\n<li>Parity: if parity is even</li>\n</ul>\n<blockquote>\n<p>The carry-flag is not affected! An overflow can be only recognized with checking the result for 0xFF.</p>\n</blockquote>\n<blockquote>\n<p><code class=\"language-text\">DEC</code> can be used to decrement a control variable in a loop without affecting the carry-flag.</p>\n</blockquote>\n<h2 id=\"negate-a-signed-number-neg\">Negate a signed Number (<code class=\"language-text\">NEG</code>)</h2>\n<p>Changes a negative into a positive number and vice versa. It’s basically subtracting the operand from zero (0).</p>\n<h3 id=\"affected-flags-6\">Affected Flags</h3>\n<ul>\n<li>Carry: set if operand wasn’t zero (not very useful)</li>\n<li>Overflow: if no positive representation exist (operand was biggest negative number)</li>\n<li>Zero: if result is zero</li>\n<li>Sign: if signed result is negative</li>\n<li>Parity: if parity is even</li>\n</ul>\n<h2 id=\"multiplication-mul-imul\">Multiplication (<code class=\"language-text\">MUL</code>, <code class=\"language-text\">IMUL</code>)</h2>\n<p>Multiplicates unsigned (<code class=\"language-text\">MUL</code>) or signed (<code class=\"language-text\">IMUL</code>) numbers.</p>\n<p>There is a explicit operand given after the command and an implicit operand in the A (AL, AX, ..) register.</p>\n<p>The explicit operand sets the size and defines the used implicit register. It can be either a register or a memory location but not\nan immediate.</p>\n<p>The result is always twice as big as the operands. It’s either the accumulator (<em>AX</em>)\nor the <strong>extended accumulator</strong> (<em>DX/AX</em>).</p>\n<p><img src=\"/687f16331c5b3674db8e97e5146ade6b/intel_mul.svg\" alt=\"The x86 MUL/IMUL commands\"></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">::nasm\nMUL 0x0 ; Use AL as implicit operand. Result is saved in AX.\nIMUL BX ; Use AX as implicit operand. Result is saved in DX/AX.</code></pre></div>\n<p>Sizes (<code class=\"language-text\">mul</code>):</p>\n<table>\n<thead>\n<tr>\n<th>Size</th>\n<th>Registers</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Byte</td>\n<td><code class=\"language-text\">ax = al * &lt;src></code></td>\n</tr>\n<tr>\n<td>Word</td>\n<td><code class=\"language-text\">dx:ax = ax * &lt;src></code></td>\n</tr>\n<tr>\n<td>Double-word</td>\n<td><code class=\"language-text\">edx:eax = eax * &lt;src></code></td>\n</tr>\n<tr>\n<td>Quad-word</td>\n<td><code class=\"language-text\">rdx:rax = rax * &lt;src></code></td>\n</tr>\n</tbody>\n</table>\n<p><code class=\"language-text\">imul</code> allows more operands:</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">imul <span class=\"token operator\">&lt;</span>source<span class=\"token operator\">></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">imul &lt;dest>, &lt;src/imm>\nimul &lt;dest>, &lt;src>, &lt;imm></code></pre></div>\n<p>For single operand (same as <code class=\"language-text\">mul</code>):</p>\n<table>\n<thead>\n<tr>\n<th>Size</th>\n<th>Registers</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Byte</td>\n<td><code class=\"language-text\">ax = al * &lt;src></code></td>\n</tr>\n<tr>\n<td>Word</td>\n<td><code class=\"language-text\">dx:ax = ax * &lt;src></code></td>\n</tr>\n<tr>\n<td>Double-word</td>\n<td><code class=\"language-text\">edx:eax = eax * &lt;src></code></td>\n</tr>\n<tr>\n<td>Quad-word</td>\n<td><code class=\"language-text\">rdx:rax = rax * &lt;src></code></td>\n</tr>\n</tbody>\n</table>\n<p>Note: <code class=\"language-text\">&lt;src></code> operand can not be immediate</p>\n<p>For two operands:</p>\n<ul>\n<li><code class=\"language-text\">&lt;reg16> = &lt;reg16> * &lt;op16/imm></code></li>\n<li><code class=\"language-text\">&lt;reg32> = &lt;reg32> * &lt;op32/imm></code></li>\n<li><code class=\"language-text\">&lt;reg64> = &lt;reg64> * &lt;op64/imm></code></li>\n</ul>\n<p>For three operands:</p>\n<ul>\n<li><code class=\"language-text\">&lt;reg16> = &lt;op16> * &lt;imm></code></li>\n<li><code class=\"language-text\">&lt;reg32> = &lt;op32> * &lt;imm></code></li>\n<li><code class=\"language-text\">&lt;reg64> = &lt;op64> * &lt;imm></code></li>\n</ul>\n<h3 id=\"affected-flags-7\">Affected Flags</h3>\n<ul>\n<li>Carry: set if operand extended accumulator is needed for saving result (<em>DX/AX</em>)</li>\n<li>Zero: changed (undefined)</li>\n<li>Sign: changed (undefined)</li>\n<li>Parity: changed (undefined)</li>\n</ul>\n<blockquote>\n<p>The 8086 can not multiply with constants (immediate).</p>\n</blockquote>\n<h2 id=\"division-div-idiv\">Division (<code class=\"language-text\">DIV</code>, <code class=\"language-text\">IDIV</code>)</h2>\n<p>There are different division operations for unsigned (<code class=\"language-text\">DIV</code>) and signed (<code class=\"language-text\">IDIV</code>) numbers.</p>\n<p><span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi><mi>u</mi><mi>o</mi><mi>t</mi><mi>i</mi><mi>e</mi><mi>n</mi><mi>t</mi><mo>=</mo><mfrac><mrow><mi>d</mi><mi>i</mi><mi>v</mi><mi>i</mi><mi>d</mi><mi>e</mi><mi>n</mi><mi>d</mi></mrow><mrow><mi>d</mi><mi>i</mi><mi>v</mi><mi>i</mi><mi>s</mi><mi>o</mi><mi>r</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">quotient = \\frac{dividend}{divisor}</annotation></semantics></math></span></span></p>\n<p>The explicit operand (given directly after the command) defines\nthe size of the operands.</p>\n<p>The dividend must be larger than the divisor.\nSetting the dividend correctly requires often to set two registers\n(<em>D</em> register for the upper part, <em>A</em> register for the lower part).</p>\n<p>For <code class=\"language-text\">idiv</code> singed conversion of the operand might be necessary.</p>\n<p>The operand can be a register or a memory location but not immediate.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">::nasm\nDIV BX ; Use DX/AX  as implicit operand. Result is saved in AX. Remainder is saved in DX.\nIDIV 0x34 ; Use AX as implicit operand. Result is saved in AL. Remainder is saved in AH.</code></pre></div>\n<p>Unsigned and signed division (<code class=\"language-text\">div</code>, <code class=\"language-text\">idiv</code>):</p>\n<table>\n<thead>\n<tr>\n<th>Size</th>\n<th>Registers</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Byte</td>\n<td><code class=\"language-text\">al = ax / &lt;src></code>, remainder in <code class=\"language-text\">ah</code></td>\n</tr>\n<tr>\n<td>Word</td>\n<td><code class=\"language-text\">ax = dx:ax / &lt;src></code>, remainder in <code class=\"language-text\">dx</code></td>\n</tr>\n<tr>\n<td>Double-word</td>\n<td><code class=\"language-text\">eax = edx:eax / &lt;src></code>, remainder in <code class=\"language-text\">edx</code></td>\n</tr>\n<tr>\n<td>Quad-word</td>\n<td><code class=\"language-text\">rax = rdx:rax / &lt;src></code>, remainder in <code class=\"language-text\">rdx</code></td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"/a6f7c4f53ffca72c5b4cf75a946d63df/intel_div.svg\" alt=\"The x86 DIV/IDIV commands\"></p>\n<blockquote>\n<p>Don’t divide by zero!</p>\n</blockquote>\n<h3 id=\"affected-flags-8\">Affected Flags</h3>\n<ul>\n<li><strong>All</strong> flags are changed to <em>undefined</em>!</li>\n</ul>\n<blockquote>\n<p>If the result is too big for the register <em>AL</em> resp. <em>AX</em> a interrupt (<em>division error</em>) is caused.\nIf it is not handled the <strong>program can crash</strong> (undefined behaviour).</p>\n</blockquote>\n<h1 id=\"floating-point-instructions\">Floating Point Instructions</h1>\n<p>There are special instructions for floating point numbers.</p>\n<p>Here are the most important x86-64 floating point instructions\nshown. They differ from the 32-bit floating point instructions.</p>\n<h2 id=\"values\">Values</h2>\n<ul>\n<li>32-bit: single precision (<code class=\"language-text\">float</code> in C/C++)</li>\n<li>64-bit: double precision (<code class=\"language-text\">double</code> in C/C++)</li>\n</ul>\n<p>Single precision instuctions have a <code class=\"language-text\">s</code> postfix and\ndouble precision instuctions have a <code class=\"language-text\">d</code> postfix.</p>\n<h2 id=\"registers-1\">Registers</h2>\n<p>There are 16 <code class=\"language-text\">XMM</code> registers <code class=\"language-text\">xmm0</code> - <code class=\"language-text\">xmm15</code> to be used\nfor floating point instructions.</p>\n<p>They are 128 bits (on later processors 256 bits) long.</p>\n<h2 id=\"data-transfer-commands-movss-movsd\">Data Transfer Commands (<code class=\"language-text\">movss</code>, <code class=\"language-text\">movsd</code>)</h2>\n<p>Copies a value to or from a <code class=\"language-text\">XMM</code> register.</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">movss dest, src\nmovsd dest, src</code></pre></div>\n<ul>\n<li>Only one operand can be memory</li>\n<li>Operands can not be an immediate</li>\n</ul>\n<h2 id=\"conversion-instructions-1\">Conversion Instructions</h2>\n<table>\n<thead>\n<tr>\n<th>Conversions</th>\n<th>float (32-bit)</th>\n<th>double (64-bit)</th>\n<th>integer (32 bit)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>float (32-bit)</td>\n<td>-</td>\n<td><code class=\"language-text\">cvtss2sd</code></td>\n<td><code class=\"language-text\">cvtss2si</code></td>\n</tr>\n<tr>\n<td>double (64-bit)</td>\n<td><code class=\"language-text\">cvtsd2ss</code></td>\n<td>-</td>\n<td><code class=\"language-text\">cvtsd2si</code></td>\n</tr>\n<tr>\n<td>integer (32 bit)</td>\n<td><code class=\"language-text\">cvtsi2ss</code></td>\n<td><code class=\"language-text\">cvtsi2sd</code></td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"arithmetic-instructions\">Arithmetic Instructions</h2>\n<h3 id=\"addition-addss-addsd\">Addition (<code class=\"language-text\">addss</code>, <code class=\"language-text\">addsd</code>)</h3>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">addss dest, src\naddsd dest, src</code></pre></div>\n<ul>\n<li>Destination operands must be an <code class=\"language-text\">XMM</code> register</li>\n<li>Source operand can’t be an immediate</li>\n</ul>\n<h3 id=\"substraction-subss-subsd\">Substraction (<code class=\"language-text\">subss</code>, <code class=\"language-text\">subsd</code>)</h3>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">subss dest, src\nsubsd dest, src</code></pre></div>\n<ul>\n<li>Destination operands must be an <code class=\"language-text\">XMM</code> register</li>\n<li>Source operand can’t be an immediate</li>\n</ul>\n<h3 id=\"multiplication-mulss-mulsd\">Multiplication (<code class=\"language-text\">mulss</code>, <code class=\"language-text\">mulsd</code>)</h3>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">mulss dest, src\nmulsd dest, src</code></pre></div>\n<ul>\n<li>Destination operands must be an <code class=\"language-text\">XMM</code> register</li>\n<li>Source operand can’t be an immediate</li>\n</ul>\n<h3 id=\"division-divss-divsd\">Division (<code class=\"language-text\">divss</code>, <code class=\"language-text\">divsd</code>)</h3>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">divss dest, src\ndivsd dest, src</code></pre></div>\n<ul>\n<li>Destination operands must be an <code class=\"language-text\">XMM</code> register</li>\n<li>Source operand can’t be an immediate</li>\n</ul>\n<h3 id=\"square-root-sqrtss-sqrtsd\">Square Root (<code class=\"language-text\">sqrtss</code>, <code class=\"language-text\">sqrtsd</code>)</h3>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">sqrtss dest, src\nsqrtsd dest, src</code></pre></div>\n<ul>\n<li>Destination operands must be an <code class=\"language-text\">XMM</code> register</li>\n<li>Source operand can’t be an immediate</li>\n</ul>\n<h3 id=\"control-instructions\">Control Instructions</h3>\n<p>There are ordered and unordered floating point compare instructions.\nHere only the unordered floating point instructions shown.</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">ucomiss op1, op2\nucomisd op1, op2</code></pre></div>\n<ul>\n<li>Operands are not changed</li>\n<li><code class=\"language-text\">op1</code> must be an <code class=\"language-text\">XMM</code> register</li>\n<li><code class=\"language-text\">op2</code> may be <code class=\"language-text\">XMM</code> register or memory</li>\n<li>No immediate operands are allowed</li>\n</ul>\n<h1 id=\"logical-commands\">Logical Commands</h1>\n<h2 id=\"and-or-and-xor-and-or-xor\">And, Or and Xor (<code class=\"language-text\">AND</code>, <code class=\"language-text\">OR</code>, <code class=\"language-text\">XOR</code>)</h2>\n<p>Bit-wise <strong>and</strong>, <strong>or</strong> or <strong>xor</strong>  operation.</p>\n<ul>\n<li>The first operand can be a register or a memory address</li>\n<li>The second operand can be a register, a memory address or a constant</li>\n<li>Only one operand can be memory</li>\n</ul>\n<p>The first operand is overwritten with the result.</p>\n<h3 id=\"affected-flags-9\">Affected Flags</h3>\n<ul>\n<li>Carry and Overflow: are always reset (0)</li>\n<li>Zero and Sign: are set according to the result</li>\n</ul>\n<h2 id=\"not-not\">Not (<code class=\"language-text\">NOT</code>)</h2>\n<p>Bit-wise <strong>not</strong> (inverse) operation. The operand can be a register or a memory address but not an immediate.</p>\n<p>The operand is overwritten with the result.</p>\n<h3 id=\"affected-flags-10\">Affected Flags</h3>\n<ul>\n<li><strong>No</strong> flags are changed</li>\n</ul>\n<h1 id=\"rotation-commands\">Rotation Commands</h1>\n<h2 id=\"rotate-rol-ror\">Rotate (<code class=\"language-text\">ROL</code>, <code class=\"language-text\">ROR</code>)</h2>\n<p>Rotate left (<code class=\"language-text\">ROL</code>) or right (<code class=\"language-text\">ROR</code>).</p>\n<p>Rotates the first operand (memory or register) by the constant <strong>1</strong> (immediate) or by the value given in <em>CL</em>.</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">ROL <span class=\"token number\">0x34</span>, <span class=\"token number\">1</span><span class=\"token comment\">; Rotate by one.</span>\nROR <span class=\"token register variable\">AX</span>, <span class=\"token register variable\">CL</span><span class=\"token comment\">; Rotate by value in CL.</span></code></pre></div>\n<h3 id=\"affected-flags-11\">Affected Flags</h3>\n<ul>\n<li>Overflow:\n<ul>\n<li>For one-bit rotation: Overflow set if MSB is changed by the rotation. Otherwise it’s not set.</li>\n<li>For other cases: Overflow is undefined</li>\n</ul>\n</li>\n<li>Carry has the value of the bit that was shifted from one end to the other.</li>\n</ul>\n<h2 id=\"rotate-with-carry-rcl-rcr\">Rotate with Carry (<code class=\"language-text\">RCL</code>, <code class=\"language-text\">RCR</code>)</h2>\n<p>Rotate left (<code class=\"language-text\">RCL</code>) or right (<code class=\"language-text\">RCR</code>) with carry as MSB.</p>\n<p>The first operand (memory or register) is extended with the carry bit as the MSB.\nIt is then rotated by the constant <strong>1</strong> (immediate) or by the value given in <em>CL</em>.</p>\n<h3 id=\"affected-flags-12\">Affected Flags</h3>\n<ul>\n<li>Overflow:\n<ul>\n<li>For one-bit rotation: Overflow set if MSB is changed by the rotation. Otherwise it’s not set.</li>\n<li>For other cases: Overflow is undefined</li>\n</ul>\n</li>\n<li>Carry has the value of the bit that was shifted from one end to the other.</li>\n</ul>\n<h1 id=\"manipulate-the-carry-flag-clc-stc-cmc\">Manipulate the Carry Flag (<code class=\"language-text\">CLC</code>, <code class=\"language-text\">STC</code>, <code class=\"language-text\">CMC</code>)</h1>\n<p>Clear Carry Flag (<code class=\"language-text\">CLC</code>): CF = 0.</p>\n<p>Set Carry Flag (<code class=\"language-text\">STC</code>): CF = 1.</p>\n<p>Complement Carry Flag (<code class=\"language-text\">CMC</code>): CF = !CF.</p>\n<h1 id=\"shift-commands\">Shift Commands</h1>\n<p>The shift commands can be used to multiply with or divide by a\npower of two (2, 5, 8, …).</p>\n<p>For a multiplication or a division of a <em>unsigned</em> number the <em>logical\nshift operators</em> need to be used.</p>\n<p>For a multiplication or a division of a <em>signed</em> number the\n<em>arithmetic shift operators</em> need to be used.</p>\n<table>\n<thead>\n<tr>\n<th>Direction</th>\n<th>Logical</th>\n<th>Arithmetic</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Left</td>\n<td><code class=\"language-text\">shl</code></td>\n<td><code class=\"language-text\">sal</code></td>\n<td>Both instructions are identical</td>\n</tr>\n<tr>\n<td>Right</td>\n<td><code class=\"language-text\">shr</code></td>\n<td><code class=\"language-text\">sar</code></td>\n<td>Instructions work diffently</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Logical shift (unsigned shift): Spaces filled with zero</li>\n<li>Arithmetic shift (signed shift): Spaces filled so that sign is preserved\n<ul>\n<li>Right: Spaces are filled with sign bit.</li>\n<li>Left: Spaces are filled with zero (doesn’t affect sign), thus same as logical shift</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"left-shift-commands-shl-sal\">Left Shift Commands (<code class=\"language-text\">SHL</code>, <code class=\"language-text\">SAL</code>)</h2>\n<p>Both left shift operators are functional identical. They\nmuliplicate the operator by <em>2</em> or by <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mrow><mi>C</mi><mi>L</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">2^{CL}</annotation></semantics></math></span></span>.</p>\n<p>Shifts the given operator (memory or register) left by\nthe constant <strong>1</strong> (immediate) or by the value given in <em>CL</em>.</p>\n<h3 id=\"affected-flags-13\">Affected Flags</h3>\n<ul>\n<li>Zero</li>\n<li>Sign</li>\n<li>Offset</li>\n<li>For one-bit shift:\n<ul>\n<li>Carry: For unsigned Operands a set carry flag means <em>overflow</em></li>\n<li>Overflow: For signed Operands a set overflow flag means <em>overflow</em></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"right-shift-commands-shr-sar\">Right Shift Commands (<code class=\"language-text\">SHR</code>, <code class=\"language-text\">SAR</code>)</h2>\n<p>The <em>logical shift right</em> (<code class=\"language-text\">SHR</code>) divides a unsigned value by <em>2</em> or by <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mrow><mi>C</mi><mi>L</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">2^{CL}</annotation></semantics></math></span></span>.</p>\n<p>The <em>arithmetic shift right</em> (<code class=\"language-text\">SHR</code>) divides a unsigned value by <em>2</em> or by <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mrow><mi>C</mi><mi>L</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">2^{CL}</annotation></semantics></math></span></span>.\nThe sign stays unchanged.</p>\n<p>The two right shift instructions are not equivalent (not as the\ntwo left shift instructions).</p>\n<p>The first operand is a memory location or a register. The second operand is the\nconstant <strong>1</strong> or the register <em>CL</em>.</p>\n<h3 id=\"affected-flags-14\">Affected Flags</h3>\n<ul>\n<li>CF: For one-bit shifts the carry flag holds the remainder of the division</li>\n<li>ZF</li>\n<li>SF</li>\n<li>(OF)</li>\n</ul>\n<h1 id=\"jump-commands\">Jump Commands</h1>\n<p>Jump commands can be divided by different topics.</p>\n<h2 id=\"conditionalunconditional-jumps\">Conditional/Unconditional Jumps</h2>\n<p>Unconditional jumps are always performed. Conditional jumps are only\nperformed if a check gives an expected result (i.e flags).</p>\n<h2 id=\"short-near-and-far-jumps\">Short, Near and Far Jumps</h2>\n<ul>\n<li>Short: signed 8-bit distance</li>\n<li>Near: unsigned 16-bit distance</li>\n<li>Far: 32-bit (Segment and Offset)</li>\n</ul>\n<h2 id=\"direct-and-indirect-jumps\">Direct and Indirect Jumps</h2>\n<ul>\n<li>Direct: The target address is given directly after the command</li>\n<li>Indirect: The position is given indirectly by a register or a memory position</li>\n</ul>\n<h2 id=\"absolute-and-relative-jumps\">Absolute and Relative Jumps</h2>\n<ul>\n<li>Absolute jumps: The target address is an absolute address</li>\n<li>Relative jumps: The target address is given relative to the actual position (<em>IP</em>)</li>\n</ul>\n<p>The 8086 has following possible jump commands:</p>\n<p><img src=\"/5b47713ab77f35460545ac9d133563aa/intel_architecture_jump.svg\" alt=\"The Intel x86 jump commands\"></p>\n<h2 id=\"intra--and-inter-segment-jumps\">Intra- and Inter-Segment Jumps</h2>\n<p>All jumps change the <em>IP</em> register.</p>\n<p>Far jumps also change the <em>CS</em> register.</p>\n<h3 id=\"intra-segment-jump\">Intra-Segment Jump</h3>\n<p>Short- and Near-Jumps change only the <em>IP</em> register. The target\nis always inside the actual code segment (<em>CS</em>).</p>\n<h4 id=\"near-jump\">Near Jump</h4>\n<ul>\n<li>Direct Near-Jumps are always relative to <em>IP</em>.</li>\n<li>Indirect Near-Jumps are always absolute to the actual code segment.</li>\n</ul>\n<h4 id=\"short-jump\">Short Jump</h4>\n<p>Short Jumps are always relative to <em>IP</em>.</p>\n<h3 id=\"inter-segment-jump\">Inter-Segment Jump</h3>\n<p>Far jumps change <em>CS</em> and <em>IP</em>.</p>\n<p>All far jumps are absolute.</p>\n<h2 id=\"unconditional-jumps-jmp\">Unconditional Jumps (<code class=\"language-text\">JMP</code>)</h2>\n<ul>\n<li>8-bit displacement is added to <em>IP</em> as signed number:<pre><strong>JMP</strong> displ8</pre></li>\n<li>16-bit displacement is added to <em>IP</em> as unsigned number:<pre><strong>JMP</strong> displ16</pre></li>\n<li>The constant is the absolute 32-bit FAR-addressed:<pre><strong>JMP</strong> const32</pre></li>\n<li><em>IP</em> is loaded with the value of the register:<pre><strong>JMP</strong> reg16</pre></li>\n<li><em>IP</em> is loaded with the value given by the memory position:<pre><strong>JMP</strong> mem16</pre></li>\n<li><em>CS</em> and <em>IP</em> are loaded with the value at the memory position:<pre><strong>JMP</strong> mem32</pre></li>\n</ul>\n<p>The unconditional jump are not limited in range.</p>\n<h2 id=\"conditional-jumps\">Conditional Jumps</h2>\n<p>Conditional jumps check one or more flags and jump to a given address if a condition is met.</p>\n<p>Before the jump can be performed the flags need to be set by a logical or arithmetic command.\nAlternatively the commands <code class=\"language-text\">CMP</code> and <code class=\"language-text\">TEST</code> can be used.</p>\n<p>Conditional jumps can be divided into following groups:</p>\n<ul>\n<li>Arithmetic jumps: The jump depends on size difference of two operands. The two operands have to be compared in advance.\nOne or more flags have to be checked.</li>\n<li>Flag oriented jumps: A jump is performed if <em>one</em> given flag is set or deleted.</li>\n</ul>\n<h3 id=\"arithmetic-jumps\">Arithmetic Jumps</h3>\n<p>The jump is performed if the size relation between two given operands is as expected.</p>\n<p>The relation is expressed differently for signed and unsigned operands:</p>\n<table>\n<thead>\n<tr>\n<th>Relation</th>\n<th>unsigned</th>\n<th>signed</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">=</annotation></semantics></math></span></span></td>\n<td>equal</td>\n<td>equal</td>\n</tr>\n<tr>\n<td><span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>&#x3C;</mo></mrow><annotation encoding=\"application/x-tex\">&#x3C;</annotation></semantics></math></span></span></td>\n<td>below</td>\n<td>less</td>\n</tr>\n<tr>\n<td><span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>></mo></mrow><annotation encoding=\"application/x-tex\">></annotation></semantics></math></span></span></td>\n<td>above</td>\n<td>greater</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"arithmetic-unsigned-jumps\">Arithmetic <em>“unsigned”</em> Jumps</h4>\n<table>\n<thead>\n<tr>\n<th>Relation</th>\n<th>Command</th>\n<th>Explanation</th>\n<th>Condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">=</annotation></semantics></math></span></span></td>\n<td><code class=\"language-text\">JE</code></td>\n<td>Jump if equal</td>\n<td>ZF <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">=</annotation></semantics></math></span></span> 1</td>\n</tr>\n<tr>\n<td><span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo mathvariant=\"normal\">≠</mo></mrow><annotation encoding=\"application/x-tex\">\\neq</annotation></semantics></math></span></span></td>\n<td><code class=\"language-text\">JNE</code></td>\n<td>Jump if not equal</td>\n<td>ZF <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">=</annotation></semantics></math></span></span> 0</td>\n</tr>\n<tr>\n<td><span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>&#x3C;</mo></mrow><annotation encoding=\"application/x-tex\">&#x3C;</annotation></semantics></math></span></span></td>\n<td><code class=\"language-text\">JB</code></td>\n<td>Jump if below</td>\n<td>CF <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">=</annotation></semantics></math></span></span> 1</td>\n</tr>\n<tr>\n<td><span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≱</mo></mrow><annotation encoding=\"application/x-tex\">\\ngeq</annotation></semantics></math></span></span></td>\n<td><code class=\"language-text\">JNAE</code></td>\n<td>Jump if not above or equal</td>\n<td>CF <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">=</annotation></semantics></math></span></span> 1</td>\n</tr>\n<tr>\n<td><span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≥</mo></mrow><annotation encoding=\"application/x-tex\">\\ge</annotation></semantics></math></span></span></td>\n<td><code class=\"language-text\">JAE</code></td>\n<td>Jump if above or equal</td>\n<td>CF <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">=</annotation></semantics></math></span></span> 0</td>\n</tr>\n<tr>\n<td><span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>&#x3C;̸</mo></mrow><annotation encoding=\"application/x-tex\">\\not&#x3C;</annotation></semantics></math></span></span></td>\n<td><code class=\"language-text\">JNB</code></td>\n<td>Jump if not below</td>\n<td>CF <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">=</annotation></semantics></math></span></span> 0</td>\n</tr>\n<tr>\n<td><span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo></mrow><annotation encoding=\"application/x-tex\">\\le</annotation></semantics></math></span></span></td>\n<td><code class=\"language-text\">JBE</code></td>\n<td>Jump if below or equal</td>\n<td>CF <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">=</annotation></semantics></math></span></span> 1 or ZF <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">=</annotation></semantics></math></span></span> 1</td>\n</tr>\n<tr>\n<td><span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≯</mo></mrow><annotation encoding=\"application/x-tex\">\\not></annotation></semantics></math></span></span></td>\n<td><code class=\"language-text\">JNA</code></td>\n<td>Jump if not above</td>\n<td>CF <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">=</annotation></semantics></math></span></span> 1 or ZF <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">=</annotation></semantics></math></span></span> 1</td>\n</tr>\n<tr>\n<td><span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>></mo></mrow><annotation encoding=\"application/x-tex\">></annotation></semantics></math></span></span></td>\n<td><code class=\"language-text\">JA</code></td>\n<td>Jump if above</td>\n<td>CF <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">=</annotation></semantics></math></span></span> 0 and ZF <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">=</annotation></semantics></math></span></span> 0</td>\n</tr>\n<tr>\n<td><span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≰</mo></mrow><annotation encoding=\"application/x-tex\">\\not\\le</annotation></semantics></math></span></span></td>\n<td><code class=\"language-text\">JNBE</code></td>\n<td>Jump if not below or equal</td>\n<td>CF <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">=</annotation></semantics></math></span></span> 0 and ZF <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">=</annotation></semantics></math></span></span> 0</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"arithmetic-signed-jumps\">Arithmetic <em>“signed”</em> Jumps</h4>\n<table>\n<thead>\n<tr>\n<th>Relation</th>\n<th>Command</th>\n<th>Explanation</th>\n<th>Condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">=</annotation></semantics></math></span></span></td>\n<td><code class=\"language-text\">JE</code></td>\n<td>Jump if equal</td>\n<td>ZF <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">=</annotation></semantics></math></span></span> 1</td>\n</tr>\n<tr>\n<td><span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo mathvariant=\"normal\">≠</mo></mrow><annotation encoding=\"application/x-tex\">\\neq</annotation></semantics></math></span></span></td>\n<td><code class=\"language-text\">JNE</code></td>\n<td>Jump if not equal</td>\n<td>ZF <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">=</annotation></semantics></math></span></span> 0</td>\n</tr>\n<tr>\n<td><span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>&#x3C;</mo></mrow><annotation encoding=\"application/x-tex\">&#x3C;</annotation></semantics></math></span></span></td>\n<td><code class=\"language-text\">JL</code></td>\n<td>Jump if less</td>\n<td>OF <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo mathvariant=\"normal\">≠</mo></mrow><annotation encoding=\"application/x-tex\">\\neq</annotation></semantics></math></span></span> SF</td>\n</tr>\n<tr>\n<td><span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≱</mo></mrow><annotation encoding=\"application/x-tex\">\\ngeq</annotation></semantics></math></span></span></td>\n<td><code class=\"language-text\">JNGE</code></td>\n<td>Jump if not greater or equal</td>\n<td>OF <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo mathvariant=\"normal\">≠</mo></mrow><annotation encoding=\"application/x-tex\">\\neq</annotation></semantics></math></span></span> SF</td>\n</tr>\n<tr>\n<td><span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≥</mo></mrow><annotation encoding=\"application/x-tex\">\\ge</annotation></semantics></math></span></span></td>\n<td><code class=\"language-text\">JGE</code></td>\n<td>Jump if greater or equal</td>\n<td>OF <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">=</annotation></semantics></math></span></span> SF</td>\n</tr>\n<tr>\n<td><span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>&#x3C;̸</mo></mrow><annotation encoding=\"application/x-tex\">\\not&#x3C;</annotation></semantics></math></span></span></td>\n<td><code class=\"language-text\">JNL</code></td>\n<td>Jump if not less</td>\n<td>OF <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">=</annotation></semantics></math></span></span> SF</td>\n</tr>\n<tr>\n<td><span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo></mrow><annotation encoding=\"application/x-tex\">\\le</annotation></semantics></math></span></span></td>\n<td><code class=\"language-text\">JLE</code></td>\n<td>Jump if less or equal</td>\n<td>OF <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo mathvariant=\"normal\">≠</mo></mrow><annotation encoding=\"application/x-tex\">\\neq</annotation></semantics></math></span></span> SF or ZF <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">=</annotation></semantics></math></span></span> 1</td>\n</tr>\n<tr>\n<td><span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≯</mo></mrow><annotation encoding=\"application/x-tex\">\\not></annotation></semantics></math></span></span></td>\n<td><code class=\"language-text\">JNG</code></td>\n<td>Jump if not greater</td>\n<td>OF <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo mathvariant=\"normal\">≠</mo></mrow><annotation encoding=\"application/x-tex\">\\neq</annotation></semantics></math></span></span> SF or ZF <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">=</annotation></semantics></math></span></span> 1</td>\n</tr>\n<tr>\n<td><span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>></mo></mrow><annotation encoding=\"application/x-tex\">></annotation></semantics></math></span></span></td>\n<td><code class=\"language-text\">JG</code></td>\n<td>Jump if greater</td>\n<td>OF <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">=</annotation></semantics></math></span></span> SF and ZF <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">=</annotation></semantics></math></span></span> 0</td>\n</tr>\n<tr>\n<td><span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≰</mo></mrow><annotation encoding=\"application/x-tex\">\\not\\le</annotation></semantics></math></span></span></td>\n<td><code class=\"language-text\">JNLE</code></td>\n<td>Jump if not less or equal</td>\n<td>OF <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">=</annotation></semantics></math></span></span> SF and ZF <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">=</annotation></semantics></math></span></span> 0</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"flag-oriented-jumps\">Flag oriented Jumps</h3>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Explanation</th>\n<th>Condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">JZ</code></td>\n<td>Jump if zero</td>\n<td>ZF <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">=</annotation></semantics></math></span></span> 1</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">JNZ</code></td>\n<td>Jump if not zero</td>\n<td>ZF <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">=</annotation></semantics></math></span></span> 0</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">JC</code></td>\n<td>Jump if carry</td>\n<td>CF <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">=</annotation></semantics></math></span></span> 1</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">JNC</code></td>\n<td>Jump if no carry</td>\n<td>CF <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">=</annotation></semantics></math></span></span> 0</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">JS</code></td>\n<td>Jump if sign</td>\n<td>SF <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">=</annotation></semantics></math></span></span> 1</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">JNS</code></td>\n<td>Jump if no sign</td>\n<td>SF <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">=</annotation></semantics></math></span></span> 0</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">JO</code></td>\n<td>Jump if overflow</td>\n<td>OF <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">=</annotation></semantics></math></span></span> 1</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">JNO</code></td>\n<td>Jump if no overflow</td>\n<td>OF <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">=</annotation></semantics></math></span></span> 0</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">JP</code></td>\n<td>Jump if parity</td>\n<td>PF <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">=</annotation></semantics></math></span></span> 1</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">JNP</code></td>\n<td>Jump if no parity</td>\n<td>PF <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">=</annotation></semantics></math></span></span> 0</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">JPE</code></td>\n<td>Jump if parity even</td>\n<td>PF <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">=</annotation></semantics></math></span></span> 1</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">JPO</code></td>\n<td>Jump if parity odd</td>\n<td>PF <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">=</annotation></semantics></math></span></span> 0</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"comparing-commands-cmp-test\">Comparing Commands (<code class=\"language-text\">CMP</code>, <code class=\"language-text\">TEST</code>)</h2>\n<p>Since the different jump commands depend on flags set or not there\nare special commands that only affect the flags.</p>\n<ul>\n<li><code class=\"language-text\">CMP</code> is a subtraction of the operands (8-bit or 16-bit) but it only changes the flags.\nThe result is not written anywhere.</li>\n<li><code class=\"language-text\">TEST</code> is a <em>AND</em> operation of the operands (8-bit or 16-bit) that only changes the flags.\nThe result is not written anywhere.</li>\n</ul>\n<p>Both commands accept a register or a memory location as first operand and a register, a memory location\nor a constant (immediate) as second operator.</p>\n<p>Only one memory operand is allowed.</p>\n<p>The operands need to be of the same size.</p>\n<h1 id=\"loop-commands-loopx-jcxz\">Loop Commands (<code class=\"language-text\">LOOPx</code>, <code class=\"language-text\">JCXZ</code>)</h1>\n<p>All loop commands accept an displacement operator (8-bit).</p>\n<p>None of the loop commands affects any flags!</p>\n<h2 id=\"loop-loop\">Loop (<code class=\"language-text\">LOOP</code>)</h2>\n<p>Decrements <em>RCX</em> by one (1). If <em>RCX</em> is not zero (<em>RCX</em> <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo mathvariant=\"normal\">≠</mo></mrow><annotation encoding=\"application/x-tex\">\\neq</annotation></semantics></math></span></span> 0) it performs the jump.</p>\n<h2 id=\"loop-while-equal-and-loop-while-zero-loope-loopz\">Loop while equal and Loop while zero (<code class=\"language-text\">LOOPE</code>, <code class=\"language-text\">LOOPZ</code>)</h2>\n<p><code class=\"language-text\">LOOPE</code> and <code class=\"language-text\">LOOPZ</code> are different mnemonics for the same command.</p>\n<p>Decrements <em>CX</em> by one (1). Performs the jump if if Zero Flag is set and <em>CX</em> is not zero (0).</p>\n<p>Jump if: ZF <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">=</annotation></semantics></math></span></span> 1 and CX <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo mathvariant=\"normal\">≠</mo></mrow><annotation encoding=\"application/x-tex\">\\neq</annotation></semantics></math></span></span> 0</p>\n<h2 id=\"loop-while-not-equal-and-loop-while-not-zero-loopne-loopnz\">Loop while not equal and Loop while not zero (<code class=\"language-text\">LOOPNE</code>, <code class=\"language-text\">LOOPNZ</code>)</h2>\n<p><code class=\"language-text\">LOOPNE</code> and <code class=\"language-text\">LOOPNZ</code> are different mnemonics for the same command.</p>\n<p>Decrements <em>CX</em> by one (1). Performs the jump if if Zero Flag is not set and <em>CX</em> is not zero (0).</p>\n<p>Jump if: ZF <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">=</annotation></semantics></math></span></span> 0 and CX <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo mathvariant=\"normal\">≠</mo></mrow><annotation encoding=\"application/x-tex\">\\neq</annotation></semantics></math></span></span> 0</p>\n<h2 id=\"jump-if-cx-zero-jcxz\">Jump if <em>CX</em> zero (<code class=\"language-text\">JCXZ</code>)</h2>\n<p>Performs the jump if <em>CX</em> is zero.</p>\n<p>Jump if: CX <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">=</annotation></semantics></math></span></span> 0</p>\n<h1 id=\"stack-and-function-calls\">Stack and Function calls</h1>\n<p>The stack on x86 is always addressed by the Stack Segment (<em>SS</em>).</p>\n<p>On 80186 stack operations are word aligned (16-bit). So <code class=\"language-text\">PUSH</code>\ndecrements <em>SP</em> by <em>2</em> and <code class=\"language-text\">POP</code> increments <em>SP</em> by <em>2</em>.</p>\n<p>On x86-64 stack operations are quad-wor (64-bit) aligned.\nSo <code class=\"language-text\">PUSH</code> decrements <em>RSP</em> by <em>8</em> and <code class=\"language-text\">POP</code> increments <em>RSP</em> by <em>8</em>.</p>\n<p>It’s possible to use pop and push instructions for operands smaller than 64-bits. But it’s not recomended.</p>\n<p>The stack on x86 grow downwards (reverse in memory).</p>\n<p><em>RSP</em> points to the <em>last written</em> item. It is the top of the stack (smallest address on stack).</p>\n<h2 id=\"push-and-pop-push-pushf-pusha-pop-popf-popa\">Push and Pop (<code class=\"language-text\">PUSH</code>, <code class=\"language-text\">PUSHF</code>, <code class=\"language-text\">PUSHA</code>, <code class=\"language-text\">POP</code>, <code class=\"language-text\">POPF</code>, <code class=\"language-text\">POPA</code>)</h2>\n<p>The different push and pop commands save/restore 16-bit words to/from the stack.</p>\n<h3 id=\"push\"><code class=\"language-text\">PUSH</code></h3>\n<p><code class=\"language-text\">PUSH</code> can be called with all registers as as operands or a memory\noperand. Immediate addressing is not possible with <code class=\"language-text\">PUSH</code>.</p>\n<p>The registers that can be pushed are: <em>AX</em>, <em>BX</em>, <em>CX</em>, <em>DX</em>, <em>SP</em>, <em>BP</em>, <em>SI</em>, <em>DI</em>, <em>ES</em>, <em>SS</em>, <em>DS</em> and <em>CS</em>.</p>\n<h3 id=\"pop\"><code class=\"language-text\">POP</code></h3>\n<p><code class=\"language-text\">POP</code> can use the same operands as <code class=\"language-text\">PUSH</code> with the exception of <em>CS</em>. Memory operands are also possible.</p>\n<p>The registers that can be poped are: <em>AX</em>, <em>BX</em>, <em>CX</em>, <em>DX</em>, <em>SP</em>, <em>BP</em>, <em>SI</em>, <em>DI</em>, <em>ES</em>, <em>SS</em> and <em>DS</em>.</p>\n<h3 id=\"pusha-and-popa\"><code class=\"language-text\">PUSHA</code> and <code class=\"language-text\">POPA</code></h3>\n<p>With the commands <code class=\"language-text\">PUSHA</code> and <code class=\"language-text\">POPA</code> (introduced with 80186) the 8 working registers are pushed to the stack and\npoped in the reversed order:</p>\n<p><em>AX</em>, <em>CX</em>, <em>DX</em>, <em>BX</em>, <em>SP+</em>, <em>BP</em>, <em>SI</em>, <em>DI</em></p>\n<p><em>SP+</em> is the <em>SP</em> before the first push to the stack. With <code class=\"language-text\">POPA</code> <em>SP</em> is not poped. Is is just decremented (by 2) at\nthe end of all the pop operations.</p>\n<h3 id=\"pushf-and-popf\"><code class=\"language-text\">PUSHF</code> and <code class=\"language-text\">POPF</code></h3>\n<p><code class=\"language-text\">PUSHF</code> and <code class=\"language-text\">POPF</code> push and pop the flag register to/from the stack.</p>\n<h3 id=\"examples-1\">Examples</h3>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">PUSH result   <span class=\"token comment\">; variable result</span>\nPUSH <span class=\"token operator\">[</span><span class=\"token register variable\">BX</span><span class=\"token operator\">+</span><span class=\"token number\">7</span><span class=\"token operator\">]</span>   <span class=\"token comment\">; memory word at address [BX+7]</span>\nPUSH tab<span class=\"token operator\">[</span><span class=\"token register variable\">SI</span><span class=\"token operator\">]</span>  <span class=\"token comment\">; memory word at address tab[SI]</span>\nPOP <span class=\"token register variable\">AX</span>        <span class=\"token comment\">; value from stack to AX</span></code></pre></div>\n<h2 id=\"call-and-ret\"><code class=\"language-text\">CALL</code> and <code class=\"language-text\">RET</code></h2>\n<p><code class=\"language-text\">CALL</code> stores the return address (address of the instruction after <code class=\"language-text\">CALL</code>) on the stack, increments <em>SP</em> (by 2)\nand calls the function.</p>\n<p><code class=\"language-text\">RET</code> returns from the function by loading the stored address in to <em>IP</em> and decrements <em>SP</em> (by 2).</p>\n<h2 id=\"defining-a-function\">Defining a Function</h2>\n<p>Functions need to be placed in the code segment.</p>\n<p>In <a href=\"http://left404.com/2011/01/04/converting-x86-assembly-from-masm-to-nasm-3/\">NASM</a> a function is defined as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\"><span class=\"token label function\">my_func:</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">; code of the function...\n\nret</code></pre></div>\n<p>For calling the function:</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">call far my_func</code></pre></div>\n<p>The pseudo commands <code class=\"language-text\">PROC and </code>ENDP` (as in MASM/TASM) are not supported by NASM.</p>\n<p>Function definitions can not be nested.</p>\n<h3 id=\"function-prologue\">Function Prologue</h3>\n<p>At the beginning of each function some registers have to be saved. This code is called\n<a href=\"https://en.wikipedia.org/wiki/Function_prologue\">function prologue</a>.</p>\n<p>The usual tasks in a function prologue are:</p>\n<ul>\n<li>Save old <em>BP</em> (push it on the stack).</li>\n<li>Assign <em>SP</em> to <em>BP</em> (<em>PB</em> = <em>SP</em>). So the <em>BP</em> points the the old <em>BP</em>.</li>\n<li>Save register contents to stack. So the registers can be used in the function.</li>\n<li>Allocate memory on stack for use in function.</li>\n</ul>\n<p>The the actual code of the function can run.</p>\n<p>Before the function ends it has to undo most of the things that were done in the prologue (i.e restoring registers,\nadjusting <em>SP</em>…).\nThis code is called function epilogue.</p>\n<h1 id=\"string-operations\">String Operations</h1>\n<p>The x86 architecture contains some commands that can be executed on consecutive memory location (strings, arrays…).</p>\n<p>This commands are powerful but not so easy to understand. <a href=\"http://www.oocities.org/codeteacher/x86asm/asml1013.html\">Here</a> is a good explanation.</p>\n<h2 id=\"commands\">Commands</h2>\n<p>Mostly <em>SI</em> is used for addressing the source operator and <em>DI</em> is used for addressing the destination operator. Hence the names.\nFor some commands the accumulator (<em>AL</em>/<em>AX</em>) is used as operator.\n<em>SI</em> is <em>DS</em>-relative by default. But the segment can be overridden.\n<em>DI</em> is <em>ES</em>-relative by default. The segment can <strong>not</strong> be overridden.</p>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Purpose</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">MOVSx</code></td>\n<td>Move (copy) data addressed by <em>SI</em> to position addressed by <em>DI</em>.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">STOSx</code></td>\n<td>Load data from accumulator to position addressed by <em>DI</em>.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">LODSx</code></td>\n<td>Load data addressed by <em>SI</em> into accumulator.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">CMPSx</code></td>\n<td>Compare data addressed by <em>SI</em> with data addressed by <em>DI</em>. Flags are set according to result of [<em>SI</em>] - [<em>DI</em>].</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">SCASx</code></td>\n<td>Compare data from accumulator  with data addressed by <em>DI</em>. Flags are set according to result of accumulator - [<em>DI</em>].</td>\n</tr>\n</tbody>\n</table>\n<p>In the commands listed above <em>x</em> can be <em>B</em> for operation on bytes or <em>W</em> for operation on words (16-bit).</p>\n<p>Processors 80186 and newer have also the commands: <code class=\"language-text\">INS</code> and <code class=\"language-text\">OUTS</code> for string input and output from/to ports.</p>\n<h2 id=\"direction\">Direction</h2>\n<p>The direction of the string commands can be controlled by the direction flag:</p>\n<ul>\n<li><code class=\"language-text\">CLD</code>: Clear direction flag. Index registers are incremented.</li>\n<li><code class=\"language-text\">STD</code>: Set direction flag. Index registers are decremented.</li>\n</ul>\n<h2 id=\"repeat-prefix\">Repeat Prefix</h2>\n<ul>\n<li><code class=\"language-text\">REP</code>: Repeat the string command as long as <em>CX</em> <span class=\"math math-inline\"><span class=\"katex\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo mathvariant=\"normal\">≠</mo></mrow><annotation encoding=\"application/x-tex\">\\neq</annotation></semantics></math></span></span> 0. Decrement <em>CX</em> in each iteration.</li>\n<li><code class=\"language-text\">REPE</code>: Repeat while operands are equal.</li>\n<li><code class=\"language-text\">REPZ</code>: Repeat while zero (ZF = 1).</li>\n<li><code class=\"language-text\">REPNE</code>: Repeat while operands are <em>not</em> equal.</li>\n<li><code class=\"language-text\">REPNZ</code>: Repeat while <em>not</em> zero (ZF = 0).</li>\n</ul>\n<blockquote>\n<p>There is now practical use for <code class=\"language-text\">LODSx</code> with <code class=\"language-text\">REP</code>.</p>\n</blockquote>","frontmatter":{"title":"Intel Architecture","tags":["Computer Science","Assembler"],"category":"Programming"},"headings":[{"depth":1,"value":"General"},{"depth":1,"value":"Operation Modes"},{"depth":1,"value":"Memory Models"},{"depth":2,"value":"Real Mode Memory Models (16-bit)"},{"depth":3,"value":"Tiny"},{"depth":3,"value":"Small"},{"depth":3,"value":"Medium"},{"depth":3,"value":"Compact"},{"depth":3,"value":"Large"},{"depth":3,"value":"Huge"},{"depth":2,"value":"Protected Mode Memory Models (16-bit)"},{"depth":2,"value":"32-bit Memory Models"},{"depth":2,"value":"64-bit Memory Models"},{"depth":3,"value":"Windows"},{"depth":3,"value":"Linux and BSD"},{"depth":4,"value":"Small"},{"depth":4,"value":"Medium"},{"depth":4,"value":"Large"},{"depth":4,"value":"Kernel"},{"depth":3,"value":"OS X (Darwin)"},{"depth":1,"value":"Registers"},{"depth":2,"value":"General-Purpose Registers"},{"depth":2,"value":"Segment Registers"},{"depth":2,"value":"Special Registers"},{"depth":2,"value":"Values after Reset"},{"depth":2,"value":"XMM Registes"},{"depth":2,"value":"Flags Register"},{"depth":1,"value":"Segmentation"},{"depth":1,"value":"Addressing"},{"depth":2,"value":"Immediate"},{"depth":2,"value":"Implicit"},{"depth":2,"value":"Register"},{"depth":2,"value":"Direct"},{"depth":2,"value":"Register-Indirect"},{"depth":3,"value":"Address"},{"depth":4,"value":"Real Mode"},{"depth":4,"value":"Segment Prefix"},{"depth":4,"value":"x86-64"},{"depth":4,"value":"Operand Size (<code class=\"language-text\">WORD</code>, <code class=\"language-text\">DWORD</code>…)"},{"depth":4,"value":"Examples"},{"depth":2,"value":"Addressing Memory"},{"depth":1,"value":"Data Transfer Commands"},{"depth":2,"value":"Move Command (<code class=\"language-text\">MOV</code>)"},{"depth":2,"value":"Exchange Command (<code class=\"language-text\">XCHG</code>)"},{"depth":2,"value":"Input-/Output Commands (<code class=\"language-text\">IN</code>/<code class=\"language-text\">OUT</code>)"},{"depth":2,"value":"Load Effective Address (<code class=\"language-text\">LEA</code>)"},{"depth":1,"value":"Conversion Instructions"},{"depth":2,"value":"Narrowing Conversions"},{"depth":2,"value":"Widening Conversions"},{"depth":3,"value":"Unsigned Conversions (<code class=\"language-text\">MOVZX</code>)"},{"depth":3,"value":"Signed Conversions (<code class=\"language-text\">CBW</code>, <code class=\"language-text\">CWD</code>, …)"},{"depth":1,"value":"Arithmetic Commands"},{"depth":2,"value":"Addition (<code class=\"language-text\">ADD</code>)"},{"depth":3,"value":"Affected Flags"},{"depth":2,"value":"Addition with Carry (<code class=\"language-text\">ADC</code>)"},{"depth":3,"value":"Affected Flags"},{"depth":2,"value":"Increment (<code class=\"language-text\">INC</code>)"},{"depth":3,"value":"Affected Flags"},{"depth":2,"value":"Subtraction (<code class=\"language-text\">SUB</code>)"},{"depth":3,"value":"Affected Flags"},{"depth":2,"value":"Subtraction with Borrow (<code class=\"language-text\">SBB</code>)"},{"depth":3,"value":"Affected Flags"},{"depth":2,"value":"Decrement (<code class=\"language-text\">DEC</code>)"},{"depth":3,"value":"Affected Flags"},{"depth":2,"value":"Negate a signed Number (<code class=\"language-text\">NEG</code>)"},{"depth":3,"value":"Affected Flags"},{"depth":2,"value":"Multiplication (<code class=\"language-text\">MUL</code>, <code class=\"language-text\">IMUL</code>)"},{"depth":3,"value":"Affected Flags"},{"depth":2,"value":"Division (<code class=\"language-text\">DIV</code>, <code class=\"language-text\">IDIV</code>)"},{"depth":3,"value":"Affected Flags"},{"depth":1,"value":"Floating Point Instructions"},{"depth":2,"value":"Values"},{"depth":2,"value":"Registers"},{"depth":2,"value":"Data Transfer Commands (<code class=\"language-text\">movss</code>, <code class=\"language-text\">movsd</code>)"},{"depth":2,"value":"Conversion Instructions"},{"depth":2,"value":"Arithmetic Instructions"},{"depth":3,"value":"Addition (<code class=\"language-text\">addss</code>, <code class=\"language-text\">addsd</code>)"},{"depth":3,"value":"Substraction (<code class=\"language-text\">subss</code>, <code class=\"language-text\">subsd</code>)"},{"depth":3,"value":"Multiplication (<code class=\"language-text\">mulss</code>, <code class=\"language-text\">mulsd</code>)"},{"depth":3,"value":"Division (<code class=\"language-text\">divss</code>, <code class=\"language-text\">divsd</code>)"},{"depth":3,"value":"Square Root (<code class=\"language-text\">sqrtss</code>, <code class=\"language-text\">sqrtsd</code>)"},{"depth":3,"value":"Control Instructions"},{"depth":1,"value":"Logical Commands"},{"depth":2,"value":"And, Or and Xor (<code class=\"language-text\">AND</code>, <code class=\"language-text\">OR</code>, <code class=\"language-text\">XOR</code>)"},{"depth":3,"value":"Affected Flags"},{"depth":2,"value":"Not (<code class=\"language-text\">NOT</code>)"},{"depth":3,"value":"Affected Flags"},{"depth":1,"value":"Rotation Commands"},{"depth":2,"value":"Rotate (<code class=\"language-text\">ROL</code>, <code class=\"language-text\">ROR</code>)"},{"depth":3,"value":"Affected Flags"},{"depth":2,"value":"Rotate with Carry (<code class=\"language-text\">RCL</code>, <code class=\"language-text\">RCR</code>)"},{"depth":3,"value":"Affected Flags"},{"depth":1,"value":"Manipulate the Carry Flag (<code class=\"language-text\">CLC</code>, <code class=\"language-text\">STC</code>, <code class=\"language-text\">CMC</code>)"},{"depth":1,"value":"Shift Commands"},{"depth":2,"value":"Left Shift Commands (<code class=\"language-text\">SHL</code>, <code class=\"language-text\">SAL</code>)"},{"depth":3,"value":"Affected Flags"},{"depth":2,"value":"Right Shift Commands (<code class=\"language-text\">SHR</code>, <code class=\"language-text\">SAR</code>)"},{"depth":3,"value":"Affected Flags"},{"depth":1,"value":"Jump Commands"},{"depth":2,"value":"Conditional/Unconditional Jumps"},{"depth":2,"value":"Short, Near and Far Jumps"},{"depth":2,"value":"Direct and Indirect Jumps"},{"depth":2,"value":"Absolute and Relative Jumps"},{"depth":2,"value":"Intra- and Inter-Segment Jumps"},{"depth":3,"value":"Intra-Segment Jump"},{"depth":4,"value":"Near Jump"},{"depth":4,"value":"Short Jump"},{"depth":3,"value":"Inter-Segment Jump"},{"depth":2,"value":"Unconditional Jumps (<code class=\"language-text\">JMP</code>)"},{"depth":2,"value":"Conditional Jumps"},{"depth":3,"value":"Arithmetic Jumps"},{"depth":4,"value":"Arithmetic “unsigned” Jumps"},{"depth":4,"value":"Arithmetic “signed” Jumps"},{"depth":3,"value":"Flag oriented Jumps"},{"depth":2,"value":"Comparing Commands (<code class=\"language-text\">CMP</code>, <code class=\"language-text\">TEST</code>)"},{"depth":1,"value":"Loop Commands (<code class=\"language-text\">LOOPx</code>, <code class=\"language-text\">JCXZ</code>)"},{"depth":2,"value":"Loop (<code class=\"language-text\">LOOP</code>)"},{"depth":2,"value":"Loop while equal and Loop while zero (<code class=\"language-text\">LOOPE</code>, <code class=\"language-text\">LOOPZ</code>)"},{"depth":2,"value":"Loop while not equal and Loop while not zero (<code class=\"language-text\">LOOPNE</code>, <code class=\"language-text\">LOOPNZ</code>)"},{"depth":2,"value":"Jump if CX zero (<code class=\"language-text\">JCXZ</code>)"},{"depth":1,"value":"Stack and Function calls"},{"depth":2,"value":"Push and Pop (<code class=\"language-text\">PUSH</code>, <code class=\"language-text\">PUSHF</code>, <code class=\"language-text\">PUSHA</code>, <code class=\"language-text\">POP</code>, <code class=\"language-text\">POPF</code>, <code class=\"language-text\">POPA</code>)"},{"depth":3,"value":"<code class=\"language-text\">PUSH</code>"},{"depth":3,"value":"<code class=\"language-text\">POP</code>"},{"depth":3,"value":"<code class=\"language-text\">PUSHA</code> and <code class=\"language-text\">POPA</code>"},{"depth":3,"value":"<code class=\"language-text\">PUSHF</code> and <code class=\"language-text\">POPF</code>"},{"depth":3,"value":"Examples"},{"depth":2,"value":"<code class=\"language-text\">CALL</code> and <code class=\"language-text\">RET</code>"},{"depth":2,"value":"Defining a Function"},{"depth":3,"value":"Function Prologue"},{"depth":1,"value":"String Operations"},{"depth":2,"value":"Commands"},{"depth":2,"value":"Direction"},{"depth":2,"value":"Repeat Prefix"}]}},"pageContext":{"id":"8424cc79-0079-57c6-8101-010ccf3b6897","previousPost":{"title":"Endianness","slug":"/blog/endianness"},"nextPost":{"title":"ARM Cortex-M3 Architecture","slug":"/blog/arm_cortex_m3_architecture"},"dates":{"created":1435001312,"modified":1647509701}}},
    "staticQueryHashes": []}