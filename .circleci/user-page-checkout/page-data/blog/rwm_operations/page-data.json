{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/blog/rwm_operations",
    "result": {"data":{"site":{"siteMetadata":{"title":"My personal Website"}},"markdownRemark":{"id":"3215e7d0-098e-5264-a395-eea1ea2262ed","excerpt":"Read-Modify-Write Compare-And-Swap Todo Load-Link/Store-Conditional This works: But this fails: Test and Set Pseudo code: Reset: Generic RWM Pseudo code: Mutex…","html":"<h1 id=\"read-modify-write\">Read-Modify-Write</h1>\n<h2 id=\"compare-and-swap\">Compare-And-Swap</h2>\n<blockquote>\n<p>Todo</p>\n</blockquote>\n<h2 id=\"load-linkstore-conditional\">Load-Link/Store-Conditional</h2>\n<p>This works:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token function\">load_link</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// ...\n\nstore_conditional(R,x); // ok!</code></pre></div>\n<p>But this fails:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token function\">load_link</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// ...\n\nstore_conditional(R,x); // possibly other thread (ok!)\n\n// ...\n\nstore_conditional(R,x); // fails!</code></pre></div>\n<h2 id=\"test-and-set\">Test and Set</h2>\n<p>Pseudo code:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// atomic</span>\n<span class=\"token function\">test_and_set</span><span class=\"token punctuation\">(</span>V<span class=\"token operator\">:</span> mem_address<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token comment\">// V in {0,1}</span>\n    tmp <span class=\"token operator\">:</span><span class=\"token operator\">=</span> V\n    V <span class=\"token operator\">:</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">return</span> temp</code></pre></div>\n<p>Reset:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// normal write</span>\n<span class=\"token function\">reset</span><span class=\"token punctuation\">(</span>V<span class=\"token operator\">:</span> mem_address<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    V <span class=\"token operator\">:</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span></code></pre></div>\n<h2 id=\"generic-rwm\">Generic RWM</h2>\n<p>Pseudo code:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token function\">rwm</span><span class=\"token punctuation\">(</span>V<span class=\"token operator\">:</span> mem_address<span class=\"token punctuation\">,</span> f<span class=\"token operator\">:</span> function<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> value\n    tmp <span class=\"token operator\">:</span><span class=\"token operator\">=</span> V\n    V <span class=\"token operator\">:</span><span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>V<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> tmp</code></pre></div>\n<h1 id=\"mutex-shared-memory\">Mutex (Shared Memory)</h1>\n<ul>\n<li>\n<p>Mainly asynchronous shared memory systems</p>\n</li>\n<li>\n<p>read/write: atomic but only either read or write at a time</p>\n</li>\n<li>\n<p>Mutex code</p>\n</li>\n</ul>\n<!-- TODO:\n Enter -> Enter\n Enter -> Critical (at most 1 proc)\n Critical -> Exit\n Exit -> Remainder\n Remainder -> Enter\n\n-->\n<p>Requirements:</p>\n<ol>\n<li>At most one process in critical section</li>\n<li>No deadlocks\n<ul>\n<li>if there is a process in the entry section then later there is a process (maybe an <em>other</em> one) in the critical section</li>\n</ul>\n</li>\n<li>No lockout (starving)\n<ul>\n<li>if there is a process in the entry section then later the <em>same</em> process is in the critical section</li>\n</ul>\n</li>\n<li>Unobstructed exit\n<ul>\n<li>no process is stuck in the exit section (no loops…)</li>\n</ul>\n</li>\n</ol>\n<p>General:</p>\n<ul>\n<li>1 bit suffices for mutex without deadlock</li>\n<li>O(log(n)) bits needed for fairness</li>\n</ul>","frontmatter":{"title":"Synchronization Primitives (Read-Modify-Write)","tags":["Assembler"],"category":"Programming"},"headings":[{"depth":1,"value":"Read-Modify-Write"},{"depth":2,"value":"Compare-And-Swap"},{"depth":2,"value":"Load-Link/Store-Conditional"},{"depth":2,"value":"Test and Set"},{"depth":2,"value":"Generic RWM"},{"depth":1,"value":"Mutex (Shared Memory)"}]}},"pageContext":{"id":"3215e7d0-098e-5264-a395-eea1ea2262ed","previousPost":{"title":"Models of Computation","slug":"/blog/models_of_computation"},"nextPost":{"title":"Object Databases","slug":"/blog/object_databases"},"dates":{"created":1459980456,"modified":1647509701}}},
    "staticQueryHashes": []}